<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_hub_action_type_definition">
    <sys_hub_action_type_definition action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <active>true</active>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <ih_action>false</ih_action>
        <internal_name>getd_getbulkarmisdata</internal_name>
        <label_cache>[{"name":"{{action.mode}}","label":"action➛mode","type":"action","ref":""},{"name":"{{action.max_runtime}}","label":"action➛max_runtime","type":"action","ref":""},{"name":"{{action.query}}","label":"action➛query","type":"action","ref":""},{"name":"{{action.tags_to_table}}","label":"action➛tags_to_table","type":"action","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].variable}}","label":"step➛Script step➛variable","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug1}}","label":"step➛Script step➛debug","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug2}}","label":"step➛Script step➛debug2","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug3}}","label":"step➛Script step➛debug3","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug}}","label":"step➛Script step➛debug","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].time_left_s}}","label":"step➛Script step➛time_left_s","type":"step","ref":""}]</label_cache>
        <latest_snapshot>07182ece1b9fd0504ca7edf9bc4bcb40</latest_snapshot>
        <master_snapshot>d4181bf61b8294104ca7edf9bc4bcb8f</master_snapshot>
        <name>GETD_GetBulkArmisData (v2.2)</name>
        <natlang/>
        <outputs/>
        <outputs/>
        <state>published</state>
        <sys_class_name>sys_hub_action_type_definition</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 17:32:52</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>b25ad2f21b0a10104be764e8bc4bcbe8</sys_id>
        <sys_mod_count>251</sys_mod_count>
        <sys_name>GETD_GetBulkArmisData (v2.2)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name>sys_hub_action_type_definition_b25ad2f21b0a10104be764e8bc4bcbe8</sys_update_name>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:56:04</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_definition>
    <sys_variable_value action="delete_multiple" query="document_key=b25ad2f21b0a10104be764e8bc4bcbe8"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_action_type_definition</document>
        <document_key>b25ad2f21b0a10104be764e8bc4bcbe8</document_key>
        <order>1</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:10:55</sys_created_on>
        <sys_id>b8a619771b4ad8104ca7edf9bc4bcbd4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:10:55</sys_updated_on>
        <value/>
        <variable display_value="">a4a619771b4ad8104ca7edf9bc4bcbcb</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=b25ad2f21b0a10104be764e8bc4bcbe8"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>time_left_s</field>
        <id>b25ad2f21b0a10104be764e8bc4bcbe8</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:10:55</sys_created_on>
        <sys_id>38a619771b4ad8104ca7edf9bc4bcbd4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:10:55</sys_updated_on>
        <table>var__m_sys_hub_action_output_b25ad2f21b0a10104be764e8bc4bcbe8</table>
        <value>{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].time_left_s}}</value>
    </sys_element_mapping>
    <sys_hub_step_instance action="delete_multiple" query="action=b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT IN1aeed10edb1b1c107c888043059619bd,728266fe1b0a10104be764e8bc4bcb36,9eeed10edb1b1c107c888043059619c5,f5c3a986db5b1c107c888043059619b0"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>ae1d8c67-0c60-41a4-b516-ad46c8a934f3</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1aeed10edb1b1c107c888043059619bd</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=1aeed10edb1b1c107c888043059619bd"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1aeed10edb1b1c107c888043059619bd</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>5aeed10edb1b1c107c888043059619c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1aeed10edb1b1c107c888043059619bd</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>96eed10edb1b1c107c888043059619c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>96e130a7-3355-46a3-a045-f81383e2f7e3</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>728266fe1b0a10104be764e8bc4bcb36</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:55:58</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=728266fe1b0a10104be764e8bc4bcb36"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>728266fe1b0a10104be764e8bc4bcb36</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>3682e6321b4a10104be764e8bc4bcbe7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 18:08:39</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>728266fe1b0a10104be764e8bc4bcb36</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>3e82e6321b4a10104be764e8bc4bcbe7</sys_id>
        <sys_mod_count>81</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:55:58</sys_updated_on>
        <value>  /*
  
  This script repeatedly queries Armis' "GET Devices" endpoint and records its entire database of devices to the Armis Device Table.
  
  It starts from record N, where N is  "getd_[mode]_current_n" on the cache table.
  
  Up to 5000 records can be queried at a time, so it loops as long as it is allowed (specified by max_runtime_seconds). 
  Lots of error 500s when 5000 are queried, dropping to 1000.
  
  The query returns with a "next" value and a "total" value that are recorded to the cache table. "next" is null if the end of the list has been reached.
  
  The script has two modes: "master" and "refresh".
  - "master" mode never resets. Its goal is to always keep the table updated with brand new devices, so it's always querying for the latest devices it can find. It should query for new devices every 5 minutes.
  - "refresh" mode's goal is to go through the entire Armis database and refresh the properties of all active devices. This should be reset on a cadence (once a day/week/etc.)
  
  */
// *********************************
// *** ACTION-SPECIFIC FUNCTIONS ***
// *********************************

function calculateTimeLeft(start_time,max_runtime_seconds)
{
 var elapsed_ms = now() - start_time
 return max_runtime_seconds - elapsed_ms/1000
}

function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}


// **********************
// *** IMPLEMENTATION ***
// **********************


(function execute(inputs, outputs) {

  //Escape early
  if(inputs.mode == 'test') { return }
  if(inputs.max_runtime_seconds &lt;= 0) { outputs.time_left_s = inputs.max_runtime_seconds; return }
  
  //Init
  var execution_id = generateID()
  var debug = []
  var start_time = now()
  var api_total = 0
  var heavy_total = 0
  var lap = now()
  var num_api_calls = 0
  var num_armis_devices = 0
  var num_records_updated = 0
  var num_records_inserted = 0
  var num_records_skipped = 0
  var total_mode_records = 0
  var error_report = '';
  var report = '';
  var original_getd_n = -1
  outputs.time_left_s = 0 // just in case.
  var num_records_queried = 500
  var num_refresh_threshold = 20 //The number of devices to go back compared to the "next" value, in order to ensure that we get some degree of overlap and catch missed devices
  
  //Set up query
  var armis_query = getConfigValue('armis_' + inputs.mode + '_query')  
  var cache_key = "getd_" + inputs.mode + "_current_n"
  
  debug.push("QUERY= '" + armis_query + "'." + lapReport(lap));lap=now()
  
  //Ending counters/report
  
  try {
    
    //LOOP - until we are out of time.
    // [current time] - [start_time] is in milliseconds, divide to get seconds elapsed.
    var end_loop_early = false // Is flagged manually if the query fails outright
    var max_runtime_seconds = parseInt(inputs.max_runtime_seconds)
    if(isNaN(max_runtime_seconds)) { max_runtime_seconds = 240 }
    while(end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_runtime_seconds*1000)
    {
      debug.push("LOOP " + num_api_calls + " BEGIN "+ lapReport(lap));lap=now()

      //GET CURRENT ITERATION'S START PAGE (getd_n). This is in the cache table. If it doesn't exist, start at n=0
      var getd_n = parseInt(getCacheValue(cache_key,'int'))
      if (isNaN(getd_n)) { getd_n = 0 }
      debug.push("getd_n: " + getd_n + " " + lapReport(lap));lap=now()
      if(original_getd_n == -1) { original_getd_n = getd_n} // used for reporting.

      //We want 100 devices, starting at device N
      //Using Armis API endpoint GET /api/v1/search/
      var request = new sn_ws.RESTMessageV2('Armis API','GET Search')
      request.setRequestHeader('Authorization',getCurrentToken())
      request.setQueryParameter('aql',armis_query)
      request.setQueryParameter('from',getd_n)
      request.setQueryParameter('length',num_records_queried)
      request.setQueryParameter('orderBy','id')
      debug.push("Query setup: aql='" + armis_query + "',from=" + getd_n + ",length=" + num_records_queried + ",orderBy=id" +lapReport(lap));lap=now()

      //Execute query, but sandwich .execute() with a time check to document how long it took.
      var glide_start_time = new GlideDateTime()
      var t = now()
      var response = request.execute()
      api_total += now() - t
      
      debug.push("Queried " + num_records_queried + " devices, response: " + response.getStatusCode() + " " + lapReport(lap));lap=now()
      if (response.getStatusCode() != 200) { debug.push(response.getBody()) }

      //Log the query results
      writeToAPILog({id: execution_id, endpoint: 'get_search', payload: armis_query, response_code: response.getStatusCode(), 
                     response_body: response.getBody(), start_time: glide_start_time, time_delta_ms: (now() - t)})
      debug.push("Logged results to Armis API Log. "  + lapReport(lap));lap=now()
      num_api_calls += 1

      //Extract data!
      if(response.getStatusCode() == 200)
      {
        //Parse!
        var data = JSON.parse(response.getBody()).data
        total_mode_records = data.total
        debug.push("Parsed data. count=" + data.count + ", next=" + data.next + ", total=" + data.total + " "  + lapReport(lap));lap=now()

        num_armis_devices += data.count

        //Note that if we're at the end of the list of devices, next will be null.
        //What happens next depends on the mode:
        // - if mode==master, we want to just keep the current "next" at the total so that when we check again, we're checking for NEW devices.
        // - if mode==refresh, we want to loop back around to 0 and start again when we've finished the refresh stack.
        if (data.next == null) {
          switch (inputs.mode) {
            case 'master':
              setCacheValue(cache_key, data.total, 'int')
              break;
            case 'refresh':
              setCacheValue(cache_key, 0, 'int');
              report += '[MAXED,RESET TO 0] '
              break;
          }
        }
        else { 
          //Update the cache so the next run starts where we left off.
          //Note that we want to go a few steps backward (num_refresh_threshold) so that we can try to catch any new devices that may have been added since we last checked.
          //This won't be perfect but should go a long way toward improving consistency.
          setCacheValue(cache_key, data.next - num_refresh_threshold, 'int')
          num_armis_devices -= num_refresh_threshold //we want to be able to accurately track that we're backing up each step by X records.
        }

        //Set the total too, just for reference.
        setCacheValue("getd_" + inputs.mode + "_total", data.total, 'int')

        //Next, loop through all 100-ish returns. First, we expect this will be heavy processing, so let's mark it out separately.
        var t = now()

        if (data.count &gt; 0) {
          for (var i=0;i&lt;data.count;i++)
          {
            //Alllllll the fields in the query need to be pushed to the Armis Device Table.
            var entry = data.results[i]

            //I've abstracted this functionality into the function library since I'll be using it in more than one action, see FUNCTION_LIBRARY documentation
            var results = updateArmisDevice(entry,inputs.tags_to_table)
            //debug.push(results.action + ":" + entry.id + " (" + entry.name + "). " + lapReport(lap));lap=now()
            switch (results.action) {
              case 'insert': num_records_inserted += 1; break
              case 'update': num_records_updated += 1; break
              case 'no_update_needed': num_records_skipped += 1; break
            }
          }
        }
        else
        {
          //We have 0 records.
          //If this is our first query in MASTER mode, that means we're maxed out. We don't even want to log anything, just drop the script.

          if (num_api_calls == 1 &amp;&amp; inputs.mode == 'master') {
            outputs.debug = "0 records, killed script."
            outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
            return
          }
          //If we're in master mode, we have processed some records so we still want to report, but we're done looping.
          //(We do want to set a flag in the cache that the master is maxed out, so triggers can start processing.)
          if (inputs.mode == 'master')
          {
            setCacheValue('master_complete', 1, 'int')
            end_loop_early = true
          }
          //Any other case (i.e. refresh mode), we have just reset the counter to 0 and we want to keep looping.
        }

        //Document our heavy processing time
        heavy_total += now() - t
      }
      else
      {
        //API call was not successful. Try again.
        debug.push("API failed: (" + response.getStatusCode() + ") " + response.getBody() + " ")
      }
    }
  }
  catch(ex)
  {
    error_report = '[ERROR: ' + ex + '] '
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  //Percentage reporting, to get a good idea of how far we've come along.
  var start_pct = ( 100 * (original_getd_n) / total_mode_records ).toFixed(1)
  var done_pct = ( 100 * (parseInt(num_armis_devices + num_refresh_threshold) + parseInt(original_getd_n)) / total_mode_records ).toFixed(1)
  var percentage_insert = " (" + start_pct + "%-&gt;" + done_pct + "%)"
    
  //Build and store the action's results to the action log.
  report += "[" + inputs.mode.toUpperCase() + "]" + percentage_insert + " From n=" + original_getd_n + "/" + total_mode_records + ", made " + num_api_calls + " API calls, total " + num_armis_devices + " devices (inserted:" + num_records_inserted + ", updated:" + num_records_updated + ", skipped:" + num_records_skipped + "). Time left:" + Math.round(calculateTimeLeft(start_time,max_runtime_seconds)) + "s."
  debug = debug.join('\n')
  
  writeToActionLog(
    {id: execution_id, action_type: 'GETD_GetBulkArmisData', total_time: (now() - start_time), api_time: api_total, 
     heavy_processing_time: heavy_total, report: report, debug_string: debug})
  
  outputs.debug = debug
  outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>728266fe1b0a10104be764e8bc4bcb36</document_key>
        <order>0</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:47</sys_created_on>
        <sys_id>9f798fb61b0e10104be764e8bc4bcb42</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:16:59</sys_updated_on>
        <value/>
        <variable display_value="">3a794fb61b0e10104be764e8bc4bcbd7</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=728266fe1b0a10104be764e8bc4bcb36"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>fa82e6321b4a10104be764e8bc4bcbe6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 18:08:39</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_runtime_seconds</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:47</sys_created_on>
        <sys_id>1f798fb61b0e10104be764e8bc4bcb42</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:18:25</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.max_runtime}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>mode</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:47</sys_created_on>
        <sys_id>5b798fb61b0e10104be764e8bc4bcb42</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:47</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.mode}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>query</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 01:30:13</sys_created_on>
        <sys_id>139744031bc694104ca7edf9bc4bcb89</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 01:35:22</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.query}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>b282e6321b4a10104be764e8bc4bcbe7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 18:08:39</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>tags_to_table</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 21:39:10</sys_created_on>
        <sys_id>e05c98971bcad4104ca7edf9bc4bcb7a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 21:39:10</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.tags_to_table}}</value>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=728266fe1b0a10104be764e8bc4bcb36^sys_idNOT IN3a794fb61b0e10104be764e8bc4bcbd7,985c98971bcad4104ca7edf9bc4bcb62,f2794fb61b0e10104be764e8bc4bcbdc"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_runtime_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:45</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3a794fb61b0e10104be764e8bc4bcbd7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:45</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>tags_to_table</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>200</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 21:39:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>985c98971bcad4104ca7edf9bc4bcb62</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 21:39:09</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>mode</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:46</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f2794fb61b0e10104be764e8bc4bcbdc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:46</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=728266fe1b0a10104be764e8bc4bcb36^sys_idNOT IN28a619771b4ad8104ca7edf9bc4bcbbe,3a82e6321b4a10104be764e8bc4bcba5"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=b85eb28c-f4f2-4a1e-8bb8-87dea0101b6a</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>time_left_s</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>time_left_s</label>
        <mandatory>true</mandatory>
        <max_length>40</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:10:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>28a619771b4ad8104ca7edf9bc4bcbbe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:10:54</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>child_label=debug_child0,child_name=debug_child0,child_type=string,child_type_label=String,child_uiUniqueId=b2306af6-4515-4dc2-9b73-2f56b5d5b48a,co_type_name=FD7a794fb6de0e1010c7a6c28ff79e79e0,element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=960763e0-b1e3-474c-82b7-ed7de9c24726</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3a82e6321b4a10104be764e8bc4bcba5</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 21:28:07</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>56d8be11-3840-4d95-b226-5839bf84f876</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9eeed10edb1b1c107c888043059619c5</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=9eeed10edb1b1c107c888043059619c5"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9eeed10edb1b1c107c888043059619c5</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>5aeed10edb1b1c107c888043059619cb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9eeed10edb1b1c107c888043059619c5</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>96eed10edb1b1c107c888043059619cb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>ad349612-639a-4dda-aa8e-7c474575fc11</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f5c3a986db5b1c107c888043059619b0</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:27</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=f5c3a986db5b1c107c888043059619b0"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f5c3a986db5b1c107c888043059619b0</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:27</sys_created_on>
        <sys_id>31c3a986db5b1c107c888043059619b6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:27</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    if(j.sensor != null) { device.sensor_name = j.sensor.name }
    if(j.sensor != null) { device.sensor_type = j.sensor.type }
    if(j.site != null) { device.site = j.site.name }
    if(j.site != null) { device.site_location = j.site.location }
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}


(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f5c3a986db5b1c107c888043059619b0</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:27</sys_created_on>
        <sys_id>7dc3a986db5b1c107c888043059619b5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:27</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_action_input action="delete_multiple" query="model=b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT IN62794fb61b0e10104be764e8bc4bcbc7,6ed67bfa1b4694104ca7edf9bc4bcb82,b34c98571bcad4104ca7edf9bc4bcbc1"/>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=choice,uiTypeLabel=Choice,uiUniqueId=d04d4a47-1548-4a43-bf7f-5ee652acf20f</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice>3</choice>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>master</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>mode</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Choice">choice</internal_type>
        <label>mode</label>
        <mandatory>false</mandatory>
        <max_length>32</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</model>
        <model_id>b25ad2f21b0a10104be764e8bc4bcbe8</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:45</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>62794fb61b0e10104be764e8bc4bcbc7</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:45</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=c0ab8d17-e3ea-4ba2-ae2f-1a989f9aa85a</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>30</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_runtime</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>max_runtime</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</model>
        <model_id>b25ad2f21b0a10104be764e8bc4bcbe8</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 00:16:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>6ed67bfa1b4694104ca7edf9bc4bcb82</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:16:59</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=boolean,uiTypeLabel=True/False,uiUniqueId=6bbf9627-cd6d-4499-9545-7eee9febe293</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>tags_to_table</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="">boolean</internal_type>
        <label>tags_to_table</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</model>
        <model_id>b25ad2f21b0a10104be764e8bc4bcbe8</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <next_element/>
        <order>3</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 21:39:07</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b34c98571bcad4104ca7edf9bc4bcbc1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 21:39:07</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_output action="delete_multiple" query="model=b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT INa4a619771b4ad8104ca7edf9bc4bcbcb"/>
    <sys_hub_action_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=fa7ee6fc-64a5-4211-81f1-c572e469a138</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>time_left_s</element>
        <element_prototype/>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_link/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>time_left_s</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</model>
        <model_id>b25ad2f21b0a10104be764e8bc4bcbe8</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_output_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:10:55</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a4a619771b4ad8104ca7edf9bc4bcbcb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:10:55</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_output>
    <sys_hub_step_instance action="delete_multiple" query="action=b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT IN1aeed10edb1b1c107c888043059619bd,728266fe1b0a10104be764e8bc4bcb36,9eeed10edb1b1c107c888043059619c5,f5c3a986db5b1c107c888043059619b0"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>ae1d8c67-0c60-41a4-b516-ad46c8a934f3</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1aeed10edb1b1c107c888043059619bd</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=1aeed10edb1b1c107c888043059619bd"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1aeed10edb1b1c107c888043059619bd</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>5aeed10edb1b1c107c888043059619c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1aeed10edb1b1c107c888043059619bd</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>96eed10edb1b1c107c888043059619c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>96e130a7-3355-46a3-a045-f81383e2f7e3</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>728266fe1b0a10104be764e8bc4bcb36</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:55:58</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=728266fe1b0a10104be764e8bc4bcb36"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>728266fe1b0a10104be764e8bc4bcb36</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>3682e6321b4a10104be764e8bc4bcbe7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 18:08:39</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>728266fe1b0a10104be764e8bc4bcb36</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>3e82e6321b4a10104be764e8bc4bcbe7</sys_id>
        <sys_mod_count>81</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:55:58</sys_updated_on>
        <value>  /*
  
  This script repeatedly queries Armis' "GET Devices" endpoint and records its entire database of devices to the Armis Device Table.
  
  It starts from record N, where N is  "getd_[mode]_current_n" on the cache table.
  
  Up to 5000 records can be queried at a time, so it loops as long as it is allowed (specified by max_runtime_seconds). 
  Lots of error 500s when 5000 are queried, dropping to 1000.
  
  The query returns with a "next" value and a "total" value that are recorded to the cache table. "next" is null if the end of the list has been reached.
  
  The script has two modes: "master" and "refresh".
  - "master" mode never resets. Its goal is to always keep the table updated with brand new devices, so it's always querying for the latest devices it can find. It should query for new devices every 5 minutes.
  - "refresh" mode's goal is to go through the entire Armis database and refresh the properties of all active devices. This should be reset on a cadence (once a day/week/etc.)
  
  */
// *********************************
// *** ACTION-SPECIFIC FUNCTIONS ***
// *********************************

function calculateTimeLeft(start_time,max_runtime_seconds)
{
 var elapsed_ms = now() - start_time
 return max_runtime_seconds - elapsed_ms/1000
}

function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}


// **********************
// *** IMPLEMENTATION ***
// **********************


(function execute(inputs, outputs) {

  //Escape early
  if(inputs.mode == 'test') { return }
  if(inputs.max_runtime_seconds &lt;= 0) { outputs.time_left_s = inputs.max_runtime_seconds; return }
  
  //Init
  var execution_id = generateID()
  var debug = []
  var start_time = now()
  var api_total = 0
  var heavy_total = 0
  var lap = now()
  var num_api_calls = 0
  var num_armis_devices = 0
  var num_records_updated = 0
  var num_records_inserted = 0
  var num_records_skipped = 0
  var total_mode_records = 0
  var error_report = '';
  var report = '';
  var original_getd_n = -1
  outputs.time_left_s = 0 // just in case.
  var num_records_queried = 500
  var num_refresh_threshold = 20 //The number of devices to go back compared to the "next" value, in order to ensure that we get some degree of overlap and catch missed devices
  
  //Set up query
  var armis_query = getConfigValue('armis_' + inputs.mode + '_query')  
  var cache_key = "getd_" + inputs.mode + "_current_n"
  
  debug.push("QUERY= '" + armis_query + "'." + lapReport(lap));lap=now()
  
  //Ending counters/report
  
  try {
    
    //LOOP - until we are out of time.
    // [current time] - [start_time] is in milliseconds, divide to get seconds elapsed.
    var end_loop_early = false // Is flagged manually if the query fails outright
    var max_runtime_seconds = parseInt(inputs.max_runtime_seconds)
    if(isNaN(max_runtime_seconds)) { max_runtime_seconds = 240 }
    while(end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_runtime_seconds*1000)
    {
      debug.push("LOOP " + num_api_calls + " BEGIN "+ lapReport(lap));lap=now()

      //GET CURRENT ITERATION'S START PAGE (getd_n). This is in the cache table. If it doesn't exist, start at n=0
      var getd_n = parseInt(getCacheValue(cache_key,'int'))
      if (isNaN(getd_n)) { getd_n = 0 }
      debug.push("getd_n: " + getd_n + " " + lapReport(lap));lap=now()
      if(original_getd_n == -1) { original_getd_n = getd_n} // used for reporting.

      //We want 100 devices, starting at device N
      //Using Armis API endpoint GET /api/v1/search/
      var request = new sn_ws.RESTMessageV2('Armis API','GET Search')
      request.setRequestHeader('Authorization',getCurrentToken())
      request.setQueryParameter('aql',armis_query)
      request.setQueryParameter('from',getd_n)
      request.setQueryParameter('length',num_records_queried)
      request.setQueryParameter('orderBy','id')
      debug.push("Query setup: aql='" + armis_query + "',from=" + getd_n + ",length=" + num_records_queried + ",orderBy=id" +lapReport(lap));lap=now()

      //Execute query, but sandwich .execute() with a time check to document how long it took.
      var glide_start_time = new GlideDateTime()
      var t = now()
      var response = request.execute()
      api_total += now() - t
      
      debug.push("Queried " + num_records_queried + " devices, response: " + response.getStatusCode() + " " + lapReport(lap));lap=now()
      if (response.getStatusCode() != 200) { debug.push(response.getBody()) }

      //Log the query results
      writeToAPILog({id: execution_id, endpoint: 'get_search', payload: armis_query, response_code: response.getStatusCode(), 
                     response_body: response.getBody(), start_time: glide_start_time, time_delta_ms: (now() - t)})
      debug.push("Logged results to Armis API Log. "  + lapReport(lap));lap=now()
      num_api_calls += 1

      //Extract data!
      if(response.getStatusCode() == 200)
      {
        //Parse!
        var data = JSON.parse(response.getBody()).data
        total_mode_records = data.total
        debug.push("Parsed data. count=" + data.count + ", next=" + data.next + ", total=" + data.total + " "  + lapReport(lap));lap=now()

        num_armis_devices += data.count

        //Note that if we're at the end of the list of devices, next will be null.
        //What happens next depends on the mode:
        // - if mode==master, we want to just keep the current "next" at the total so that when we check again, we're checking for NEW devices.
        // - if mode==refresh, we want to loop back around to 0 and start again when we've finished the refresh stack.
        if (data.next == null) {
          switch (inputs.mode) {
            case 'master':
              setCacheValue(cache_key, data.total, 'int')
              break;
            case 'refresh':
              setCacheValue(cache_key, 0, 'int');
              report += '[MAXED,RESET TO 0] '
              break;
          }
        }
        else { 
          //Update the cache so the next run starts where we left off.
          //Note that we want to go a few steps backward (num_refresh_threshold) so that we can try to catch any new devices that may have been added since we last checked.
          //This won't be perfect but should go a long way toward improving consistency.
          setCacheValue(cache_key, data.next - num_refresh_threshold, 'int')
          num_armis_devices -= num_refresh_threshold //we want to be able to accurately track that we're backing up each step by X records.
        }

        //Set the total too, just for reference.
        setCacheValue("getd_" + inputs.mode + "_total", data.total, 'int')

        //Next, loop through all 100-ish returns. First, we expect this will be heavy processing, so let's mark it out separately.
        var t = now()

        if (data.count &gt; 0) {
          for (var i=0;i&lt;data.count;i++)
          {
            //Alllllll the fields in the query need to be pushed to the Armis Device Table.
            var entry = data.results[i]

            //I've abstracted this functionality into the function library since I'll be using it in more than one action, see FUNCTION_LIBRARY documentation
            var results = updateArmisDevice(entry,inputs.tags_to_table)
            //debug.push(results.action + ":" + entry.id + " (" + entry.name + "). " + lapReport(lap));lap=now()
            switch (results.action) {
              case 'insert': num_records_inserted += 1; break
              case 'update': num_records_updated += 1; break
              case 'no_update_needed': num_records_skipped += 1; break
            }
          }
        }
        else
        {
          //We have 0 records.
          //If this is our first query in MASTER mode, that means we're maxed out. We don't even want to log anything, just drop the script.

          if (num_api_calls == 1 &amp;&amp; inputs.mode == 'master') {
            outputs.debug = "0 records, killed script."
            outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
            return
          }
          //If we're in master mode, we have processed some records so we still want to report, but we're done looping.
          //(We do want to set a flag in the cache that the master is maxed out, so triggers can start processing.)
          if (inputs.mode == 'master')
          {
            setCacheValue('master_complete', 1, 'int')
            end_loop_early = true
          }
          //Any other case (i.e. refresh mode), we have just reset the counter to 0 and we want to keep looping.
        }

        //Document our heavy processing time
        heavy_total += now() - t
      }
      else
      {
        //API call was not successful. Try again.
        debug.push("API failed: (" + response.getStatusCode() + ") " + response.getBody() + " ")
      }
    }
  }
  catch(ex)
  {
    error_report = '[ERROR: ' + ex + '] '
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  //Percentage reporting, to get a good idea of how far we've come along.
  var start_pct = ( 100 * (original_getd_n) / total_mode_records ).toFixed(1)
  var done_pct = ( 100 * (parseInt(num_armis_devices + num_refresh_threshold) + parseInt(original_getd_n)) / total_mode_records ).toFixed(1)
  var percentage_insert = " (" + start_pct + "%-&gt;" + done_pct + "%)"
    
  //Build and store the action's results to the action log.
  report += "[" + inputs.mode.toUpperCase() + "]" + percentage_insert + " From n=" + original_getd_n + "/" + total_mode_records + ", made " + num_api_calls + " API calls, total " + num_armis_devices + " devices (inserted:" + num_records_inserted + ", updated:" + num_records_updated + ", skipped:" + num_records_skipped + "). Time left:" + Math.round(calculateTimeLeft(start_time,max_runtime_seconds)) + "s."
  debug = debug.join('\n')
  
  writeToActionLog(
    {id: execution_id, action_type: 'GETD_GetBulkArmisData', total_time: (now() - start_time), api_time: api_total, 
     heavy_processing_time: heavy_total, report: report, debug_string: debug})
  
  outputs.debug = debug
  outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>728266fe1b0a10104be764e8bc4bcb36</document_key>
        <order>0</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:47</sys_created_on>
        <sys_id>9f798fb61b0e10104be764e8bc4bcb42</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:16:59</sys_updated_on>
        <value/>
        <variable display_value="">3a794fb61b0e10104be764e8bc4bcbd7</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=728266fe1b0a10104be764e8bc4bcb36"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>fa82e6321b4a10104be764e8bc4bcbe6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 18:08:39</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_runtime_seconds</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:47</sys_created_on>
        <sys_id>1f798fb61b0e10104be764e8bc4bcb42</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:18:25</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.max_runtime}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>mode</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:47</sys_created_on>
        <sys_id>5b798fb61b0e10104be764e8bc4bcb42</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:47</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.mode}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>query</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 01:30:13</sys_created_on>
        <sys_id>139744031bc694104ca7edf9bc4bcb89</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 01:35:22</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.query}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:39</sys_created_on>
        <sys_id>b282e6321b4a10104be764e8bc4bcbe7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 18:08:39</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>tags_to_table</field>
        <id>728266fe1b0a10104be764e8bc4bcb36</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 21:39:10</sys_created_on>
        <sys_id>e05c98971bcad4104ca7edf9bc4bcb7a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 21:39:10</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</table>
        <value>{{action.tags_to_table}}</value>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=728266fe1b0a10104be764e8bc4bcb36^sys_idNOT IN3a794fb61b0e10104be764e8bc4bcbd7,985c98971bcad4104ca7edf9bc4bcb62,f2794fb61b0e10104be764e8bc4bcbdc"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_runtime_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:45</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3a794fb61b0e10104be764e8bc4bcbd7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:45</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>tags_to_table</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>200</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 21:39:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>985c98971bcad4104ca7edf9bc4bcb62</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 21:39:09</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>mode</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:46</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f2794fb61b0e10104be764e8bc4bcbdc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:46</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=728266fe1b0a10104be764e8bc4bcb36^sys_idNOT IN28a619771b4ad8104ca7edf9bc4bcbbe,3a82e6321b4a10104be764e8bc4bcba5"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=b85eb28c-f4f2-4a1e-8bb8-87dea0101b6a</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>time_left_s</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>time_left_s</label>
        <mandatory>true</mandatory>
        <max_length>40</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:10:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>28a619771b4ad8104ca7edf9bc4bcbbe</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:10:54</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>child_label=debug_child0,child_name=debug_child0,child_type=string,child_type_label=String,child_uiUniqueId=b2306af6-4515-4dc2-9b73-2f56b5d5b48a,co_type_name=FD7a794fb6de0e1010c7a6c28ff79e79e0,element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=960763e0-b1e3-474c-82b7-ed7de9c24726</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">728266fe1b0a10104be764e8bc4bcb36</model>
        <model_id>728266fe1b0a10104be764e8bc4bcb36</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_728266fe1b0a10104be764e8bc4bcb36</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 18:08:38</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3a82e6321b4a10104be764e8bc4bcba5</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 21:28:07</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>56d8be11-3840-4d95-b226-5839bf84f876</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9eeed10edb1b1c107c888043059619c5</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=9eeed10edb1b1c107c888043059619c5"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9eeed10edb1b1c107c888043059619c5</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>5aeed10edb1b1c107c888043059619cb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9eeed10edb1b1c107c888043059619c5</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:36:11</sys_created_on>
        <sys_id>96eed10edb1b1c107c888043059619cb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:36:11</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action>
        <cid>ad349612-639a-4dda-aa8e-7c474575fc11</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f5c3a986db5b1c107c888043059619b0</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:27</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=f5c3a986db5b1c107c888043059619b0"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f5c3a986db5b1c107c888043059619b0</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:27</sys_created_on>
        <sys_id>31c3a986db5b1c107c888043059619b6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:27</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    if(j.sensor != null) { device.sensor_name = j.sensor.name }
    if(j.sensor != null) { device.sensor_type = j.sensor.type }
    if(j.site != null) { device.site = j.site.name }
    if(j.site != null) { device.site_location = j.site.location }
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}


(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f5c3a986db5b1c107c888043059619b0</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:27</sys_created_on>
        <sys_id>7dc3a986db5b1c107c888043059619b5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:27</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT IN22d67bfa1b4694104ca7edf9bc4bcb8a,ea794fb61b0e10104be764e8bc4bcbd0,ff4c98971bcad4104ca7edf9bc4bcb22"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>max_runtime</element>
        <help/>
        <hint/>
        <label>max_runtime</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 00:16:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>22d67bfa1b4694104ca7edf9bc4bcb8a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:16:59</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>mode</element>
        <help/>
        <hint/>
        <label>mode</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 20:58:45</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ea794fb61b0e10104be764e8bc4bcbd0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 20:58:45</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>tags_to_table</element>
        <help/>
        <hint>Should we populate the Armis Tags table? (May substantially increase time, more SQL queries.)</hint>
        <label>tags_to_table</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 21:39:08</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ff4c98971bcad4104ca7edf9bc4bcb22</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 21:39:08</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_choice action="delete_multiple" query="name=var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT IN62794fb61b0e10104be764e8bc4bcbcb,ee794fb61b0e10104be764e8bc4bcbcb,f3a5c6231b42d0104be764e8bc4bcbe0"/>
    <sys_choice field="mode" table="var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8">
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>mode</element>
            <hint/>
            <inactive>false</inactive>
            <label>master</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
            <sequence>0</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-20 20:58:45</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>62794fb61b0e10104be764e8bc4bcbcb</sys_id>
            <sys_mod_count>1</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-20 21:25:13</sys_updated_on>
            <value>master</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>mode</element>
            <hint/>
            <inactive>false</inactive>
            <label>refresh</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
            <sequence>1</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-20 20:58:45</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>ee794fb61b0e10104be764e8bc4bcbcb</sys_id>
            <sys_mod_count>1</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-20 21:25:13</sys_updated_on>
            <value>refresh</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>mode</element>
            <hint/>
            <inactive>false</inactive>
            <label>test</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_b25ad2f21b0a10104be764e8bc4bcbe8</name>
            <sequence>2</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-22 23:58:00</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>f3a5c6231b42d0104be764e8bc4bcbe0</sys_id>
            <sys_mod_count>1</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-23 02:27:56</sys_updated_on>
            <value>test</value>
        </sys_choice>
    </sys_choice>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_output_b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT IN38a619771b4ad8104ca7edf9bc4bcbd1"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>time_left_s</element>
        <help/>
        <hint/>
        <label>time_left_s</label>
        <language>en</language>
        <name>var__m_sys_hub_action_output_b25ad2f21b0a10104be764e8bc4bcbe8</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:10:55</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>38a619771b4ad8104ca7edf9bc4bcbd1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:10:55</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_hub_action_plan action="delete_multiple" query="action_id=b25ad2f21b0a10104be764e8bc4bcbe8^sys_idNOT INf8185bf61b8294104ca7edf9bc4bcb1d"/>
    <sys_hub_action_plan action="INSERT_OR_UPDATE">
        <action_id display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</action_id>
        <plan>{"persistor":{"@class":".ChunkingPlanPersistor","table":"sys_hub_action_plan","id":"f8185bf61b8294104ca7edf9bc4bcb1d","name":"plan"}}</plan>
        <snapshot>07182ece1b9fd0504ca7edf9bc4bcb40</snapshot>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:31</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>f8185bf61b8294104ca7edf9bc4bcb1d</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_overrides/>
        <sys_scope/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:56:06</sys_updated_on>
    </sys_hub_action_plan>
    <sys_hub_action_type_snapshot action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <internal_name>getd_getbulkarmisdata</internal_name>
        <label_cache>[{"name":"{{action.mode}}","label":"action➛mode","type":"action","ref":""},{"name":"{{action.max_runtime}}","label":"action➛max_runtime","type":"action","ref":""},{"name":"{{action.query}}","label":"action➛query","type":"action","ref":""},{"name":"{{action.tags_to_table}}","label":"action➛tags_to_table","type":"action","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].variable}}","label":"step➛Script step➛variable","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug1}}","label":"step➛Script step➛debug","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug2}}","label":"step➛Script step➛debug2","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug3}}","label":"step➛Script step➛debug3","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].debug}}","label":"step➛Script step➛debug","type":"step","ref":""},{"name":"{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].time_left_s}}","label":"step➛Script step➛time_left_s","type":"step","ref":""}]</label_cache>
        <master>true</master>
        <name>GETD_GetBulkArmisData (v2.2)</name>
        <natlang/>
        <outputs/>
        <outputs/>
        <parent_action display_value="GETD_GetBulkArmisData (v2.2)">b25ad2f21b0a10104be764e8bc4bcbe8</parent_action>
        <sys_class_name>sys_hub_action_type_snapshot</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:29</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>d4181bf61b8294104ca7edf9bc4bcb8f</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name/>
        <sys_overrides/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:58</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_snapshot>
    <sys_variable_value action="delete_multiple" query="document_key=d4181bf61b8294104ca7edf9bc4bcb8f"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_action_type_snapshot</document>
        <document_key>d4181bf61b8294104ca7edf9bc4bcb8f</document_key>
        <order>1</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:19:11</sys_created_on>
        <sys_id>7d88913b1b4ad8104ca7edf9bc4bcb5f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:19:11</sys_updated_on>
        <value/>
        <variable display_value="">fd88913b1b4ad8104ca7edf9bc4bcb57</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=d4181bf61b8294104ca7edf9bc4bcb8f"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>time_left_s</field>
        <id>d4181bf61b8294104ca7edf9bc4bcb8f</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:19:11</sys_created_on>
        <sys_id>f988913b1b4ad8104ca7edf9bc4bcb5f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:19:11</sys_updated_on>
        <table>var__m_sys_hub_action_output_d4181bf61b8294104ca7edf9bc4bcb8f</table>
        <value>{{step[96e130a7-3355-46a3-a045-f81383e2f7e3].time_left_s}}</value>
    </sys_element_mapping>
    <sys_hub_step_instance action="delete_multiple" query="action=d4181bf61b8294104ca7edf9bc4bcb8f^sys_idNOT IN60181bf61b8294104ca7edf9bc4bcb9d,66c32d86db5b1c107c88804305961910,e2c32d86db5b1c107c88804305961909,e2c32d86db5b1c107c88804305961917"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>96e130a7-3355-46a3-a045-f81383e2f7e3</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>60181bf61b8294104ca7edf9bc4bcb9d</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:56:04</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=60181bf61b8294104ca7edf9bc4bcb9d"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>60181bf61b8294104ca7edf9bc4bcb9d</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>20181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>46</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:56:04</sys_updated_on>
        <value>  /*
  
  This script repeatedly queries Armis' "GET Devices" endpoint and records its entire database of devices to the Armis Device Table.
  
  It starts from record N, where N is  "getd_[mode]_current_n" on the cache table.
  
  Up to 5000 records can be queried at a time, so it loops as long as it is allowed (specified by max_runtime_seconds). 
  Lots of error 500s when 5000 are queried, dropping to 1000.
  
  The query returns with a "next" value and a "total" value that are recorded to the cache table. "next" is null if the end of the list has been reached.
  
  The script has two modes: "master" and "refresh".
  - "master" mode never resets. Its goal is to always keep the table updated with brand new devices, so it's always querying for the latest devices it can find. It should query for new devices every 5 minutes.
  - "refresh" mode's goal is to go through the entire Armis database and refresh the properties of all active devices. This should be reset on a cadence (once a day/week/etc.)
  
  */
// *********************************
// *** ACTION-SPECIFIC FUNCTIONS ***
// *********************************

function calculateTimeLeft(start_time,max_runtime_seconds)
{
 var elapsed_ms = now() - start_time
 return max_runtime_seconds - elapsed_ms/1000
}

function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}


// **********************
// *** IMPLEMENTATION ***
// **********************


(function execute(inputs, outputs) {

  //Escape early
  if(inputs.mode == 'test') { return }
  if(inputs.max_runtime_seconds &lt;= 0) { outputs.time_left_s = inputs.max_runtime_seconds; return }
  
  //Init
  var execution_id = generateID()
  var debug = []
  var start_time = now()
  var api_total = 0
  var heavy_total = 0
  var lap = now()
  var num_api_calls = 0
  var num_armis_devices = 0
  var num_records_updated = 0
  var num_records_inserted = 0
  var num_records_skipped = 0
  var total_mode_records = 0
  var error_report = '';
  var report = '';
  var original_getd_n = -1
  outputs.time_left_s = 0 // just in case.
  var num_records_queried = 500
  var num_refresh_threshold = 20 //The number of devices to go back compared to the "next" value, in order to ensure that we get some degree of overlap and catch missed devices
  
  //Set up query
  var armis_query = getConfigValue('armis_' + inputs.mode + '_query')  
  var cache_key = "getd_" + inputs.mode + "_current_n"
  
  debug.push("QUERY= '" + armis_query + "'." + lapReport(lap));lap=now()
  
  //Ending counters/report
  
  try {
    
    //LOOP - until we are out of time.
    // [current time] - [start_time] is in milliseconds, divide to get seconds elapsed.
    var end_loop_early = false // Is flagged manually if the query fails outright
    var max_runtime_seconds = parseInt(inputs.max_runtime_seconds)
    if(isNaN(max_runtime_seconds)) { max_runtime_seconds = 240 }
    while(end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_runtime_seconds*1000)
    {
      debug.push("LOOP " + num_api_calls + " BEGIN "+ lapReport(lap));lap=now()

      //GET CURRENT ITERATION'S START PAGE (getd_n). This is in the cache table. If it doesn't exist, start at n=0
      var getd_n = parseInt(getCacheValue(cache_key,'int'))
      if (isNaN(getd_n)) { getd_n = 0 }
      debug.push("getd_n: " + getd_n + " " + lapReport(lap));lap=now()
      if(original_getd_n == -1) { original_getd_n = getd_n} // used for reporting.

      //We want 100 devices, starting at device N
      //Using Armis API endpoint GET /api/v1/search/
      var request = new sn_ws.RESTMessageV2('Armis API','GET Search')
      request.setRequestHeader('Authorization',getCurrentToken())
      request.setQueryParameter('aql',armis_query)
      request.setQueryParameter('from',getd_n)
      request.setQueryParameter('length',num_records_queried)
      request.setQueryParameter('orderBy','id')
      debug.push("Query setup: aql='" + armis_query + "',from=" + getd_n + ",length=" + num_records_queried + ",orderBy=id" +lapReport(lap));lap=now()

      //Execute query, but sandwich .execute() with a time check to document how long it took.
      var glide_start_time = new GlideDateTime()
      var t = now()
      var response = request.execute()
      api_total += now() - t
      
      debug.push("Queried " + num_records_queried + " devices, response: " + response.getStatusCode() + " " + lapReport(lap));lap=now()
      if (response.getStatusCode() != 200) { debug.push(response.getBody()) }

      //Log the query results
      writeToAPILog({id: execution_id, endpoint: 'get_search', payload: armis_query, response_code: response.getStatusCode(), 
                     response_body: response.getBody(), start_time: glide_start_time, time_delta_ms: (now() - t)})
      debug.push("Logged results to Armis API Log. "  + lapReport(lap));lap=now()
      num_api_calls += 1

      //Extract data!
      if(response.getStatusCode() == 200)
      {
        //Parse!
        var data = JSON.parse(response.getBody()).data
        total_mode_records = data.total
        debug.push("Parsed data. count=" + data.count + ", next=" + data.next + ", total=" + data.total + " "  + lapReport(lap));lap=now()

        num_armis_devices += data.count

        //Note that if we're at the end of the list of devices, next will be null.
        //What happens next depends on the mode:
        // - if mode==master, we want to just keep the current "next" at the total so that when we check again, we're checking for NEW devices.
        // - if mode==refresh, we want to loop back around to 0 and start again when we've finished the refresh stack.
        if (data.next == null) {
          switch (inputs.mode) {
            case 'master':
              setCacheValue(cache_key, data.total, 'int')
              break;
            case 'refresh':
              setCacheValue(cache_key, 0, 'int');
              report += '[MAXED,RESET TO 0] '
              break;
          }
        }
        else { 
          //Update the cache so the next run starts where we left off.
          //Note that we want to go a few steps backward (num_refresh_threshold) so that we can try to catch any new devices that may have been added since we last checked.
          //This won't be perfect but should go a long way toward improving consistency.
          setCacheValue(cache_key, data.next - num_refresh_threshold, 'int')
          num_armis_devices -= num_refresh_threshold //we want to be able to accurately track that we're backing up each step by X records.
        }

        //Set the total too, just for reference.
        setCacheValue("getd_" + inputs.mode + "_total", data.total, 'int')

        //Next, loop through all 100-ish returns. First, we expect this will be heavy processing, so let's mark it out separately.
        var t = now()

        if (data.count &gt; 0) {
          for (var i=0;i&lt;data.count;i++)
          {
            //Alllllll the fields in the query need to be pushed to the Armis Device Table.
            var entry = data.results[i]

            //I've abstracted this functionality into the function library since I'll be using it in more than one action, see FUNCTION_LIBRARY documentation
            var results = updateArmisDevice(entry,inputs.tags_to_table)
            //debug.push(results.action + ":" + entry.id + " (" + entry.name + "). " + lapReport(lap));lap=now()
            switch (results.action) {
              case 'insert': num_records_inserted += 1; break
              case 'update': num_records_updated += 1; break
              case 'no_update_needed': num_records_skipped += 1; break
            }
          }
        }
        else
        {
          //We have 0 records.
          //If this is our first query in MASTER mode, that means we're maxed out. We don't even want to log anything, just drop the script.

          if (num_api_calls == 1 &amp;&amp; inputs.mode == 'master') {
            outputs.debug = "0 records, killed script."
            outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
            return
          }
          //If we're in master mode, we have processed some records so we still want to report, but we're done looping.
          //(We do want to set a flag in the cache that the master is maxed out, so triggers can start processing.)
          if (inputs.mode == 'master')
          {
            setCacheValue('master_complete', 1, 'int')
            end_loop_early = true
          }
          //Any other case (i.e. refresh mode), we have just reset the counter to 0 and we want to keep looping.
        }

        //Document our heavy processing time
        heavy_total += now() - t
      }
      else
      {
        //API call was not successful. Try again.
        debug.push("API failed: (" + response.getStatusCode() + ") " + response.getBody() + " ")
      }
    }
  }
  catch(ex)
  {
    error_report = '[ERROR: ' + ex + '] '
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  //Percentage reporting, to get a good idea of how far we've come along.
  var start_pct = ( 100 * (original_getd_n) / total_mode_records ).toFixed(1)
  var done_pct = ( 100 * (parseInt(num_armis_devices + num_refresh_threshold) + parseInt(original_getd_n)) / total_mode_records ).toFixed(1)
  var percentage_insert = " (" + start_pct + "%-&gt;" + done_pct + "%)"
    
  //Build and store the action's results to the action log.
  report += "[" + inputs.mode.toUpperCase() + "]" + percentage_insert + " From n=" + original_getd_n + "/" + total_mode_records + ", made " + num_api_calls + " API calls, total " + num_armis_devices + " devices (inserted:" + num_records_inserted + ", updated:" + num_records_updated + ", skipped:" + num_records_skipped + "). Time left:" + Math.round(calculateTimeLeft(start_time,max_runtime_seconds)) + "s."
  debug = debug.join('\n')
  
  writeToActionLog(
    {id: execution_id, action_type: 'GETD_GetBulkArmisData', total_time: (now() - start_time), api_time: api_total, 
     heavy_processing_time: heavy_total, report: report, debug_string: debug})
  
  outputs.debug = debug
  outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>60181bf61b8294104ca7edf9bc4bcb9d</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>6c181bf61b8294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>60181bf61b8294104ca7edf9bc4bcb9d</document_key>
        <order>0</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>ec181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:29:33</sys_updated_on>
        <value/>
        <variable display_value="">ac181bf61b8294104ca7edf9bc4bcb9f</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=60181bf61b8294104ca7edf9bc4bcb9d"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>28181bf61b8294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_runtime_seconds</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>6c181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:29:33</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.max_runtime}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>mode</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>a8181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.mode}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>query</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 01:30:15</sys_created_on>
        <sys_id>bb9784031bc694104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 01:35:26</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.query}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>e8181bf61b8294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>tags_to_table</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-22 23:56:21</sys_created_on>
        <sys_id>7b45ce6f1b02d0104be764e8bc4bcbed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 23:56:21</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.tags_to_table}}</value>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=60181bf61b8294104ca7edf9bc4bcb9d^sys_idNOT IN24181bf61b8294104ca7edf9bc4bcbbf,ac181bf61b8294104ca7edf9bc4bcb9f,af45ce6f1b02d0104be764e8bc4bcb7b"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>mode</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>mode</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>24181bf61b8294104ca7edf9bc4bcbbf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_runtime_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>max_runtime_seconds</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ac181bf61b8294104ca7edf9bc4bcb9f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>tags_to_table</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>tags_to_table</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>200</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-22 23:56:20</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>af45ce6f1b02d0104be764e8bc4bcb7b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 23:56:20</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=60181bf61b8294104ca7edf9bc4bcb9d^sys_idNOT IN7988913b1b4ad8104ca7edf9bc4bcb4c,e0181bf61b8294104ca7edf9bc4bcbd2"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=b85eb28c-f4f2-4a1e-8bb8-87dea0101b6a</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>time_left_s</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>time_left_s</label>
        <mandatory>true</mandatory>
        <max_length>40</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:19:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7988913b1b4ad8104ca7edf9bc4bcb4c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:19:11</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>child_label=debug_child0,child_name=debug_child0,child_type=string,child_type_label=String,child_uiUniqueId=b2306af6-4515-4dc2-9b73-2f56b5d5b48a,element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=960763e0-b1e3-474c-82b7-ed7de9c24726</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e0181bf61b8294104ca7edf9bc4bcbd2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>56d8be11-3840-4d95-b226-5839bf84f876</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>66c32d86db5b1c107c88804305961910</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=66c32d86db5b1c107c88804305961910"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>66c32d86db5b1c107c88804305961910</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>aec32d86db5b1c107c88804305961915</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>66c32d86db5b1c107c88804305961910</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>eac32d86db5b1c107c88804305961915</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>ae1d8c67-0c60-41a4-b516-ad46c8a934f3</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e2c32d86db5b1c107c88804305961909</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=e2c32d86db5b1c107c88804305961909"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961909</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>22c32d86db5b1c107c8880430596190f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961909</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>6ec32d86db5b1c107c8880430596190e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>ad349612-639a-4dda-aa8e-7c474575fc11</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e2c32d86db5b1c107c88804305961917</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=e2c32d86db5b1c107c88804305961917"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961917</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>2ec32d86db5b1c107c8880430596191c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    if(j.sensor != null) { device.sensor_name = j.sensor.name }
    if(j.sensor != null) { device.sensor_type = j.sensor.type }
    if(j.site != null) { device.site = j.site.name }
    if(j.site != null) { device.site_location = j.site.location }
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}


(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961917</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>6ac32d86db5b1c107c8880430596191c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_action_input action="delete_multiple" query="model=d4181bf61b8294104ca7edf9bc4bcb8f^sys_idNOT IN0745ce6f1b02d0104be764e8bc4bcb29,18181bf61b8294104ca7edf9bc4bcb90,eab93bfe1b4694104ca7edf9bc4bcb63"/>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=boolean,uiTypeLabel=True/False,uiUniqueId=6bbf9627-cd6d-4499-9545-7eee9febe293</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>tags_to_table</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="">boolean</internal_type>
        <label>tags_to_table</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</model>
        <model_id>d4181bf61b8294104ca7edf9bc4bcb8f</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <next_element/>
        <order>3</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-22 23:56:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>0745ce6f1b02d0104be764e8bc4bcb29</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 23:56:18</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=choice,uiTypeLabel=Choice,uiUniqueId=d04d4a47-1548-4a43-bf7f-5ee652acf20f</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice>3</choice>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>master</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>mode</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Choice">choice</internal_type>
        <label>mode</label>
        <mandatory>false</mandatory>
        <max_length>32</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</model>
        <model_id>d4181bf61b8294104ca7edf9bc4bcb8f</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:29</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>18181bf61b8294104ca7edf9bc4bcb90</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=c0ab8d17-e3ea-4ba2-ae2f-1a989f9aa85a</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>30</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_runtime</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>max_runtime</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</model>
        <model_id>d4181bf61b8294104ca7edf9bc4bcb8f</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 00:29:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>eab93bfe1b4694104ca7edf9bc4bcb63</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:29:32</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_output action="delete_multiple" query="model=d4181bf61b8294104ca7edf9bc4bcb8f^sys_idNOT INfd88913b1b4ad8104ca7edf9bc4bcb57"/>
    <sys_hub_action_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=fa7ee6fc-64a5-4211-81f1-c572e469a138</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>time_left_s</element>
        <element_prototype/>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_link/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>time_left_s</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</model>
        <model_id>d4181bf61b8294104ca7edf9bc4bcb8f</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_output_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:19:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fd88913b1b4ad8104ca7edf9bc4bcb57</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:19:11</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_output>
    <sys_hub_step_instance action="delete_multiple" query="action=d4181bf61b8294104ca7edf9bc4bcb8f^sys_idNOT IN60181bf61b8294104ca7edf9bc4bcb9d,66c32d86db5b1c107c88804305961910,e2c32d86db5b1c107c88804305961909,e2c32d86db5b1c107c88804305961917"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>96e130a7-3355-46a3-a045-f81383e2f7e3</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>60181bf61b8294104ca7edf9bc4bcb9d</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:56:04</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=60181bf61b8294104ca7edf9bc4bcb9d"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>60181bf61b8294104ca7edf9bc4bcb9d</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>20181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>46</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:56:04</sys_updated_on>
        <value>  /*
  
  This script repeatedly queries Armis' "GET Devices" endpoint and records its entire database of devices to the Armis Device Table.
  
  It starts from record N, where N is  "getd_[mode]_current_n" on the cache table.
  
  Up to 5000 records can be queried at a time, so it loops as long as it is allowed (specified by max_runtime_seconds). 
  Lots of error 500s when 5000 are queried, dropping to 1000.
  
  The query returns with a "next" value and a "total" value that are recorded to the cache table. "next" is null if the end of the list has been reached.
  
  The script has two modes: "master" and "refresh".
  - "master" mode never resets. Its goal is to always keep the table updated with brand new devices, so it's always querying for the latest devices it can find. It should query for new devices every 5 minutes.
  - "refresh" mode's goal is to go through the entire Armis database and refresh the properties of all active devices. This should be reset on a cadence (once a day/week/etc.)
  
  */
// *********************************
// *** ACTION-SPECIFIC FUNCTIONS ***
// *********************************

function calculateTimeLeft(start_time,max_runtime_seconds)
{
 var elapsed_ms = now() - start_time
 return max_runtime_seconds - elapsed_ms/1000
}

function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}


// **********************
// *** IMPLEMENTATION ***
// **********************


(function execute(inputs, outputs) {

  //Escape early
  if(inputs.mode == 'test') { return }
  if(inputs.max_runtime_seconds &lt;= 0) { outputs.time_left_s = inputs.max_runtime_seconds; return }
  
  //Init
  var execution_id = generateID()
  var debug = []
  var start_time = now()
  var api_total = 0
  var heavy_total = 0
  var lap = now()
  var num_api_calls = 0
  var num_armis_devices = 0
  var num_records_updated = 0
  var num_records_inserted = 0
  var num_records_skipped = 0
  var total_mode_records = 0
  var error_report = '';
  var report = '';
  var original_getd_n = -1
  outputs.time_left_s = 0 // just in case.
  var num_records_queried = 500
  var num_refresh_threshold = 20 //The number of devices to go back compared to the "next" value, in order to ensure that we get some degree of overlap and catch missed devices
  
  //Set up query
  var armis_query = getConfigValue('armis_' + inputs.mode + '_query')  
  var cache_key = "getd_" + inputs.mode + "_current_n"
  
  debug.push("QUERY= '" + armis_query + "'." + lapReport(lap));lap=now()
  
  //Ending counters/report
  
  try {
    
    //LOOP - until we are out of time.
    // [current time] - [start_time] is in milliseconds, divide to get seconds elapsed.
    var end_loop_early = false // Is flagged manually if the query fails outright
    var max_runtime_seconds = parseInt(inputs.max_runtime_seconds)
    if(isNaN(max_runtime_seconds)) { max_runtime_seconds = 240 }
    while(end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_runtime_seconds*1000)
    {
      debug.push("LOOP " + num_api_calls + " BEGIN "+ lapReport(lap));lap=now()

      //GET CURRENT ITERATION'S START PAGE (getd_n). This is in the cache table. If it doesn't exist, start at n=0
      var getd_n = parseInt(getCacheValue(cache_key,'int'))
      if (isNaN(getd_n)) { getd_n = 0 }
      debug.push("getd_n: " + getd_n + " " + lapReport(lap));lap=now()
      if(original_getd_n == -1) { original_getd_n = getd_n} // used for reporting.

      //We want 100 devices, starting at device N
      //Using Armis API endpoint GET /api/v1/search/
      var request = new sn_ws.RESTMessageV2('Armis API','GET Search')
      request.setRequestHeader('Authorization',getCurrentToken())
      request.setQueryParameter('aql',armis_query)
      request.setQueryParameter('from',getd_n)
      request.setQueryParameter('length',num_records_queried)
      request.setQueryParameter('orderBy','id')
      debug.push("Query setup: aql='" + armis_query + "',from=" + getd_n + ",length=" + num_records_queried + ",orderBy=id" +lapReport(lap));lap=now()

      //Execute query, but sandwich .execute() with a time check to document how long it took.
      var glide_start_time = new GlideDateTime()
      var t = now()
      var response = request.execute()
      api_total += now() - t
      
      debug.push("Queried " + num_records_queried + " devices, response: " + response.getStatusCode() + " " + lapReport(lap));lap=now()
      if (response.getStatusCode() != 200) { debug.push(response.getBody()) }

      //Log the query results
      writeToAPILog({id: execution_id, endpoint: 'get_search', payload: armis_query, response_code: response.getStatusCode(), 
                     response_body: response.getBody(), start_time: glide_start_time, time_delta_ms: (now() - t)})
      debug.push("Logged results to Armis API Log. "  + lapReport(lap));lap=now()
      num_api_calls += 1

      //Extract data!
      if(response.getStatusCode() == 200)
      {
        //Parse!
        var data = JSON.parse(response.getBody()).data
        total_mode_records = data.total
        debug.push("Parsed data. count=" + data.count + ", next=" + data.next + ", total=" + data.total + " "  + lapReport(lap));lap=now()

        num_armis_devices += data.count

        //Note that if we're at the end of the list of devices, next will be null.
        //What happens next depends on the mode:
        // - if mode==master, we want to just keep the current "next" at the total so that when we check again, we're checking for NEW devices.
        // - if mode==refresh, we want to loop back around to 0 and start again when we've finished the refresh stack.
        if (data.next == null) {
          switch (inputs.mode) {
            case 'master':
              setCacheValue(cache_key, data.total, 'int')
              break;
            case 'refresh':
              setCacheValue(cache_key, 0, 'int');
              report += '[MAXED,RESET TO 0] '
              break;
          }
        }
        else { 
          //Update the cache so the next run starts where we left off.
          //Note that we want to go a few steps backward (num_refresh_threshold) so that we can try to catch any new devices that may have been added since we last checked.
          //This won't be perfect but should go a long way toward improving consistency.
          setCacheValue(cache_key, data.next - num_refresh_threshold, 'int')
          num_armis_devices -= num_refresh_threshold //we want to be able to accurately track that we're backing up each step by X records.
        }

        //Set the total too, just for reference.
        setCacheValue("getd_" + inputs.mode + "_total", data.total, 'int')

        //Next, loop through all 100-ish returns. First, we expect this will be heavy processing, so let's mark it out separately.
        var t = now()

        if (data.count &gt; 0) {
          for (var i=0;i&lt;data.count;i++)
          {
            //Alllllll the fields in the query need to be pushed to the Armis Device Table.
            var entry = data.results[i]

            //I've abstracted this functionality into the function library since I'll be using it in more than one action, see FUNCTION_LIBRARY documentation
            var results = updateArmisDevice(entry,inputs.tags_to_table)
            //debug.push(results.action + ":" + entry.id + " (" + entry.name + "). " + lapReport(lap));lap=now()
            switch (results.action) {
              case 'insert': num_records_inserted += 1; break
              case 'update': num_records_updated += 1; break
              case 'no_update_needed': num_records_skipped += 1; break
            }
          }
        }
        else
        {
          //We have 0 records.
          //If this is our first query in MASTER mode, that means we're maxed out. We don't even want to log anything, just drop the script.

          if (num_api_calls == 1 &amp;&amp; inputs.mode == 'master') {
            outputs.debug = "0 records, killed script."
            outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
            return
          }
          //If we're in master mode, we have processed some records so we still want to report, but we're done looping.
          //(We do want to set a flag in the cache that the master is maxed out, so triggers can start processing.)
          if (inputs.mode == 'master')
          {
            setCacheValue('master_complete', 1, 'int')
            end_loop_early = true
          }
          //Any other case (i.e. refresh mode), we have just reset the counter to 0 and we want to keep looping.
        }

        //Document our heavy processing time
        heavy_total += now() - t
      }
      else
      {
        //API call was not successful. Try again.
        debug.push("API failed: (" + response.getStatusCode() + ") " + response.getBody() + " ")
      }
    }
  }
  catch(ex)
  {
    error_report = '[ERROR: ' + ex + '] '
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  //Percentage reporting, to get a good idea of how far we've come along.
  var start_pct = ( 100 * (original_getd_n) / total_mode_records ).toFixed(1)
  var done_pct = ( 100 * (parseInt(num_armis_devices + num_refresh_threshold) + parseInt(original_getd_n)) / total_mode_records ).toFixed(1)
  var percentage_insert = " (" + start_pct + "%-&gt;" + done_pct + "%)"
    
  //Build and store the action's results to the action log.
  report += "[" + inputs.mode.toUpperCase() + "]" + percentage_insert + " From n=" + original_getd_n + "/" + total_mode_records + ", made " + num_api_calls + " API calls, total " + num_armis_devices + " devices (inserted:" + num_records_inserted + ", updated:" + num_records_updated + ", skipped:" + num_records_skipped + "). Time left:" + Math.round(calculateTimeLeft(start_time,max_runtime_seconds)) + "s."
  debug = debug.join('\n')
  
  writeToActionLog(
    {id: execution_id, action_type: 'GETD_GetBulkArmisData', total_time: (now() - start_time), api_time: api_total, 
     heavy_processing_time: heavy_total, report: report, debug_string: debug})
  
  outputs.debug = debug
  outputs.time_left_s = calculateTimeLeft(start_time,max_runtime_seconds)
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>60181bf61b8294104ca7edf9bc4bcb9d</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>6c181bf61b8294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>60181bf61b8294104ca7edf9bc4bcb9d</document_key>
        <order>0</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>ec181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:29:33</sys_updated_on>
        <value/>
        <variable display_value="">ac181bf61b8294104ca7edf9bc4bcb9f</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=60181bf61b8294104ca7edf9bc4bcb9d"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>28181bf61b8294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_runtime_seconds</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>6c181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:29:33</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.max_runtime}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>mode</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>a8181bf61b8294104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.mode}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>query</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 01:30:15</sys_created_on>
        <sys_id>bb9784031bc694104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 01:35:26</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.query}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_id>e8181bf61b8294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>tags_to_table</field>
        <id>60181bf61b8294104ca7edf9bc4bcb9d</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-22 23:56:21</sys_created_on>
        <sys_id>7b45ce6f1b02d0104be764e8bc4bcbed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 23:56:21</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</table>
        <value>{{action.tags_to_table}}</value>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=60181bf61b8294104ca7edf9bc4bcb9d^sys_idNOT IN24181bf61b8294104ca7edf9bc4bcbbf,ac181bf61b8294104ca7edf9bc4bcb9f,af45ce6f1b02d0104be764e8bc4bcb7b"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>mode</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>mode</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>24181bf61b8294104ca7edf9bc4bcbbf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_runtime_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>max_runtime_seconds</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ac181bf61b8294104ca7edf9bc4bcb9f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>tags_to_table</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>tags_to_table</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>200</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-22 23:56:20</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>af45ce6f1b02d0104be764e8bc4bcb7b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 23:56:20</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=60181bf61b8294104ca7edf9bc4bcb9d^sys_idNOT IN7988913b1b4ad8104ca7edf9bc4bcb4c,e0181bf61b8294104ca7edf9bc4bcbd2"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=b85eb28c-f4f2-4a1e-8bb8-87dea0101b6a</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>time_left_s</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>time_left_s</label>
        <mandatory>true</mandatory>
        <max_length>40</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:19:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7988913b1b4ad8104ca7edf9bc4bcb4c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:19:11</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>child_label=debug_child0,child_name=debug_child0,child_type=string,child_type_label=String,child_uiUniqueId=b2306af6-4515-4dc2-9b73-2f56b5d5b48a,element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=960763e0-b1e3-474c-82b7-ed7de9c24726</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">60181bf61b8294104ca7edf9bc4bcb9d</model>
        <model_id>60181bf61b8294104ca7edf9bc4bcb9d</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_60181bf61b8294104ca7edf9bc4bcb9d</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e0181bf61b8294104ca7edf9bc4bcbd2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>56d8be11-3840-4d95-b226-5839bf84f876</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>66c32d86db5b1c107c88804305961910</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=66c32d86db5b1c107c88804305961910"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>66c32d86db5b1c107c88804305961910</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>aec32d86db5b1c107c88804305961915</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>66c32d86db5b1c107c88804305961910</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>eac32d86db5b1c107c88804305961915</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>ae1d8c67-0c60-41a4-b516-ad46c8a934f3</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e2c32d86db5b1c107c88804305961909</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=e2c32d86db5b1c107c88804305961909"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961909</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>22c32d86db5b1c107c8880430596190f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961909</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>6ec32d86db5b1c107c8880430596190e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="GETD_GetBulkArmisData (v2.2)">d4181bf61b8294104ca7edf9bc4bcb8f</action>
        <cid>ad349612-639a-4dda-aa8e-7c474575fc11</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIB</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e2c32d86db5b1c107c88804305961917</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=e2c32d86db5b1c107c88804305961917"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961917</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>2ec32d86db5b1c107c8880430596191c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    if(j.sensor != null) { device.sensor_name = j.sensor.name }
    if(j.sensor != null) { device.sensor_type = j.sensor.type }
    if(j.site != null) { device.site = j.site.name }
    if(j.site != null) { device.site_location = j.site.location }
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}


(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e2c32d86db5b1c107c88804305961917</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 08:57:30</sys_created_on>
        <sys_id>6ac32d86db5b1c107c8880430596191c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 08:57:30</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f^sys_idNOT IN18181bf61b8294104ca7edf9bc4bcb9a,aeb93bfe1b4694104ca7edf9bc4bcb6a,d345ce6f1b02d0104be764e8bc4bcb2e"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>mode</element>
        <help/>
        <hint/>
        <label>mode</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 22:02:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>18181bf61b8294104ca7edf9bc4bcb9a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 22:02:30</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>max_runtime</element>
        <help/>
        <hint/>
        <label>max_runtime</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-21 00:29:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>aeb93bfe1b4694104ca7edf9bc4bcb6a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-21 00:29:32</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>tags_to_table</element>
        <help/>
        <hint/>
        <label>tags_to_table</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-22 23:56:19</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>d345ce6f1b02d0104be764e8bc4bcb2e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 23:56:19</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_choice action="delete_multiple" query="name=var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f^sys_idNOT IN98181bf61b8294104ca7edf9bc4bcb94,18181bf61b8294104ca7edf9bc4bcb95,6cb54a231b42d0104be764e8bc4bcb2d"/>
    <sys_choice field="mode" table="var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f">
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>mode</element>
            <hint/>
            <inactive>false</inactive>
            <label>master</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
            <sequence>0</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-20 22:02:29</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>98181bf61b8294104ca7edf9bc4bcb94</sys_id>
            <sys_mod_count>0</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-20 22:02:29</sys_updated_on>
            <value>master</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>mode</element>
            <hint/>
            <inactive>false</inactive>
            <label>refresh</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
            <sequence>1</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-20 22:02:29</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>18181bf61b8294104ca7edf9bc4bcb95</sys_id>
            <sys_mod_count>0</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-20 22:02:29</sys_updated_on>
            <value>refresh</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>mode</element>
            <hint/>
            <inactive>false</inactive>
            <label>test</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_d4181bf61b8294104ca7edf9bc4bcb8f</name>
            <sequence>2</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-22 23:58:02</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>6cb54a231b42d0104be764e8bc4bcb2d</sys_id>
            <sys_mod_count>0</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-22 23:58:02</sys_updated_on>
            <value>test</value>
        </sys_choice>
    </sys_choice>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_output_d4181bf61b8294104ca7edf9bc4bcb8f^sys_idNOT IN3d88913b1b4ad8104ca7edf9bc4bcb5c"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>time_left_s</element>
        <help/>
        <hint/>
        <label>time_left_s</label>
        <language>en</language>
        <name>var__m_sys_hub_action_output_d4181bf61b8294104ca7edf9bc4bcb8f</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 15:19:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3d88913b1b4ad8104ca7edf9bc4bcb5c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 15:19:11</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
</record_update>
