<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_hub_action_type_definition">
    <sys_hub_action_type_definition action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <active>true</active>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <ih_action>false</ih_action>
        <internal_name>main_processallattributeuploads_v21</internal_name>
        <label_cache>[{"name":"{{action.max_seconds}}","label":"action➛max_seconds","type":"action","ref":""},{"name":"{{action.record_age_hours}}","label":"action➛record_age_hours","type":"action","ref":""},{"name":"{{step[7fbff9ef-a229-40fe-9adc-c00495a0f3e9].variable}}","label":"step➛Script step➛variable","type":"step","ref":""},{"name":"{{step[7fbff9ef-a229-40fe-9adc-c00495a0f3e9].debug}}","label":"step➛Script step➛debug","type":"step","ref":""}]</label_cache>
        <latest_snapshot>0cf9d68e1b5fd0504ca7edf9bc4bcb51</latest_snapshot>
        <master_snapshot>958d41921b5a90104ca7edf9bc4bcb0f</master_snapshot>
        <name>MAIN_QueueAllDevicePropertiesEtc (v2.2)</name>
        <natlang/>
        <outputs/>
        <state>published</state>
        <sys_class_name>sys_hub_action_type_definition</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:47:43</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>e5ab49da1b1a90104ca7edf9bc4bcbd1</sys_id>
        <sys_mod_count>106</sys_mod_count>
        <sys_name>MAIN_QueueAllDevicePropertiesEtc (v2.2)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name>sys_hub_action_type_definition_e5ab49da1b1a90104ca7edf9bc4bcbd1</sys_update_name>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:07</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_definition>
    <sys_variable_value action="delete_multiple" query="document_key=e5ab49da1b1a90104ca7edf9bc4bcbd1"/>
    <sys_hub_step_instance action="delete_multiple" query="action=e5ab49da1b1a90104ca7edf9bc4bcbd1^sys_idNOT IN598dc9521b5a90104ca7edf9bc4bcb15,5ff8f9271b4b50104ca7edf9bc4bcbdf,6fd5dfb71b8fd4104ca7edf9bc4bcb25"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</action>
        <cid>7fbff9ef-a229-40fe-9adc-c00495a0f3e9</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:53</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>598dc9521b5a90104ca7edf9bc4bcb15</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=598dc9521b5a90104ca7edf9bc4bcb15"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>598dc9521b5a90104ca7edf9bc4bcb15</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>118d01921b5a90104ca7edf9bc4bcbf1</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
        <value>/*

This script iterates through all devices that have a link and haven't pushed all properties up to Armis yet, and pushes those properties up to Armis.

*/


(function execute(inputs, outputs) {

  var debug = ['BEGIN QueueAllDevicePropertiesEtc']
  var start_time = now()
  var lap = now()
  var api_total = 0
  var heavy_total = 0
  var execution_id = generateID()
  var total_properties = 0
  var total_applications = 0
  var devices_count = 0
  var error_message = ''
  var this_now = now()
  
  
  try
  {
    
    //Get the list of all fields we will need to pull, and what to do for each
    var p = new GlideRecord('x_fmcna_armis_inte_armis_snow_attribute_map')
    p.query()
    
    var field_dictionary = []
    while(p.next())
    {
      var entry =  {}
      entry.field_name = p.getValue('snow_field')
      entry.upload_type = p.getValue('upload_type')
      entry.armis_attribute_description = p.getValue('armis_attribute_description')
      entry.armis_property_key = p.getValue('armis_property_key')
      entry.format_as_utc = p.getValue('format_as_utc')
      entry.is_mapped_upload = p.getValue('is_mapped_upload')
      field_dictionary.push(entry)
    }
    
    debug.push("Loaded property dictionary (" + field_dictionary.length + " entries)."+ lapReport(lap));lap=now()
    

    //Clear the COMPLETE entries off the Properties and Applications tables. (This is truly necessary, these tables get HUGE very quickly.)
    var tables_to_clear = [
      ['x_fmcna_armis_inte_armis_op_property_upload','properties'],
      ['x_fmcna_armis_inte_armis_op_application_upload','applications'],
      ['x_fmcna_armis_inte_armis_op_key_attribute','key attributes'],
      ['x_fmcna_armis_inte_armis_op_arp_table','arp entries']]

    for(var i=0;i&lt;tables_to_clear.length;i++)
    {
      var table_name = tables_to_clear[i][0]
      var table_display = tables_to_clear[i][1]
      var clear = new GlideRecord(table_name)
      clear.addQuery('status','COMPLETE') 
      clear.query()
      debug.push("Queried " + clear.getRowCount() + " completed " + table_display + ". " + lapReport(lap));lap=now()
      clear.deleteMultiple()
      debug.push("Cleared completed " + table_display + ". " + lapReport(lap));lap=now()
    } 

    //Get all devices that haven't been pushed

    var q = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    q.addQuery('has_pushed_all_properties_to_armis',false)
    q.addNotNullQuery('linked_snow_computer')
    q.query()
    debug.push('Found ' + q.getRowCount() + ' records that need to be pushed. ' + lapReport(lap));lap=now()

    //LOOP!
    var max_seconds = parseInt(inputs.max_seconds)
    if(isNaN(max_seconds)) { max_seconds = 240 }
    var end_loop_early = false
    while(q.next() &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      var snow_id = q.linked_snow_computer
      var snow_device = new GlideRecord('cmdb_ci_computer')
      snow_device.addQuery('sys_id',snow_id)
      snow_device.query()
      if(!snow_device.next()) {
        var armis_device_id = q.getValue('armis_device_id')
        
        var a = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    	a.addQuery('armis_device_id',armis_device_id)
        a.query()
        while(a.next()) {
        	//debug.push("Bad record--computer does not exist for Armis device " + armis_device_id + ". Removing link. " + lapReport(lap));lap=now()
	        a.setValue('novel_link_attempted',false)
	        a.setValue('linked_snow_computer',"")
	        a.update()
        }
        continue
      }

      devices_count++
      debug.push("Processing Armis device " + q.name + " (" + q.sys_id + "), linked to SNOW device " + snow_device.name + " " + lapReport(lap));lap=now()

      //Push ARP and key attributes
      queueInitialARPandCSV(snow_device,execution_id)
      debug.push("-Queued ARP and CSV " + lapReport(lap));lap=now()

      //Push properties
      var local_property_count = 0
      for(var i=0;i&lt;field_dictionary.length;i++)
      {
        var field_name = field_dictionary[i].field_name
        var upload_type = field_dictionary[i].upload_type
        var armis_attribute_description = field_dictionary[i].armis_attribute_description
        var armis_property_key = field_dictionary[i].armis_property_key
        var format_as_utc = field_dictionary[i].format_as_utc == "1"
        var is_mapped_upload = field_dictionary[i].is_mapped_upload == "1"
        
        var field_value = snow_device.getDisplayValue(field_name)
        //debug.push("field_name=" + field_name + ",field_value=" + field_value)
        
        //Does this actually have a value?
        if(field_value != null &amp;&amp; armis_device_id != '')
        {

          debug.push("--(" + upload_type + ") " + field_name + ": " + field_value + " "  + lapReport(lap));lap=now()
          total_properties++
          local_property_count++


          debug.push(queueAnyAttribute({
            execution_id: execution_id,
            armis_id: q.getValue('armis_device_id'),
            mac: q.getValue('mac_address'),
            snow_field: field_name,
            value: field_value,
            upload_type: upload_type,
            is_mapped_upload: is_mapped_upload,
            format_as_utc: format_as_utc,
            armis_attribute_description: armis_attribute_description,
            armis_property_key: armis_property_key}))
        }
      }
      //if(local_property_count &gt; 1) { debug.push("--(queued " + (local_property_count-1) + " more properties.) " + lapReport(lap));lap=now() }

      //Push applications
      //First, get all software installs that are associated with our SNOW computer
      var s = new GlideRecord('cmdb_software_instance')
      s.addQuery('installed_on',snow_device.sys_id)
      s.query()
      
      debug.push("-SOFTWARE: Found " + s.getRowCount() + " installs. " + lapReport(lap));lap=now()
      var local_application_count = 0
      while(s.next())
      {
        var software = s.software
        if (software != null)
        {
          total_applications++
          if(local_application_count == 0) { debug.push("--(APP) " + ('' + software.name) + " (" + ('' + software.version) + ") " + lapReport(lap));lap=now() }
          local_application_count++
          queueApplication({execution_id: execution_id, armis_id: q.armis_device_id, name: '' + software.name, version: '' + software.version})
        }
      }
      if(local_application_count &gt; 1) { debug.push("--(queued " + (local_application_count-1) + " more applications.) "  + lapReport(lap));lap=now() }
      
      //And finally, mark this as complete.
      q.setValue('has_pushed_all_properties_to_armis',true)
      q.update()
      debug.push("-Marked complete, moving to next. "  + lapReport(lap));lap=now()
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + '] '
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  var report = error_message + devices_count + '/' + q.getRowCount() + ' devices checked, ' + total_properties + ' properties and ' + total_applications + ' applications queued for upload.'
  var time_diff = now() - start_time
  debug = debug.join('\n')
  outputs.debug = debug
  if(q.getRowCount() &gt; 0) { writeToActionLog({id: execution_id, action_type: 'MAIN_QueueAllDevicePropertiesEtc', total_time: time_diff, api_time: 0, heavy_processing_time: time_diff, report: report, debug_string: debug}) }
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>598dc9521b5a90104ca7edf9bc4bcb15</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>5d8d01921b5a90104ca7edf9bc4bcbf0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=598dc9521b5a90104ca7edf9bc4bcb15"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>598dc9521b5a90104ca7edf9bc4bcb15</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>198d01921b5a90104ca7edf9bc4bcbf0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>598dc9521b5a90104ca7edf9bc4bcb15</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 09:41:40</sys_created_on>
        <sys_id>b7f71dd21b9a90104ca7edf9bc4bcbd6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 09:41:40</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_598dc9521b5a90104ca7edf9bc4bcb15</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>598dc9521b5a90104ca7edf9bc4bcb15</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>d98d01921b5a90104ca7edf9bc4bcbf0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=598dc9521b5a90104ca7edf9bc4bcb15^sys_idNOT INfff71dd21b9a90104ca7edf9bc4bcbcb"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">598dc9521b5a90104ca7edf9bc4bcb15</model>
        <model_id>598dc9521b5a90104ca7edf9bc4bcb15</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_598dc9521b5a90104ca7edf9bc4bcb15</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 09:41:40</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fff71dd21b9a90104ca7edf9bc4bcbcb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 09:41:40</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=598dc9521b5a90104ca7edf9bc4bcb15^sys_idNOT INceb1215a1bda90104ca7edf9bc4bcbd1"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=4dafb26d-66df-4723-9954-aad8f6c57655</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">598dc9521b5a90104ca7edf9bc4bcb15</model>
        <model_id>598dc9521b5a90104ca7edf9bc4bcb15</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_598dc9521b5a90104ca7edf9bc4bcb15</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:24:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ceb1215a1bda90104ca7edf9bc4bcbd1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:24:09</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</action>
        <cid>2291952e-cbfe-4dd9-a97b-993eaaa4a83d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Function Library v0.10</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:19</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>5ff8f9271b4b50104ca7edf9bc4bcbdf</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=5ff8f9271b4b50104ca7edf9bc4bcbdf"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>5ff8f9271b4b50104ca7edf9bc4bcbdf</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:19</sys_created_on>
        <sys_id>13f83d271b4b50104ca7edf9bc4bcb0e</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>5ff8f9271b4b50104ca7edf9bc4bcbdf</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:19</sys_created_on>
        <sys_id>d7f83d271b4b50104ca7edf9bc4bcb0d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-10 16:05:19</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</action>
        <cid>c1842d49-63df-4ce1-9ff1-b4f175958b29</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Table Library v0.16</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:36</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>6fd5dfb71b8fd4104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:05</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=6fd5dfb71b8fd4104ca7edf9bc4bcb25"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>6fd5dfb71b8fd4104ca7edf9bc4bcb25</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:36</sys_created_on>
        <sys_id>23d5dfb71b8fd4104ca7edf9bc4bcb2c</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:05</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>6fd5dfb71b8fd4104ca7edf9bc4bcb25</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:36</sys_created_on>
        <sys_id>6bd5dfb71b8fd4104ca7edf9bc4bcb2b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-11 17:29:36</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_action_input action="delete_multiple" query="model=e5ab49da1b1a90104ca7edf9bc4bcbd1^sys_idNOT INb3f75d521b9a90104ca7edf9bc4bcbcc"/>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=1df5be3d-9fc2-43a3-8246-2150e28c9b63</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>max_seconds</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</model>
        <model_id>e5ab49da1b1a90104ca7edf9bc4bcbd1</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_input_e5ab49da1b1a90104ca7edf9bc4bcbd1</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 09:41:40</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b3f75d521b9a90104ca7edf9bc4bcbcc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 09:41:40</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_step_instance action="delete_multiple" query="action=e5ab49da1b1a90104ca7edf9bc4bcbd1^sys_idNOT IN598dc9521b5a90104ca7edf9bc4bcb15,5ff8f9271b4b50104ca7edf9bc4bcbdf,6fd5dfb71b8fd4104ca7edf9bc4bcb25"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</action>
        <cid>7fbff9ef-a229-40fe-9adc-c00495a0f3e9</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:53</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>598dc9521b5a90104ca7edf9bc4bcb15</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=598dc9521b5a90104ca7edf9bc4bcb15"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>598dc9521b5a90104ca7edf9bc4bcb15</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>118d01921b5a90104ca7edf9bc4bcbf1</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
        <value>/*

This script iterates through all devices that have a link and haven't pushed all properties up to Armis yet, and pushes those properties up to Armis.

*/


(function execute(inputs, outputs) {

  var debug = ['BEGIN QueueAllDevicePropertiesEtc']
  var start_time = now()
  var lap = now()
  var api_total = 0
  var heavy_total = 0
  var execution_id = generateID()
  var total_properties = 0
  var total_applications = 0
  var devices_count = 0
  var error_message = ''
  var this_now = now()
  
  
  try
  {
    
    //Get the list of all fields we will need to pull, and what to do for each
    var p = new GlideRecord('x_fmcna_armis_inte_armis_snow_attribute_map')
    p.query()
    
    var field_dictionary = []
    while(p.next())
    {
      var entry =  {}
      entry.field_name = p.getValue('snow_field')
      entry.upload_type = p.getValue('upload_type')
      entry.armis_attribute_description = p.getValue('armis_attribute_description')
      entry.armis_property_key = p.getValue('armis_property_key')
      entry.format_as_utc = p.getValue('format_as_utc')
      entry.is_mapped_upload = p.getValue('is_mapped_upload')
      field_dictionary.push(entry)
    }
    
    debug.push("Loaded property dictionary (" + field_dictionary.length + " entries)."+ lapReport(lap));lap=now()
    

    //Clear the COMPLETE entries off the Properties and Applications tables. (This is truly necessary, these tables get HUGE very quickly.)
    var tables_to_clear = [
      ['x_fmcna_armis_inte_armis_op_property_upload','properties'],
      ['x_fmcna_armis_inte_armis_op_application_upload','applications'],
      ['x_fmcna_armis_inte_armis_op_key_attribute','key attributes'],
      ['x_fmcna_armis_inte_armis_op_arp_table','arp entries']]

    for(var i=0;i&lt;tables_to_clear.length;i++)
    {
      var table_name = tables_to_clear[i][0]
      var table_display = tables_to_clear[i][1]
      var clear = new GlideRecord(table_name)
      clear.addQuery('status','COMPLETE') 
      clear.query()
      debug.push("Queried " + clear.getRowCount() + " completed " + table_display + ". " + lapReport(lap));lap=now()
      clear.deleteMultiple()
      debug.push("Cleared completed " + table_display + ". " + lapReport(lap));lap=now()
    } 

    //Get all devices that haven't been pushed

    var q = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    q.addQuery('has_pushed_all_properties_to_armis',false)
    q.addNotNullQuery('linked_snow_computer')
    q.query()
    debug.push('Found ' + q.getRowCount() + ' records that need to be pushed. ' + lapReport(lap));lap=now()

    //LOOP!
    var max_seconds = parseInt(inputs.max_seconds)
    if(isNaN(max_seconds)) { max_seconds = 240 }
    var end_loop_early = false
    while(q.next() &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      var snow_id = q.linked_snow_computer
      var snow_device = new GlideRecord('cmdb_ci_computer')
      snow_device.addQuery('sys_id',snow_id)
      snow_device.query()
      if(!snow_device.next()) {
        var armis_device_id = q.getValue('armis_device_id')
        
        var a = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    	a.addQuery('armis_device_id',armis_device_id)
        a.query()
        while(a.next()) {
        	//debug.push("Bad record--computer does not exist for Armis device " + armis_device_id + ". Removing link. " + lapReport(lap));lap=now()
	        a.setValue('novel_link_attempted',false)
	        a.setValue('linked_snow_computer',"")
	        a.update()
        }
        continue
      }

      devices_count++
      debug.push("Processing Armis device " + q.name + " (" + q.sys_id + "), linked to SNOW device " + snow_device.name + " " + lapReport(lap));lap=now()

      //Push ARP and key attributes
      queueInitialARPandCSV(snow_device,execution_id)
      debug.push("-Queued ARP and CSV " + lapReport(lap));lap=now()

      //Push properties
      var local_property_count = 0
      for(var i=0;i&lt;field_dictionary.length;i++)
      {
        var field_name = field_dictionary[i].field_name
        var upload_type = field_dictionary[i].upload_type
        var armis_attribute_description = field_dictionary[i].armis_attribute_description
        var armis_property_key = field_dictionary[i].armis_property_key
        var format_as_utc = field_dictionary[i].format_as_utc == "1"
        var is_mapped_upload = field_dictionary[i].is_mapped_upload == "1"
        
        var field_value = snow_device.getDisplayValue(field_name)
        //debug.push("field_name=" + field_name + ",field_value=" + field_value)
        
        //Does this actually have a value?
        if(field_value != null &amp;&amp; armis_device_id != '')
        {

          debug.push("--(" + upload_type + ") " + field_name + ": " + field_value + " "  + lapReport(lap));lap=now()
          total_properties++
          local_property_count++


          debug.push(queueAnyAttribute({
            execution_id: execution_id,
            armis_id: q.getValue('armis_device_id'),
            mac: q.getValue('mac_address'),
            snow_field: field_name,
            value: field_value,
            upload_type: upload_type,
            is_mapped_upload: is_mapped_upload,
            format_as_utc: format_as_utc,
            armis_attribute_description: armis_attribute_description,
            armis_property_key: armis_property_key}))
        }
      }
      //if(local_property_count &gt; 1) { debug.push("--(queued " + (local_property_count-1) + " more properties.) " + lapReport(lap));lap=now() }

      //Push applications
      //First, get all software installs that are associated with our SNOW computer
      var s = new GlideRecord('cmdb_software_instance')
      s.addQuery('installed_on',snow_device.sys_id)
      s.query()
      
      debug.push("-SOFTWARE: Found " + s.getRowCount() + " installs. " + lapReport(lap));lap=now()
      var local_application_count = 0
      while(s.next())
      {
        var software = s.software
        if (software != null)
        {
          total_applications++
          if(local_application_count == 0) { debug.push("--(APP) " + ('' + software.name) + " (" + ('' + software.version) + ") " + lapReport(lap));lap=now() }
          local_application_count++
          queueApplication({execution_id: execution_id, armis_id: q.armis_device_id, name: '' + software.name, version: '' + software.version})
        }
      }
      if(local_application_count &gt; 1) { debug.push("--(queued " + (local_application_count-1) + " more applications.) "  + lapReport(lap));lap=now() }
      
      //And finally, mark this as complete.
      q.setValue('has_pushed_all_properties_to_armis',true)
      q.update()
      debug.push("-Marked complete, moving to next. "  + lapReport(lap));lap=now()
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + '] '
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  var report = error_message + devices_count + '/' + q.getRowCount() + ' devices checked, ' + total_properties + ' properties and ' + total_applications + ' applications queued for upload.'
  var time_diff = now() - start_time
  debug = debug.join('\n')
  outputs.debug = debug
  if(q.getRowCount() &gt; 0) { writeToActionLog({id: execution_id, action_type: 'MAIN_QueueAllDevicePropertiesEtc', total_time: time_diff, api_time: 0, heavy_processing_time: time_diff, report: report, debug_string: debug}) }
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>598dc9521b5a90104ca7edf9bc4bcb15</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>5d8d01921b5a90104ca7edf9bc4bcbf0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=598dc9521b5a90104ca7edf9bc4bcb15"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>598dc9521b5a90104ca7edf9bc4bcb15</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>198d01921b5a90104ca7edf9bc4bcbf0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>598dc9521b5a90104ca7edf9bc4bcb15</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 09:41:40</sys_created_on>
        <sys_id>b7f71dd21b9a90104ca7edf9bc4bcbd6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 09:41:40</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_598dc9521b5a90104ca7edf9bc4bcb15</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>598dc9521b5a90104ca7edf9bc4bcb15</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>d98d01921b5a90104ca7edf9bc4bcbf0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=598dc9521b5a90104ca7edf9bc4bcb15^sys_idNOT INfff71dd21b9a90104ca7edf9bc4bcbcb"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">598dc9521b5a90104ca7edf9bc4bcb15</model>
        <model_id>598dc9521b5a90104ca7edf9bc4bcb15</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_598dc9521b5a90104ca7edf9bc4bcb15</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 09:41:40</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fff71dd21b9a90104ca7edf9bc4bcbcb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 09:41:40</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=598dc9521b5a90104ca7edf9bc4bcb15^sys_idNOT INceb1215a1bda90104ca7edf9bc4bcbd1"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=4dafb26d-66df-4723-9954-aad8f6c57655</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">598dc9521b5a90104ca7edf9bc4bcb15</model>
        <model_id>598dc9521b5a90104ca7edf9bc4bcb15</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_598dc9521b5a90104ca7edf9bc4bcb15</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:24:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ceb1215a1bda90104ca7edf9bc4bcbd1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:24:09</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</action>
        <cid>2291952e-cbfe-4dd9-a97b-993eaaa4a83d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Function Library v0.10</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:19</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>5ff8f9271b4b50104ca7edf9bc4bcbdf</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=5ff8f9271b4b50104ca7edf9bc4bcbdf"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>5ff8f9271b4b50104ca7edf9bc4bcbdf</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:19</sys_created_on>
        <sys_id>13f83d271b4b50104ca7edf9bc4bcb0e</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:28</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>5ff8f9271b4b50104ca7edf9bc4bcbdf</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:19</sys_created_on>
        <sys_id>d7f83d271b4b50104ca7edf9bc4bcb0d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-10 16:05:19</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</action>
        <cid>c1842d49-63df-4ce1-9ff1-b4f175958b29</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Table Library v0.16</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:36</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>6fd5dfb71b8fd4104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:05</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=6fd5dfb71b8fd4104ca7edf9bc4bcb25"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>6fd5dfb71b8fd4104ca7edf9bc4bcb25</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:36</sys_created_on>
        <sys_id>23d5dfb71b8fd4104ca7edf9bc4bcb2c</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:05</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>6fd5dfb71b8fd4104ca7edf9bc4bcb25</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:36</sys_created_on>
        <sys_id>6bd5dfb71b8fd4104ca7edf9bc4bcb2b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-11 17:29:36</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_input_e5ab49da1b1a90104ca7edf9bc4bcbd1^sys_idNOT IN3ff71dd21b9a90104ca7edf9bc4bcbc4"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>max_seconds</element>
        <help/>
        <hint/>
        <label>max_seconds</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_e5ab49da1b1a90104ca7edf9bc4bcbd1</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 09:41:40</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3ff71dd21b9a90104ca7edf9bc4bcbc4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 09:41:40</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_hub_action_plan action="delete_multiple" query="action_id=e5ab49da1b1a90104ca7edf9bc4bcbd1^sys_idNOT IN6d8d41921b5a90104ca7edf9bc4bcb38"/>
    <sys_hub_action_plan action="INSERT_OR_UPDATE">
        <action_id display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</action_id>
        <plan>{"persistor":{"@class":".ChunkingPlanPersistor","table":"sys_hub_action_plan","id":"6d8d41921b5a90104ca7edf9bc4bcb38","name":"plan"}}</plan>
        <snapshot>0cf9d68e1b5fd0504ca7edf9bc4bcb51</snapshot>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>6d8d41921b5a90104ca7edf9bc4bcb38</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_overrides/>
        <sys_scope/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:08</sys_updated_on>
    </sys_hub_action_plan>
    <sys_hub_action_type_snapshot action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <internal_name>main_processallattributeuploads_v21</internal_name>
        <label_cache>[{"name":"{{action.max_seconds}}","label":"action➛max_seconds","type":"action","ref":""},{"name":"{{action.record_age_hours}}","label":"action➛record_age_hours","type":"action","ref":""},{"name":"{{step[7fbff9ef-a229-40fe-9adc-c00495a0f3e9].variable}}","label":"step➛Script step➛variable","type":"step","ref":""},{"name":"{{step[7fbff9ef-a229-40fe-9adc-c00495a0f3e9].debug}}","label":"step➛Script step➛debug","type":"step","ref":""}]</label_cache>
        <master>true</master>
        <name>MAIN_QueueAllDevicePropertiesEtc (v2.2)</name>
        <natlang/>
        <outputs/>
        <parent_action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">e5ab49da1b1a90104ca7edf9bc4bcbd1</parent_action>
        <sys_class_name>sys_hub_action_type_snapshot</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>958d41921b5a90104ca7edf9bc4bcb0f</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name/>
        <sys_overrides/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-10 16:05:21</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_snapshot>
    <sys_variable_value action="delete_multiple" query="document_key=958d41921b5a90104ca7edf9bc4bcb0f"/>
    <sys_hub_step_instance action="delete_multiple" query="action=958d41921b5a90104ca7edf9bc4bcb0f^sys_idNOT IN4de513f71b8fd4104ca7edf9bc4bcb3b,dd8d41921b5a90104ca7edf9bc4bcb10,fff83d271b4b50104ca7edf9bc4bcbd5"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">958d41921b5a90104ca7edf9bc4bcb0f</action>
        <cid>c1842d49-63df-4ce1-9ff1-b4f175958b29</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Table Library v0.16</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>4de513f71b8fd4104ca7edf9bc4bcb3b</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:07</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=4de513f71b8fd4104ca7edf9bc4bcb3b"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>4de513f71b8fd4104ca7edf9bc4bcb3b</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:42</sys_created_on>
        <sys_id>4de513f71b8fd4104ca7edf9bc4bcb4d</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:07</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>4de513f71b8fd4104ca7edf9bc4bcb3b</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:42</sys_created_on>
        <sys_id>89e513f71b8fd4104ca7edf9bc4bcb4d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-11 17:29:42</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">958d41921b5a90104ca7edf9bc4bcb0f</action>
        <cid>7fbff9ef-a229-40fe-9adc-c00495a0f3e9</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dd8d41921b5a90104ca7edf9bc4bcb10</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=dd8d41921b5a90104ca7edf9bc4bcb10"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>dd8d41921b5a90104ca7edf9bc4bcb10</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>998d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
        <value>/*

This script iterates through all devices that have a link and haven't pushed all properties up to Armis yet, and pushes those properties up to Armis.

*/


(function execute(inputs, outputs) {

  var debug = ['BEGIN QueueAllDevicePropertiesEtc']
  var start_time = now()
  var lap = now()
  var api_total = 0
  var heavy_total = 0
  var execution_id = generateID()
  var total_properties = 0
  var total_applications = 0
  var devices_count = 0
  var error_message = ''
  var this_now = now()
  
  
  try
  {
    
    //Get the list of all fields we will need to pull, and what to do for each
    var p = new GlideRecord('x_fmcna_armis_inte_armis_snow_attribute_map')
    p.query()
    
    var field_dictionary = []
    while(p.next())
    {
      var entry =  {}
      entry.field_name = p.getValue('snow_field')
      entry.upload_type = p.getValue('upload_type')
      entry.armis_attribute_description = p.getValue('armis_attribute_description')
      entry.armis_property_key = p.getValue('armis_property_key')
      entry.format_as_utc = p.getValue('format_as_utc')
      entry.is_mapped_upload = p.getValue('is_mapped_upload')
      field_dictionary.push(entry)
    }
    
    debug.push("Loaded property dictionary (" + field_dictionary.length + " entries)."+ lapReport(lap));lap=now()
    

    //Clear the COMPLETE entries off the Properties and Applications tables. (This is truly necessary, these tables get HUGE very quickly.)
    var tables_to_clear = [
      ['x_fmcna_armis_inte_armis_op_property_upload','properties'],
      ['x_fmcna_armis_inte_armis_op_application_upload','applications'],
      ['x_fmcna_armis_inte_armis_op_key_attribute','key attributes'],
      ['x_fmcna_armis_inte_armis_op_arp_table','arp entries']]

    for(var i=0;i&lt;tables_to_clear.length;i++)
    {
      var table_name = tables_to_clear[i][0]
      var table_display = tables_to_clear[i][1]
      var clear = new GlideRecord(table_name)
      clear.addQuery('status','COMPLETE') 
      clear.query()
      debug.push("Queried " + clear.getRowCount() + " completed " + table_display + ". " + lapReport(lap));lap=now()
      clear.deleteMultiple()
      debug.push("Cleared completed " + table_display + ". " + lapReport(lap));lap=now()
    } 

    //Get all devices that haven't been pushed

    var q = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    q.addQuery('has_pushed_all_properties_to_armis',false)
    q.addNotNullQuery('linked_snow_computer')
    q.query()
    debug.push('Found ' + q.getRowCount() + ' records that need to be pushed. ' + lapReport(lap));lap=now()

    //LOOP!
    var max_seconds = parseInt(inputs.max_seconds)
    if(isNaN(max_seconds)) { max_seconds = 240 }
    var end_loop_early = false
    while(q.next() &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      var snow_id = q.linked_snow_computer
      var snow_device = new GlideRecord('cmdb_ci_computer')
      snow_device.addQuery('sys_id',snow_id)
      snow_device.query()
      if(!snow_device.next()) {
        var armis_device_id = q.getValue('armis_device_id')
        
        var a = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    	a.addQuery('armis_device_id',armis_device_id)
        a.query()
        while(a.next()) {
        	//debug.push("Bad record--computer does not exist for Armis device " + armis_device_id + ". Removing link. " + lapReport(lap));lap=now()
	        a.setValue('novel_link_attempted',false)
	        a.setValue('linked_snow_computer',"")
	        a.update()
        }
        continue
      }

      devices_count++
      debug.push("Processing Armis device " + q.name + " (" + q.sys_id + "), linked to SNOW device " + snow_device.name + " " + lapReport(lap));lap=now()

      //Push ARP and key attributes
      queueInitialARPandCSV(snow_device,execution_id)
      debug.push("-Queued ARP and CSV " + lapReport(lap));lap=now()

      //Push properties
      var local_property_count = 0
      for(var i=0;i&lt;field_dictionary.length;i++)
      {
        var field_name = field_dictionary[i].field_name
        var upload_type = field_dictionary[i].upload_type
        var armis_attribute_description = field_dictionary[i].armis_attribute_description
        var armis_property_key = field_dictionary[i].armis_property_key
        var format_as_utc = field_dictionary[i].format_as_utc == "1"
        var is_mapped_upload = field_dictionary[i].is_mapped_upload == "1"
        
        var field_value = snow_device.getDisplayValue(field_name)
        //debug.push("field_name=" + field_name + ",field_value=" + field_value)
        
        //Does this actually have a value?
        if(field_value != null &amp;&amp; armis_device_id != '')
        {

          debug.push("--(" + upload_type + ") " + field_name + ": " + field_value + " "  + lapReport(lap));lap=now()
          total_properties++
          local_property_count++


          debug.push(queueAnyAttribute({
            execution_id: execution_id,
            armis_id: q.getValue('armis_device_id'),
            mac: q.getValue('mac_address'),
            snow_field: field_name,
            value: field_value,
            upload_type: upload_type,
            is_mapped_upload: is_mapped_upload,
            format_as_utc: format_as_utc,
            armis_attribute_description: armis_attribute_description,
            armis_property_key: armis_property_key}))
        }
      }
      //if(local_property_count &gt; 1) { debug.push("--(queued " + (local_property_count-1) + " more properties.) " + lapReport(lap));lap=now() }

      //Push applications
      //First, get all software installs that are associated with our SNOW computer
      var s = new GlideRecord('cmdb_software_instance')
      s.addQuery('installed_on',snow_device.sys_id)
      s.query()
      
      debug.push("-SOFTWARE: Found " + s.getRowCount() + " installs. " + lapReport(lap));lap=now()
      var local_application_count = 0
      while(s.next())
      {
        var software = s.software
        if (software != null)
        {
          total_applications++
          if(local_application_count == 0) { debug.push("--(APP) " + ('' + software.name) + " (" + ('' + software.version) + ") " + lapReport(lap));lap=now() }
          local_application_count++
          queueApplication({execution_id: execution_id, armis_id: q.armis_device_id, name: '' + software.name, version: '' + software.version})
        }
      }
      if(local_application_count &gt; 1) { debug.push("--(queued " + (local_application_count-1) + " more applications.) "  + lapReport(lap));lap=now() }
      
      //And finally, mark this as complete.
      q.setValue('has_pushed_all_properties_to_armis',true)
      q.update()
      debug.push("-Marked complete, moving to next. "  + lapReport(lap));lap=now()
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + '] '
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  var report = error_message + devices_count + '/' + q.getRowCount() + ' devices checked, ' + total_properties + ' properties and ' + total_applications + ' applications queued for upload.'
  var time_diff = now() - start_time
  debug = debug.join('\n')
  outputs.debug = debug
  if(q.getRowCount() &gt; 0) { writeToActionLog({id: execution_id, action_type: 'MAIN_QueueAllDevicePropertiesEtc', total_time: time_diff, api_time: 0, heavy_processing_time: time_diff, report: report, debug_string: debug}) }
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>dd8d41921b5a90104ca7edf9bc4bcb10</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>d58d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=dd8d41921b5a90104ca7edf9bc4bcb10"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>dd8d41921b5a90104ca7edf9bc4bcb10</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>918d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>dd8d41921b5a90104ca7edf9bc4bcb10</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:07</sys_created_on>
        <sys_id>c4b4e15e1bda90104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:07</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_dd8d41921b5a90104ca7edf9bc4bcb10</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>dd8d41921b5a90104ca7edf9bc4bcb10</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>558d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=dd8d41921b5a90104ca7edf9bc4bcb10^sys_idNOT IN00b4e15e1bda90104ca7edf9bc4bcbb3"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>max_seconds</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">dd8d41921b5a90104ca7edf9bc4bcb10</model>
        <model_id>dd8d41921b5a90104ca7edf9bc4bcb10</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_dd8d41921b5a90104ca7edf9bc4bcb10</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:07</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>00b4e15e1bda90104ca7edf9bc4bcbb3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:07</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=dd8d41921b5a90104ca7edf9bc4bcb10^sys_idNOT INccb4e15e1bda90104ca7edf9bc4bcbb9"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=4dafb26d-66df-4723-9954-aad8f6c57655</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">dd8d41921b5a90104ca7edf9bc4bcb10</model>
        <model_id>dd8d41921b5a90104ca7edf9bc4bcb10</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_dd8d41921b5a90104ca7edf9bc4bcb10</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:07</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ccb4e15e1bda90104ca7edf9bc4bcbb9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:07</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">958d41921b5a90104ca7edf9bc4bcb0f</action>
        <cid>2291952e-cbfe-4dd9-a97b-993eaaa4a83d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Function Library v0.10</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:21</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fff83d271b4b50104ca7edf9bc4bcbd5</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=fff83d271b4b50104ca7edf9bc4bcbd5"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>fff83d271b4b50104ca7edf9bc4bcbd5</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:21</sys_created_on>
        <sys_id>3ff83d271b4b50104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>fff83d271b4b50104ca7edf9bc4bcbd5</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:21</sys_created_on>
        <sys_id>7bf83d271b4b50104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-10 16:05:21</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_action_input action="delete_multiple" query="model=958d41921b5a90104ca7edf9bc4bcb0f^sys_idNOT INffa4e15e1bda90104ca7edf9bc4bcb8f"/>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=1df5be3d-9fc2-43a3-8246-2150e28c9b63</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>max_seconds</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">958d41921b5a90104ca7edf9bc4bcb0f</model>
        <model_id>958d41921b5a90104ca7edf9bc4bcb0f</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_input_958d41921b5a90104ca7edf9bc4bcb0f</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:06</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ffa4e15e1bda90104ca7edf9bc4bcb8f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:06</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_step_instance action="delete_multiple" query="action=958d41921b5a90104ca7edf9bc4bcb0f^sys_idNOT IN4de513f71b8fd4104ca7edf9bc4bcb3b,dd8d41921b5a90104ca7edf9bc4bcb10,fff83d271b4b50104ca7edf9bc4bcbd5"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">958d41921b5a90104ca7edf9bc4bcb0f</action>
        <cid>c1842d49-63df-4ce1-9ff1-b4f175958b29</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Table Library v0.16</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>4de513f71b8fd4104ca7edf9bc4bcb3b</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:07</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=4de513f71b8fd4104ca7edf9bc4bcb3b"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>4de513f71b8fd4104ca7edf9bc4bcb3b</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:42</sys_created_on>
        <sys_id>4de513f71b8fd4104ca7edf9bc4bcb4d</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:54:07</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>4de513f71b8fd4104ca7edf9bc4bcb3b</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-11 17:29:42</sys_created_on>
        <sys_id>89e513f71b8fd4104ca7edf9bc4bcb4d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-11 17:29:42</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">958d41921b5a90104ca7edf9bc4bcb0f</action>
        <cid>7fbff9ef-a229-40fe-9adc-c00495a0f3e9</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dd8d41921b5a90104ca7edf9bc4bcb10</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=dd8d41921b5a90104ca7edf9bc4bcb10"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>dd8d41921b5a90104ca7edf9bc4bcb10</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>998d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
        <value>/*

This script iterates through all devices that have a link and haven't pushed all properties up to Armis yet, and pushes those properties up to Armis.

*/


(function execute(inputs, outputs) {

  var debug = ['BEGIN QueueAllDevicePropertiesEtc']
  var start_time = now()
  var lap = now()
  var api_total = 0
  var heavy_total = 0
  var execution_id = generateID()
  var total_properties = 0
  var total_applications = 0
  var devices_count = 0
  var error_message = ''
  var this_now = now()
  
  
  try
  {
    
    //Get the list of all fields we will need to pull, and what to do for each
    var p = new GlideRecord('x_fmcna_armis_inte_armis_snow_attribute_map')
    p.query()
    
    var field_dictionary = []
    while(p.next())
    {
      var entry =  {}
      entry.field_name = p.getValue('snow_field')
      entry.upload_type = p.getValue('upload_type')
      entry.armis_attribute_description = p.getValue('armis_attribute_description')
      entry.armis_property_key = p.getValue('armis_property_key')
      entry.format_as_utc = p.getValue('format_as_utc')
      entry.is_mapped_upload = p.getValue('is_mapped_upload')
      field_dictionary.push(entry)
    }
    
    debug.push("Loaded property dictionary (" + field_dictionary.length + " entries)."+ lapReport(lap));lap=now()
    

    //Clear the COMPLETE entries off the Properties and Applications tables. (This is truly necessary, these tables get HUGE very quickly.)
    var tables_to_clear = [
      ['x_fmcna_armis_inte_armis_op_property_upload','properties'],
      ['x_fmcna_armis_inte_armis_op_application_upload','applications'],
      ['x_fmcna_armis_inte_armis_op_key_attribute','key attributes'],
      ['x_fmcna_armis_inte_armis_op_arp_table','arp entries']]

    for(var i=0;i&lt;tables_to_clear.length;i++)
    {
      var table_name = tables_to_clear[i][0]
      var table_display = tables_to_clear[i][1]
      var clear = new GlideRecord(table_name)
      clear.addQuery('status','COMPLETE') 
      clear.query()
      debug.push("Queried " + clear.getRowCount() + " completed " + table_display + ". " + lapReport(lap));lap=now()
      clear.deleteMultiple()
      debug.push("Cleared completed " + table_display + ". " + lapReport(lap));lap=now()
    } 

    //Get all devices that haven't been pushed

    var q = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    q.addQuery('has_pushed_all_properties_to_armis',false)
    q.addNotNullQuery('linked_snow_computer')
    q.query()
    debug.push('Found ' + q.getRowCount() + ' records that need to be pushed. ' + lapReport(lap));lap=now()

    //LOOP!
    var max_seconds = parseInt(inputs.max_seconds)
    if(isNaN(max_seconds)) { max_seconds = 240 }
    var end_loop_early = false
    while(q.next() &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      var snow_id = q.linked_snow_computer
      var snow_device = new GlideRecord('cmdb_ci_computer')
      snow_device.addQuery('sys_id',snow_id)
      snow_device.query()
      if(!snow_device.next()) {
        var armis_device_id = q.getValue('armis_device_id')
        
        var a = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
    	a.addQuery('armis_device_id',armis_device_id)
        a.query()
        while(a.next()) {
        	//debug.push("Bad record--computer does not exist for Armis device " + armis_device_id + ". Removing link. " + lapReport(lap));lap=now()
	        a.setValue('novel_link_attempted',false)
	        a.setValue('linked_snow_computer',"")
	        a.update()
        }
        continue
      }

      devices_count++
      debug.push("Processing Armis device " + q.name + " (" + q.sys_id + "), linked to SNOW device " + snow_device.name + " " + lapReport(lap));lap=now()

      //Push ARP and key attributes
      queueInitialARPandCSV(snow_device,execution_id)
      debug.push("-Queued ARP and CSV " + lapReport(lap));lap=now()

      //Push properties
      var local_property_count = 0
      for(var i=0;i&lt;field_dictionary.length;i++)
      {
        var field_name = field_dictionary[i].field_name
        var upload_type = field_dictionary[i].upload_type
        var armis_attribute_description = field_dictionary[i].armis_attribute_description
        var armis_property_key = field_dictionary[i].armis_property_key
        var format_as_utc = field_dictionary[i].format_as_utc == "1"
        var is_mapped_upload = field_dictionary[i].is_mapped_upload == "1"
        
        var field_value = snow_device.getDisplayValue(field_name)
        //debug.push("field_name=" + field_name + ",field_value=" + field_value)
        
        //Does this actually have a value?
        if(field_value != null &amp;&amp; armis_device_id != '')
        {

          debug.push("--(" + upload_type + ") " + field_name + ": " + field_value + " "  + lapReport(lap));lap=now()
          total_properties++
          local_property_count++


          debug.push(queueAnyAttribute({
            execution_id: execution_id,
            armis_id: q.getValue('armis_device_id'),
            mac: q.getValue('mac_address'),
            snow_field: field_name,
            value: field_value,
            upload_type: upload_type,
            is_mapped_upload: is_mapped_upload,
            format_as_utc: format_as_utc,
            armis_attribute_description: armis_attribute_description,
            armis_property_key: armis_property_key}))
        }
      }
      //if(local_property_count &gt; 1) { debug.push("--(queued " + (local_property_count-1) + " more properties.) " + lapReport(lap));lap=now() }

      //Push applications
      //First, get all software installs that are associated with our SNOW computer
      var s = new GlideRecord('cmdb_software_instance')
      s.addQuery('installed_on',snow_device.sys_id)
      s.query()
      
      debug.push("-SOFTWARE: Found " + s.getRowCount() + " installs. " + lapReport(lap));lap=now()
      var local_application_count = 0
      while(s.next())
      {
        var software = s.software
        if (software != null)
        {
          total_applications++
          if(local_application_count == 0) { debug.push("--(APP) " + ('' + software.name) + " (" + ('' + software.version) + ") " + lapReport(lap));lap=now() }
          local_application_count++
          queueApplication({execution_id: execution_id, armis_id: q.armis_device_id, name: '' + software.name, version: '' + software.version})
        }
      }
      if(local_application_count &gt; 1) { debug.push("--(queued " + (local_application_count-1) + " more applications.) "  + lapReport(lap));lap=now() }
      
      //And finally, mark this as complete.
      q.setValue('has_pushed_all_properties_to_armis',true)
      q.update()
      debug.push("-Marked complete, moving to next. "  + lapReport(lap));lap=now()
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + '] '
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }
  
  var report = error_message + devices_count + '/' + q.getRowCount() + ' devices checked, ' + total_properties + ' properties and ' + total_applications + ' applications queued for upload.'
  var time_diff = now() - start_time
  debug = debug.join('\n')
  outputs.debug = debug
  if(q.getRowCount() &gt; 0) { writeToActionLog({id: execution_id, action_type: 'MAIN_QueueAllDevicePropertiesEtc', total_time: time_diff, api_time: 0, heavy_processing_time: time_diff, report: report, debug_string: debug}) }
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>dd8d41921b5a90104ca7edf9bc4bcb10</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>d58d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=dd8d41921b5a90104ca7edf9bc4bcb10"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>dd8d41921b5a90104ca7edf9bc4bcb10</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>918d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>dd8d41921b5a90104ca7edf9bc4bcb10</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:07</sys_created_on>
        <sys_id>c4b4e15e1bda90104ca7edf9bc4bcbdc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:07</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_dd8d41921b5a90104ca7edf9bc4bcb10</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>dd8d41921b5a90104ca7edf9bc4bcb10</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 08:55:54</sys_created_on>
        <sys_id>558d41921b5a90104ca7edf9bc4bcb16</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:55:54</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=dd8d41921b5a90104ca7edf9bc4bcb10^sys_idNOT IN00b4e15e1bda90104ca7edf9bc4bcbb3"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>max_seconds</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">dd8d41921b5a90104ca7edf9bc4bcb10</model>
        <model_id>dd8d41921b5a90104ca7edf9bc4bcb10</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_dd8d41921b5a90104ca7edf9bc4bcb10</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:07</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>00b4e15e1bda90104ca7edf9bc4bcbb3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:07</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=dd8d41921b5a90104ca7edf9bc4bcb10^sys_idNOT INccb4e15e1bda90104ca7edf9bc4bcbb9"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=4dafb26d-66df-4723-9954-aad8f6c57655</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">dd8d41921b5a90104ca7edf9bc4bcb10</model>
        <model_id>dd8d41921b5a90104ca7edf9bc4bcb10</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_dd8d41921b5a90104ca7edf9bc4bcb10</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:07</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ccb4e15e1bda90104ca7edf9bc4bcbb9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:07</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="MAIN_QueueAllDevicePropertiesEtc (v2.2)">958d41921b5a90104ca7edf9bc4bcb0f</action>
        <cid>2291952e-cbfe-4dd9-a97b-993eaaa4a83d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Function Library v0.10</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:21</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fff83d271b4b50104ca7edf9bc4bcbd5</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=fff83d271b4b50104ca7edf9bc4bcbd5"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>fff83d271b4b50104ca7edf9bc4bcbd5</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:21</sys_created_on>
        <sys_id>3ff83d271b4b50104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-17 20:54:31</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>fff83d271b4b50104ca7edf9bc4bcbd5</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-10 16:05:21</sys_created_on>
        <sys_id>7bf83d271b4b50104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-10 16:05:21</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_input_958d41921b5a90104ca7edf9bc4bcb0f^sys_idNOT IN80b4e15e1bda90104ca7edf9bc4bcb95"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>max_seconds</element>
        <help/>
        <hint/>
        <label>max_seconds</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_958d41921b5a90104ca7edf9bc4bcb0f</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 10:37:07</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>80b4e15e1bda90104ca7edf9bc4bcb95</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:37:07</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
</record_update>
