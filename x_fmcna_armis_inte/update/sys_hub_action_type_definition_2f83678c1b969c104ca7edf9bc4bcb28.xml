<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_hub_action_type_definition">
    <sys_hub_action_type_definition action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <active>true</active>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <ih_action>false</ih_action>
        <internal_name>up_uploadarpbatch_v21</internal_name>
        <label_cache>[{"name":"{{action.max_seconds}}","label":"action➛max_seconds","type":"action","ref":""},{"name":"{{action.operation}}","label":"action➛operation","type":"action","ref":""},{"name":"{{step[9c44111f-3494-4908-9eca-f8468b3064d0].variable}}","label":"step➛Script step➛variable","type":"step","ref":""},{"name":"{{step[9c44111f-3494-4908-9eca-f8468b3064d0].debug}}","label":"step➛Script step➛debug","type":"step","ref":""},{"name":"{{step[9c44111f-3494-4908-9eca-f8468b3064d0].report}}","label":"step➛Script step➛report","type":"step","ref":""}]</label_cache>
        <latest_snapshot>8d55aeca1b9fd0504ca7edf9bc4bcb26</latest_snapshot>
        <master_snapshot>c6debdf11b1ad4104be764e8bc4bcbd7</master_snapshot>
        <name>UP_UploadBatches (v2.2)</name>
        <natlang/>
        <outputs/>
        <outputs/>
        <state>published</state>
        <sys_class_name>sys_hub_action_type_definition</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 20:05:05</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>2f83678c1b969c104ca7edf9bc4bcb28</sys_id>
        <sys_mod_count>112</sys_mod_count>
        <sys_name>UP_UploadBatches (v2.2)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name>sys_hub_action_type_definition_2f83678c1b969c104ca7edf9bc4bcb28</sys_update_name>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:53</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_definition>
    <sys_variable_value action="delete_multiple" query="document_key=2f83678c1b969c104ca7edf9bc4bcb28"/>
    <sys_element_mapping action="delete_multiple" query="id=2f83678c1b969c104ca7edf9bc4bcb28"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>debug</field>
        <id>2f83678c1b969c104ca7edf9bc4bcb28</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:25:51</sys_created_on>
        <sys_id>829310fd1b1e94104be764e8bc4bcb52</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:25:51</sys_updated_on>
        <table>var__m_sys_hub_action_output_2f83678c1b969c104ca7edf9bc4bcb28</table>
        <value>{{step[9c44111f-3494-4908-9eca-f8468b3064d0].debug}}</value>
    </sys_element_mapping>
    <sys_hub_step_instance action="delete_multiple" query="action=2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT IN135a5e8e1b5fd0504ca7edf9bc4bcb81,67123b081b1a9c104ca7edf9bc4bcb17,975a5e8e1b5fd0504ca7edf9bc4bcb89"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</action>
        <cid>9dbb78b7-5520-401e-99f9-97c761a35d5d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>135a5e8e1b5fd0504ca7edf9bc4bcb81</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:57</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=135a5e8e1b5fd0504ca7edf9bc4bcb81"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>135a5e8e1b5fd0504ca7edf9bc4bcb81</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_id>535a5e8e1b5fd0504ca7edf9bc4bcb88</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:57</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>135a5e8e1b5fd0504ca7edf9bc4bcb81</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_id>9f5a5e8e1b5fd0504ca7edf9bc4bcb87</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:57</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</action>
        <cid>9c44111f-3494-4908-9eca-f8468b3064d0</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>67123b081b1a9c104ca7edf9bc4bcb17</sys_id>
        <sys_mod_count>44</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:50</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=67123b081b1a9c104ca7edf9bc4bcb17"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>67123b081b1a9c104ca7edf9bc4bcb17</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>27123b081b1a9c104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:43</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>67123b081b1a9c104ca7edf9bc4bcb17</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>e7123b081b1a9c104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:50</sys_updated_on>
        <value>/* 

This function uploads batches from the ARP, Key Attribute, Property, and Application tables. (In that order.)

For each operation:
1. Pull up to 2000 records and set their status to PROCESSING.
2. Compose a JSON payload or a CSV attachment with the contents.
3. Execute the REST API call and document the results. If it succeeds, set all 1000 records to COMPLETED, otherwise reset them to PENDING.
   - Note: for CSV/ARP uploads, can't actually do a multipart upload in a script due to limitation, have to be executed with IntegrationHub.

Operations should be done precisely in the order of ARP, then Key Attribute, then Property, then Application. However, because more ARPs may come in while the last stack of ARPs is processing, snapshots of the counts of each will be taken at the beginning to ensure that the system doesn't get bogged down doing a handful of ARPs over and over and nothing else.

*/


// ACTION SPECIFIC FUNCTIONS

// CSV encapsulation as per RFC4180. Note that Armis is a bit finicky so I'm just encapsulating and not checking whether I have to.
function csv_encapsulate(str) { return '"' + ('' + str).replace('"','""') + '"' }

// **********************
// *** IMPLEMENTATION ***
// **********************

(function execute(inputs, outputs) {
  
  //Init
  var debug = []
  var start_time = now()
  var execution_id = generateID()
  var api_total = 0 // total time spent on the api
  var heavy_total = 0 // total time spent on sql processing
  var query_limit = 2 //This is how many properties should be processed at once--for each of the operations below, Armis can sustain 2000 at once.
  var max_entries = 1900 //All of the upload functions we're using should be able to handle this many.
  var total_entries = 0
  var total_records_count = 0
  var lap = now()
  var report_string = ''
  var error_message = ''
  var max_seconds = parseInt(inputs.max_seconds)
  if(isNaN(max_seconds)) { max_seconds = 240 }
  
  //Set up initial variables depending on the operation we're executing
  var table = ''
  var payload
  var endpoint = ''
  switch (inputs.operation)
  {
    case 'arp': table = 'x_fmcna_armis_inte_armis_op_arp_table';break
    case 'csv': table = 'x_fmcna_armis_inte_armis_op_key_attribute';break;
    case 'app':
      table = 'x_fmcna_armis_inte_armis_op_application_upload'
      endpoint = "POST Applications"
      break;
    case 'prop':
      table = 'x_fmcna_armis_inte_armis_op_property_upload'
      endpoint = "POST Properties"
      break;  
    default: return
  }
  debug.push("Operation: " + inputs.operation)
  debug.push("Table: " + table)
  
  try
  {
    //Find out potentially how many loops we'll be processing.
    var q = new GlideAggregate(table)
    q.addQuery('status','PENDING')
    q.addAggregate('COUNT')
    q.query()
    var num_pending = 0
    if (q.next()) { num_pending = q.getAggregate('COUNT') }
    var num_loops = Math.ceil(num_pending/max_entries) + 50
    debug.push("Num pending: " + num_pending + " (" + num_loops + " loops) "+lapReport(lap));lap=now()

    //Do the loop!
    //Keep processing queries until we're out of time, out of queries, or another failure has triggered an early abort.
    var loop_counter = 0
    var end_loop_early = false
    debug.push("loop_counter=" + loop_counter + ",num_loops=" + num_loops + ",max_seconds=" + max_seconds +lapReport(lap));lap=now()
    while(loop_counter &lt; num_loops &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      loop_counter++
      debug.push("START LOOP " + loop_counter+lapReport(lap));lap=now()
      
      //Initialize payload
      switch (inputs.operation)
      {
        case 'arp':
          payload = ["ip,mac"]
          break;
        case 'csv':
          payload = ["id,mac,key,value"]
          break;
        case 'app':
        case 'prop':
          payload = []
          break;  
        default: return
      }

      //Get the sys_id of the last entry in our current batch. (See FUNCTION_LIBRARY for details.)
      var end_sys_id = getPendingRecordsEndSysID(max_entries,table)

      //Get two sets of records: one to iterate through, one to updatemultiple() to "COMPLETE" when we're done.
      var rec1 = getNumPendingRecords(max_entries,table,end_sys_id)
      var rec2 = getNumPendingRecords(max_entries,table,end_sys_id)
      debug.push("Records end at sys_id '" + end_sys_id + "', total records (1) " + rec1.getRowCount() + " (2) " + rec2.getRowCount() + " " +lapReport(lap));lap=now()

      //Format: "2020-07-29T15:07:56"
      var lastSeenString = (new GlideDateTime()).getDisplayValue().replace(" ","T")

      var heavy_timer = now()
      var rec_counter = 0
      var rec_time = now()

      //Pull all of the values from our records-to-process.
      while(rec1.next())
      {
        rec_counter++
        total_records_count++
        switch (inputs.operation)
        {
          case 'arp':
            payload.push(rec1.getValue('ip') + "," + rec1.getValue('mac'))
            break;
          case 'csv':
            var device_id = parseInt(rec1.getValue('armis_device_id'))
            if(isNaN(device_id)) { device_id = ''}
            var payload_line = '' + device_id + "," + rec1.getValue('armis_mac') + "," + rec1.getValue('attribute') + "," + csv_encapsulate(rec1.getValue('value'))
            payload.push(payload_line)
            break;
          case 'app':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'name': rec1.getValue('application_name'),
              'application_version': rec1.getValue('version') } } )
            break;
          case 'prop':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'description': rec1.getValue('property_name'),
              'type': rec1.getValue('property_key'),
              'value': rec1.getValue('property_value') } } )
            break;  
          default: return
        }
      }
      debug.push("Processed " + rec_counter + " records. "+lapReport(lap));lap=now()


      //Combine payload.
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          payload = payload.join("\n")
          break;
        case 'app':
        case 'prop':
          payload = JSON.stringify(payload)
      }
      debug.push("Combined payload (" + ('' + payload).length + "): '" + ('' + payload).substring(0,300) + "...' "+lapReport(lap));lap=now()
	
      //Upload payload to Armis. (Or queue attachment for upload.
      var rest_results = {}
      var rest_success = true
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          queueAttachmentREST({id: execution_id, type: inputs.operation.toUpperCase(), payload: payload})
          debug.push("Queued payload for attachment upload. "+lapReport(lap));lap=now()
          break;
        case 'app':
        case 'prop':
          rest_results = executeStandardREST({id: execution_id, endpoint: endpoint, payload: payload, async: false, query_params: []})
          api_total += rest_results.api_time
          debug.push("REST Executed (" + rest_results.api_time + "ms). Result: " + rest_results.response_code + " : '" + ('' + rest_results.response_body).substring(0,300) + "' "+lapReport(lap));lap=now()
          if(rest_results.response_code != 207)
          {
          	rest_success = false
            report_string += '[REST:' + rest_results.response_code + ',' + rest_results.response_body + ']'
          } 
      }
      
      if(rest_success==true)
      {
        //Processed all, mark them complete.
        rec_time = now()
        rec2.setValue('status','COMPLETE')
        rec2.updateMultiple()
        heavy_total += ( now() - heavy_timer )
        debug.push("Marked records as complete. "+lapReport(lap));lap=now()
      }
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + ']'
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }

  //Done looping. Report! Not much to report here except the number of loops we executed, as the REST API log has all the rest of the data.
  report_string += error_message + inputs.operation + ' operation, ' + loop_counter  + ' executions, ' + total_records_count + ' records processed.'
  debug = debug.join('\n')
  if(num_loops &gt; 0) { writeToActionLog({id: execution_id, action_type: 'UP_UploadBatches('+inputs.operation+')', total_time: (now() - start_time), api_time: api_total, heavy_processing_time: heavy_total, report: report_string, debug_string: debug}) }
  
  outputs.debug = debug
  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=67123b081b1a9c104ca7edf9bc4bcb17"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>ef123b081b1a9c104ca7edf9bc4bcb24</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:43</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 22:29:46</sys_created_on>
        <sys_id>72a488101b9a9c104ca7edf9bc4bcb1e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 22:29:46</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>operation</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:20:53</sys_created_on>
        <sys_id>4172907d1b1e94104be764e8bc4bcb8b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:20:53</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</table>
        <value>{{action.operation}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>a3123b081b1a9c104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:43</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=67123b081b1a9c104ca7edf9bc4bcb17^sys_idNOT IN8172907d1b1e94104be764e8bc4bcb7e,bea488101b9a9c104ca7edf9bc4bcb05"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>operation</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:20:53</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8172907d1b1e94104be764e8bc4bcb7e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:20:53</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 22:29:46</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>bea488101b9a9c104ca7edf9bc4bcb05</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 22:29:46</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=67123b081b1a9c104ca7edf9bc4bcb17^sys_idNOT IN23123b081b1a9c104ca7edf9bc4bcb1c,cf9ca99a1b1e90104ca7edf9bc4bcb48"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=43d13408-838c-41e3-bd14-36ff6a8d5360</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>23123b081b1a9c104ca7edf9bc4bcb1c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:42</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=32b9c1fb-76e3-4d8b-9640-d0a4c17d940e</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>report</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>report</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 11:11:44</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>cf9ca99a1b1e90104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 11:11:44</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</action>
        <cid>dc2caecc-71cf-4daf-914d-999f55b23164</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>975a5e8e1b5fd0504ca7edf9bc4bcb89</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:58</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=975a5e8e1b5fd0504ca7edf9bc4bcb89"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>975a5e8e1b5fd0504ca7edf9bc4bcb89</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:58</sys_created_on>
        <sys_id>135a5e8e1b5fd0504ca7edf9bc4bcb8f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:58</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>975a5e8e1b5fd0504ca7edf9bc4bcb89</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:58</sys_created_on>
        <sys_id>5f5a5e8e1b5fd0504ca7edf9bc4bcb8e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:58</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_action_input action="delete_multiple" query="model=2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT IN0972907d1b1e94104be764e8bc4bcb5d,e71273401b1a9c104ca7edf9bc4bcb9c"/>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=choice,uiTypeLabel=Choice,uiUniqueId=44937559-1e06-479a-9e55-83b57f077326</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice>3</choice>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>arp</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>operation</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Choice">choice</internal_type>
        <label>operation</label>
        <mandatory>false</mandatory>
        <max_length>32</max_length>
        <model display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</model>
        <model_id>2f83678c1b969c104ca7edf9bc4bcb28</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:20:52</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>0972907d1b1e94104be764e8bc4bcb5d</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:20:52</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=9dd34c62-d723-4356-892b-72c8373f376e</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>30</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>max_seconds</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</model>
        <model_id>2f83678c1b969c104ca7edf9bc4bcb28</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e71273401b1a9c104ca7edf9bc4bcb9c</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 22:29:45</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_output action="delete_multiple" query="model=2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT IN0e9310fd1b1e94104be764e8bc4bcb48"/>
    <sys_hub_action_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,pwd2droppable=true,uiType=string,uiTypeLabel=String,uiUniqueId=449b114f-4fd3-4a08-a4b3-5722cc0b4731</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_prototype/>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_link/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>false</mandatory>
        <max_length>8000</max_length>
        <model display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</model>
        <model_id>2f83678c1b969c104ca7edf9bc4bcb28</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_output_2f83678c1b969c104ca7edf9bc4bcb28</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:25:51</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>0e9310fd1b1e94104be764e8bc4bcb48</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:25:51</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_output>
    <sys_hub_step_instance action="delete_multiple" query="action=2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT IN135a5e8e1b5fd0504ca7edf9bc4bcb81,67123b081b1a9c104ca7edf9bc4bcb17,975a5e8e1b5fd0504ca7edf9bc4bcb89"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</action>
        <cid>9dbb78b7-5520-401e-99f9-97c761a35d5d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>135a5e8e1b5fd0504ca7edf9bc4bcb81</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:57</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=135a5e8e1b5fd0504ca7edf9bc4bcb81"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>135a5e8e1b5fd0504ca7edf9bc4bcb81</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_id>535a5e8e1b5fd0504ca7edf9bc4bcb88</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:57</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>135a5e8e1b5fd0504ca7edf9bc4bcb81</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_id>9f5a5e8e1b5fd0504ca7edf9bc4bcb87</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:57</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</action>
        <cid>9c44111f-3494-4908-9eca-f8468b3064d0</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>67123b081b1a9c104ca7edf9bc4bcb17</sys_id>
        <sys_mod_count>44</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:50</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=67123b081b1a9c104ca7edf9bc4bcb17"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>67123b081b1a9c104ca7edf9bc4bcb17</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>27123b081b1a9c104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:43</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>67123b081b1a9c104ca7edf9bc4bcb17</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>e7123b081b1a9c104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:50</sys_updated_on>
        <value>/* 

This function uploads batches from the ARP, Key Attribute, Property, and Application tables. (In that order.)

For each operation:
1. Pull up to 2000 records and set their status to PROCESSING.
2. Compose a JSON payload or a CSV attachment with the contents.
3. Execute the REST API call and document the results. If it succeeds, set all 1000 records to COMPLETED, otherwise reset them to PENDING.
   - Note: for CSV/ARP uploads, can't actually do a multipart upload in a script due to limitation, have to be executed with IntegrationHub.

Operations should be done precisely in the order of ARP, then Key Attribute, then Property, then Application. However, because more ARPs may come in while the last stack of ARPs is processing, snapshots of the counts of each will be taken at the beginning to ensure that the system doesn't get bogged down doing a handful of ARPs over and over and nothing else.

*/


// ACTION SPECIFIC FUNCTIONS

// CSV encapsulation as per RFC4180. Note that Armis is a bit finicky so I'm just encapsulating and not checking whether I have to.
function csv_encapsulate(str) { return '"' + ('' + str).replace('"','""') + '"' }

// **********************
// *** IMPLEMENTATION ***
// **********************

(function execute(inputs, outputs) {
  
  //Init
  var debug = []
  var start_time = now()
  var execution_id = generateID()
  var api_total = 0 // total time spent on the api
  var heavy_total = 0 // total time spent on sql processing
  var query_limit = 2 //This is how many properties should be processed at once--for each of the operations below, Armis can sustain 2000 at once.
  var max_entries = 1900 //All of the upload functions we're using should be able to handle this many.
  var total_entries = 0
  var total_records_count = 0
  var lap = now()
  var report_string = ''
  var error_message = ''
  var max_seconds = parseInt(inputs.max_seconds)
  if(isNaN(max_seconds)) { max_seconds = 240 }
  
  //Set up initial variables depending on the operation we're executing
  var table = ''
  var payload
  var endpoint = ''
  switch (inputs.operation)
  {
    case 'arp': table = 'x_fmcna_armis_inte_armis_op_arp_table';break
    case 'csv': table = 'x_fmcna_armis_inte_armis_op_key_attribute';break;
    case 'app':
      table = 'x_fmcna_armis_inte_armis_op_application_upload'
      endpoint = "POST Applications"
      break;
    case 'prop':
      table = 'x_fmcna_armis_inte_armis_op_property_upload'
      endpoint = "POST Properties"
      break;  
    default: return
  }
  debug.push("Operation: " + inputs.operation)
  debug.push("Table: " + table)
  
  try
  {
    //Find out potentially how many loops we'll be processing.
    var q = new GlideAggregate(table)
    q.addQuery('status','PENDING')
    q.addAggregate('COUNT')
    q.query()
    var num_pending = 0
    if (q.next()) { num_pending = q.getAggregate('COUNT') }
    var num_loops = Math.ceil(num_pending/max_entries) + 50
    debug.push("Num pending: " + num_pending + " (" + num_loops + " loops) "+lapReport(lap));lap=now()

    //Do the loop!
    //Keep processing queries until we're out of time, out of queries, or another failure has triggered an early abort.
    var loop_counter = 0
    var end_loop_early = false
    debug.push("loop_counter=" + loop_counter + ",num_loops=" + num_loops + ",max_seconds=" + max_seconds +lapReport(lap));lap=now()
    while(loop_counter &lt; num_loops &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      loop_counter++
      debug.push("START LOOP " + loop_counter+lapReport(lap));lap=now()
      
      //Initialize payload
      switch (inputs.operation)
      {
        case 'arp':
          payload = ["ip,mac"]
          break;
        case 'csv':
          payload = ["id,mac,key,value"]
          break;
        case 'app':
        case 'prop':
          payload = []
          break;  
        default: return
      }

      //Get the sys_id of the last entry in our current batch. (See FUNCTION_LIBRARY for details.)
      var end_sys_id = getPendingRecordsEndSysID(max_entries,table)

      //Get two sets of records: one to iterate through, one to updatemultiple() to "COMPLETE" when we're done.
      var rec1 = getNumPendingRecords(max_entries,table,end_sys_id)
      var rec2 = getNumPendingRecords(max_entries,table,end_sys_id)
      debug.push("Records end at sys_id '" + end_sys_id + "', total records (1) " + rec1.getRowCount() + " (2) " + rec2.getRowCount() + " " +lapReport(lap));lap=now()

      //Format: "2020-07-29T15:07:56"
      var lastSeenString = (new GlideDateTime()).getDisplayValue().replace(" ","T")

      var heavy_timer = now()
      var rec_counter = 0
      var rec_time = now()

      //Pull all of the values from our records-to-process.
      while(rec1.next())
      {
        rec_counter++
        total_records_count++
        switch (inputs.operation)
        {
          case 'arp':
            payload.push(rec1.getValue('ip') + "," + rec1.getValue('mac'))
            break;
          case 'csv':
            var device_id = parseInt(rec1.getValue('armis_device_id'))
            if(isNaN(device_id)) { device_id = ''}
            var payload_line = '' + device_id + "," + rec1.getValue('armis_mac') + "," + rec1.getValue('attribute') + "," + csv_encapsulate(rec1.getValue('value'))
            payload.push(payload_line)
            break;
          case 'app':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'name': rec1.getValue('application_name'),
              'application_version': rec1.getValue('version') } } )
            break;
          case 'prop':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'description': rec1.getValue('property_name'),
              'type': rec1.getValue('property_key'),
              'value': rec1.getValue('property_value') } } )
            break;  
          default: return
        }
      }
      debug.push("Processed " + rec_counter + " records. "+lapReport(lap));lap=now()


      //Combine payload.
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          payload = payload.join("\n")
          break;
        case 'app':
        case 'prop':
          payload = JSON.stringify(payload)
      }
      debug.push("Combined payload (" + ('' + payload).length + "): '" + ('' + payload).substring(0,300) + "...' "+lapReport(lap));lap=now()
	
      //Upload payload to Armis. (Or queue attachment for upload.
      var rest_results = {}
      var rest_success = true
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          queueAttachmentREST({id: execution_id, type: inputs.operation.toUpperCase(), payload: payload})
          debug.push("Queued payload for attachment upload. "+lapReport(lap));lap=now()
          break;
        case 'app':
        case 'prop':
          rest_results = executeStandardREST({id: execution_id, endpoint: endpoint, payload: payload, async: false, query_params: []})
          api_total += rest_results.api_time
          debug.push("REST Executed (" + rest_results.api_time + "ms). Result: " + rest_results.response_code + " : '" + ('' + rest_results.response_body).substring(0,300) + "' "+lapReport(lap));lap=now()
          if(rest_results.response_code != 207)
          {
          	rest_success = false
            report_string += '[REST:' + rest_results.response_code + ',' + rest_results.response_body + ']'
          } 
      }
      
      if(rest_success==true)
      {
        //Processed all, mark them complete.
        rec_time = now()
        rec2.setValue('status','COMPLETE')
        rec2.updateMultiple()
        heavy_total += ( now() - heavy_timer )
        debug.push("Marked records as complete. "+lapReport(lap));lap=now()
      }
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + ']'
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }

  //Done looping. Report! Not much to report here except the number of loops we executed, as the REST API log has all the rest of the data.
  report_string += error_message + inputs.operation + ' operation, ' + loop_counter  + ' executions, ' + total_records_count + ' records processed.'
  debug = debug.join('\n')
  if(num_loops &gt; 0) { writeToActionLog({id: execution_id, action_type: 'UP_UploadBatches('+inputs.operation+')', total_time: (now() - start_time), api_time: api_total, heavy_processing_time: heavy_total, report: report_string, debug_string: debug}) }
  
  outputs.debug = debug
  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=67123b081b1a9c104ca7edf9bc4bcb17"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>ef123b081b1a9c104ca7edf9bc4bcb24</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:43</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 22:29:46</sys_created_on>
        <sys_id>72a488101b9a9c104ca7edf9bc4bcb1e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 22:29:46</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>operation</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:20:53</sys_created_on>
        <sys_id>4172907d1b1e94104be764e8bc4bcb8b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:20:53</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</table>
        <value>{{action.operation}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>67123b081b1a9c104ca7edf9bc4bcb17</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:43</sys_created_on>
        <sys_id>a3123b081b1a9c104ca7edf9bc4bcb25</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:43</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=67123b081b1a9c104ca7edf9bc4bcb17^sys_idNOT IN8172907d1b1e94104be764e8bc4bcb7e,bea488101b9a9c104ca7edf9bc4bcb05"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>operation</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:20:53</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8172907d1b1e94104be764e8bc4bcb7e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:20:53</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label/>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 22:29:46</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>bea488101b9a9c104ca7edf9bc4bcb05</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 22:29:46</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=67123b081b1a9c104ca7edf9bc4bcb17^sys_idNOT IN23123b081b1a9c104ca7edf9bc4bcb1c,cf9ca99a1b1e90104ca7edf9bc4bcb48"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=43d13408-838c-41e3-bd14-36ff6a8d5360</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>23123b081b1a9c104ca7edf9bc4bcb1c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:42</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=32b9c1fb-76e3-4d8b-9640-d0a4c17d940e</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>report</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>report</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">67123b081b1a9c104ca7edf9bc4bcb17</model>
        <model_id>67123b081b1a9c104ca7edf9bc4bcb17</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_67123b081b1a9c104ca7edf9bc4bcb17</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 11:11:44</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>cf9ca99a1b1e90104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 11:11:44</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</action>
        <cid>dc2caecc-71cf-4daf-914d-999f55b23164</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:57</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>975a5e8e1b5fd0504ca7edf9bc4bcb89</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:58</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=975a5e8e1b5fd0504ca7edf9bc4bcb89"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>975a5e8e1b5fd0504ca7edf9bc4bcb89</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:58</sys_created_on>
        <sys_id>135a5e8e1b5fd0504ca7edf9bc4bcb8f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:58</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>975a5e8e1b5fd0504ca7edf9bc4bcb89</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:55:58</sys_created_on>
        <sys_id>5f5a5e8e1b5fd0504ca7edf9bc4bcb8e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:55:58</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT IN8d72907d1b1e94104be764e8bc4bcb75,af123b081b1a9c104ca7edf9bc4bcb14"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>operation</element>
        <help/>
        <hint/>
        <label>operation</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:20:52</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8d72907d1b1e94104be764e8bc4bcb75</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:20:52</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>max_seconds</element>
        <help/>
        <hint/>
        <label>max_seconds</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 21:08:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>af123b081b1a9c104ca7edf9bc4bcb14</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 21:08:42</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_choice action="delete_multiple" query="name=var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT IN0d72907d1b1e94104be764e8bc4bcb61,c572907d1b1e94104be764e8bc4bcb62,8172907d1b1e94104be764e8bc4bcb63,4d72907d1b1e94104be764e8bc4bcb63"/>
    <sys_choice field="operation" table="var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28">
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>arp</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
            <sequence>0</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 15:20:52</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>0d72907d1b1e94104be764e8bc4bcb61</sys_id>
            <sys_mod_count>1</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 15:21:47</sys_updated_on>
            <value>arp</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>prop</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
            <sequence>1</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 15:20:52</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>c572907d1b1e94104be764e8bc4bcb62</sys_id>
            <sys_mod_count>1</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 15:21:47</sys_updated_on>
            <value>prop</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>csv</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
            <sequence>2</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 15:20:52</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>8172907d1b1e94104be764e8bc4bcb63</sys_id>
            <sys_mod_count>1</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 15:21:47</sys_updated_on>
            <value>csv</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>app</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_2f83678c1b969c104ca7edf9bc4bcb28</name>
            <sequence>3</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 15:20:52</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>4d72907d1b1e94104be764e8bc4bcb63</sys_id>
            <sys_mod_count>1</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 15:21:47</sys_updated_on>
            <value>app</value>
        </sys_choice>
    </sys_choice>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_output_2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT IN8e9310fd1b1e94104be764e8bc4bcb4e"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>debug</element>
        <help/>
        <hint/>
        <label>debug</label>
        <language>en</language>
        <name>var__m_sys_hub_action_output_2f83678c1b969c104ca7edf9bc4bcb28</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 15:25:51</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8e9310fd1b1e94104be764e8bc4bcb4e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 15:25:51</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_hub_action_plan action="delete_multiple" query="action_id=2f83678c1b969c104ca7edf9bc4bcb28^sys_idNOT INb2defdf11b1ad4104be764e8bc4bcba4"/>
    <sys_hub_action_plan action="INSERT_OR_UPDATE">
        <action_id display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</action_id>
        <plan>{"persistor":{"@class":".ChunkingPlanPersistor","table":"sys_hub_action_plan","id":"b2defdf11b1ad4104be764e8bc4bcba4","name":"plan"}}</plan>
        <snapshot>8d55aeca1b9fd0504ca7edf9bc4bcb26</snapshot>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>b2defdf11b1ad4104be764e8bc4bcba4</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_overrides/>
        <sys_scope/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:55</sys_updated_on>
    </sys_hub_action_plan>
    <sys_hub_action_type_snapshot action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <internal_name>up_uploadbatches_v21</internal_name>
        <label_cache>[{"name":"{{action.max_seconds}}","label":"action➛max_seconds","type":"action","ref":""},{"name":"{{action.operation}}","label":"action➛operation","type":"action","ref":""},{"name":"{{step[9c44111f-3494-4908-9eca-f8468b3064d0].variable}}","label":"step➛Script step➛variable","type":"step","ref":""},{"name":"{{step[9c44111f-3494-4908-9eca-f8468b3064d0].debug}}","label":"step➛Script step➛debug","type":"step","ref":""},{"name":"{{step[9c44111f-3494-4908-9eca-f8468b3064d0].report}}","label":"step➛Script step➛report","type":"step","ref":""}]</label_cache>
        <master>true</master>
        <name>UP_UploadBatches (v2.2)</name>
        <natlang/>
        <outputs/>
        <outputs/>
        <parent_action display_value="UP_UploadBatches (v2.2)">2f83678c1b969c104ca7edf9bc4bcb28</parent_action>
        <sys_class_name>sys_hub_action_type_snapshot</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>c6debdf11b1ad4104be764e8bc4bcbd7</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_overrides/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-04 14:06:52</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_snapshot>
    <sys_variable_value action="delete_multiple" query="document_key=c6debdf11b1ad4104be764e8bc4bcbd7"/>
    <sys_element_mapping action="delete_multiple" query="id=c6debdf11b1ad4104be764e8bc4bcbd7"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>debug</field>
        <id>c6debdf11b1ad4104be764e8bc4bcbd7</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>aadefdf11b1ad4104be764e8bc4bcb2e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_hub_action_output_c6debdf11b1ad4104be764e8bc4bcbd7</table>
        <value>{{step[9c44111f-3494-4908-9eca-f8468b3064d0].debug}}</value>
    </sys_element_mapping>
    <sys_hub_step_instance action="delete_multiple" query="action=c6debdf11b1ad4104be764e8bc4bcbd7^sys_idNOT IN1c6a9e8e1b5fd0504ca7edf9bc4bcb6b,92debdf11b1ad4104be764e8bc4bcbf0,9c6a9e8e1b5fd0504ca7edf9bc4bcb72"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</action>
        <cid>9dbb78b7-5520-401e-99f9-97c761a35d5d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1c6a9e8e1b5fd0504ca7edf9bc4bcb6b</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=1c6a9e8e1b5fd0504ca7edf9bc4bcb6b"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1c6a9e8e1b5fd0504ca7edf9bc4bcb6b</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>586a9e8e1b5fd0504ca7edf9bc4bcb71</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1c6a9e8e1b5fd0504ca7edf9bc4bcb6b</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>946a9e8e1b5fd0504ca7edf9bc4bcb71</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</action>
        <cid>9c44111f-3494-4908-9eca-f8468b3064d0</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>92debdf11b1ad4104be764e8bc4bcbf0</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:53</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=92debdf11b1ad4104be764e8bc4bcbf0"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>92debdf11b1ad4104be764e8bc4bcbf0</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>5edefdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:53</sys_updated_on>
        <value>/* 

This function uploads batches from the ARP, Key Attribute, Property, and Application tables. (In that order.)

For each operation:
1. Pull up to 2000 records and set their status to PROCESSING.
2. Compose a JSON payload or a CSV attachment with the contents.
3. Execute the REST API call and document the results. If it succeeds, set all 1000 records to COMPLETED, otherwise reset them to PENDING.
   - Note: for CSV/ARP uploads, can't actually do a multipart upload in a script due to limitation, have to be executed with IntegrationHub.

Operations should be done precisely in the order of ARP, then Key Attribute, then Property, then Application. However, because more ARPs may come in while the last stack of ARPs is processing, snapshots of the counts of each will be taken at the beginning to ensure that the system doesn't get bogged down doing a handful of ARPs over and over and nothing else.

*/


// ACTION SPECIFIC FUNCTIONS

// CSV encapsulation as per RFC4180. Note that Armis is a bit finicky so I'm just encapsulating and not checking whether I have to.
function csv_encapsulate(str) { return '"' + ('' + str).replace('"','""') + '"' }

// **********************
// *** IMPLEMENTATION ***
// **********************

(function execute(inputs, outputs) {
  
  //Init
  var debug = []
  var start_time = now()
  var execution_id = generateID()
  var api_total = 0 // total time spent on the api
  var heavy_total = 0 // total time spent on sql processing
  var query_limit = 2 //This is how many properties should be processed at once--for each of the operations below, Armis can sustain 2000 at once.
  var max_entries = 1900 //All of the upload functions we're using should be able to handle this many.
  var total_entries = 0
  var total_records_count = 0
  var lap = now()
  var report_string = ''
  var error_message = ''
  var max_seconds = parseInt(inputs.max_seconds)
  if(isNaN(max_seconds)) { max_seconds = 240 }
  
  //Set up initial variables depending on the operation we're executing
  var table = ''
  var payload
  var endpoint = ''
  switch (inputs.operation)
  {
    case 'arp': table = 'x_fmcna_armis_inte_armis_op_arp_table';break
    case 'csv': table = 'x_fmcna_armis_inte_armis_op_key_attribute';break;
    case 'app':
      table = 'x_fmcna_armis_inte_armis_op_application_upload'
      endpoint = "POST Applications"
      break;
    case 'prop':
      table = 'x_fmcna_armis_inte_armis_op_property_upload'
      endpoint = "POST Properties"
      break;  
    default: return
  }
  debug.push("Operation: " + inputs.operation)
  debug.push("Table: " + table)
  
  try
  {
    //Find out potentially how many loops we'll be processing.
    var q = new GlideAggregate(table)
    q.addQuery('status','PENDING')
    q.addAggregate('COUNT')
    q.query()
    var num_pending = 0
    if (q.next()) { num_pending = q.getAggregate('COUNT') }
    var num_loops = Math.ceil(num_pending/max_entries) + 50
    debug.push("Num pending: " + num_pending + " (" + num_loops + " loops) "+lapReport(lap));lap=now()

    //Do the loop!
    //Keep processing queries until we're out of time, out of queries, or another failure has triggered an early abort.
    var loop_counter = 0
    var end_loop_early = false
    debug.push("loop_counter=" + loop_counter + ",num_loops=" + num_loops + ",max_seconds=" + max_seconds +lapReport(lap));lap=now()
    while(loop_counter &lt; num_loops &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      loop_counter++
      debug.push("START LOOP " + loop_counter+lapReport(lap));lap=now()
      
      //Initialize payload
      switch (inputs.operation)
      {
        case 'arp':
          payload = ["ip,mac"]
          break;
        case 'csv':
          payload = ["id,mac,key,value"]
          break;
        case 'app':
        case 'prop':
          payload = []
          break;  
        default: return
      }

      //Get the sys_id of the last entry in our current batch. (See FUNCTION_LIBRARY for details.)
      var end_sys_id = getPendingRecordsEndSysID(max_entries,table)

      //Get two sets of records: one to iterate through, one to updatemultiple() to "COMPLETE" when we're done.
      var rec1 = getNumPendingRecords(max_entries,table,end_sys_id)
      var rec2 = getNumPendingRecords(max_entries,table,end_sys_id)
      debug.push("Records end at sys_id '" + end_sys_id + "', total records (1) " + rec1.getRowCount() + " (2) " + rec2.getRowCount() + " " +lapReport(lap));lap=now()

      //Format: "2020-07-29T15:07:56"
      var lastSeenString = (new GlideDateTime()).getDisplayValue().replace(" ","T")

      var heavy_timer = now()
      var rec_counter = 0
      var rec_time = now()

      //Pull all of the values from our records-to-process.
      while(rec1.next())
      {
        rec_counter++
        total_records_count++
        switch (inputs.operation)
        {
          case 'arp':
            payload.push(rec1.getValue('ip') + "," + rec1.getValue('mac'))
            break;
          case 'csv':
            var device_id = parseInt(rec1.getValue('armis_device_id'))
            if(isNaN(device_id)) { device_id = ''}
            var payload_line = '' + device_id + "," + rec1.getValue('armis_mac') + "," + rec1.getValue('attribute') + "," + csv_encapsulate(rec1.getValue('value'))
            payload.push(payload_line)
            break;
          case 'app':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'name': rec1.getValue('application_name'),
              'application_version': rec1.getValue('version') } } )
            break;
          case 'prop':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'description': rec1.getValue('property_name'),
              'type': rec1.getValue('property_key'),
              'value': rec1.getValue('property_value') } } )
            break;  
          default: return
        }
      }
      debug.push("Processed " + rec_counter + " records. "+lapReport(lap));lap=now()


      //Combine payload.
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          payload = payload.join("\n")
          break;
        case 'app':
        case 'prop':
          payload = JSON.stringify(payload)
      }
      debug.push("Combined payload (" + ('' + payload).length + "): '" + ('' + payload).substring(0,300) + "...' "+lapReport(lap));lap=now()
	
      //Upload payload to Armis. (Or queue attachment for upload.
      var rest_results = {}
      var rest_success = true
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          queueAttachmentREST({id: execution_id, type: inputs.operation.toUpperCase(), payload: payload})
          debug.push("Queued payload for attachment upload. "+lapReport(lap));lap=now()
          break;
        case 'app':
        case 'prop':
          rest_results = executeStandardREST({id: execution_id, endpoint: endpoint, payload: payload, async: false, query_params: []})
          api_total += rest_results.api_time
          debug.push("REST Executed (" + rest_results.api_time + "ms). Result: " + rest_results.response_code + " : '" + ('' + rest_results.response_body).substring(0,300) + "' "+lapReport(lap));lap=now()
          if(rest_results.response_code != 207)
          {
          	rest_success = false
            report_string += '[REST:' + rest_results.response_code + ',' + rest_results.response_body + ']'
          } 
      }
      
      if(rest_success==true)
      {
        //Processed all, mark them complete.
        rec_time = now()
        rec2.setValue('status','COMPLETE')
        rec2.updateMultiple()
        heavy_total += ( now() - heavy_timer )
        debug.push("Marked records as complete. "+lapReport(lap));lap=now()
      }
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + ']'
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }

  //Done looping. Report! Not much to report here except the number of loops we executed, as the REST API log has all the rest of the data.
  report_string += error_message + inputs.operation + ' operation, ' + loop_counter  + ' executions, ' + total_records_count + ' records processed.'
  debug = debug.join('\n')
  if(num_loops &gt; 0) { writeToActionLog({id: execution_id, action_type: 'UP_UploadBatches('+inputs.operation+')', total_time: (now() - start_time), api_time: api_total, heavy_processing_time: heavy_total, report: report_string, debug_string: debug}) }
  
  outputs.debug = debug
  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>92debdf11b1ad4104be764e8bc4bcbf0</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>9adefdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=92debdf11b1ad4104be764e8bc4bcbf0"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>56defdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>d6defdf11b1ad4104be764e8bc4bcb23</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>operation</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>9adefdf11b1ad4104be764e8bc4bcb23</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</table>
        <value>{{action.operation}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>1adefdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=92debdf11b1ad4104be764e8bc4bcbf0^sys_idNOT IN52defdf11b1ad4104be764e8bc4bcb06,dedebdf11b1ad4104be764e8bc4bcbf2"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>operation</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>operation</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>52defdf11b1ad4104be764e8bc4bcb06</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>max_seconds</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dedebdf11b1ad4104be764e8bc4bcbf2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=92debdf11b1ad4104be764e8bc4bcbf0^sys_idNOT IN8cace99a1b1e90104ca7edf9bc4bcb64,dadefdf11b1ad4104be764e8bc4bcb0c"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=32b9c1fb-76e3-4d8b-9640-d0a4c17d940e</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>report</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>report</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 11:11:48</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8cace99a1b1e90104ca7edf9bc4bcb64</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 11:11:48</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=43d13408-838c-41e3-bd14-36ff6a8d5360</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dadefdf11b1ad4104be764e8bc4bcb0c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</action>
        <cid>dc2caecc-71cf-4daf-914d-999f55b23164</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9c6a9e8e1b5fd0504ca7edf9bc4bcb72</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=9c6a9e8e1b5fd0504ca7edf9bc4bcb72"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9c6a9e8e1b5fd0504ca7edf9bc4bcb72</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>146a9e8e1b5fd0504ca7edf9bc4bcb78</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9c6a9e8e1b5fd0504ca7edf9bc4bcb72</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>d46a9e8e1b5fd0504ca7edf9bc4bcb78</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_hub_action_input action="delete_multiple" query="model=c6debdf11b1ad4104be764e8bc4bcbd7^sys_idNOT IN0adebdf11b1ad4104be764e8bc4bcbd8,9adebdf11b1ad4104be764e8bc4bcbe2"/>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=integer,uiTypeLabel=Integer,uiUniqueId=9dd34c62-d723-4356-892b-72c8373f376e</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>30</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Integer">integer</internal_type>
        <label>max_seconds</label>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <model display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</model>
        <model_id>c6debdf11b1ad4104be764e8bc4bcbd7</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>0adebdf11b1ad4104be764e8bc4bcbd8</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=choice,uiTypeLabel=Choice,uiUniqueId=44937559-1e06-479a-9e55-83b57f077326</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice>3</choice>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value>arp</default_value>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>operation</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="Choice">choice</internal_type>
        <label>operation</label>
        <mandatory>false</mandatory>
        <max_length>32</max_length>
        <model display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</model>
        <model_id>c6debdf11b1ad4104be764e8bc4bcbd7</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9adebdf11b1ad4104be764e8bc4bcbe2</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_input>
    <sys_hub_action_output action="delete_multiple" query="model=c6debdf11b1ad4104be764e8bc4bcbd7^sys_idNOT IN26defdf11b1ad4104be764e8bc4bcb26"/>
    <sys_hub_action_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,pwd2droppable=true,uiType=string,uiTypeLabel=String,uiUniqueId=449b114f-4fd3-4a08-a4b3-5722cc0b4731</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_prototype/>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_link/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>false</mandatory>
        <max_length>8000</max_length>
        <model display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</model>
        <model_id>c6debdf11b1ad4104be764e8bc4bcbd7</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_output_c6debdf11b1ad4104be764e8bc4bcbd7</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>26defdf11b1ad4104be764e8bc4bcb26</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_output>
    <sys_hub_step_instance action="delete_multiple" query="action=c6debdf11b1ad4104be764e8bc4bcbd7^sys_idNOT IN1c6a9e8e1b5fd0504ca7edf9bc4bcb6b,92debdf11b1ad4104be764e8bc4bcbf0,9c6a9e8e1b5fd0504ca7edf9bc4bcb72"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</action>
        <cid>9dbb78b7-5520-401e-99f9-97c761a35d5d</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1c6a9e8e1b5fd0504ca7edf9bc4bcb6b</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=1c6a9e8e1b5fd0504ca7edf9bc4bcb6b"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1c6a9e8e1b5fd0504ca7edf9bc4bcb6b</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>586a9e8e1b5fd0504ca7edf9bc4bcb71</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>
// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.11 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Spits out a report string for the tail end of a tebug string. Intended use:
// debug.push("Some report information. " +lapReport(laptimer));laptimer=now()
function lapReport(timer_val)
{
  var str = "(" + (now() - timer_val) + "ms)"
  timer_val = now()
  return str
}

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isIPv6(ip_str)
{
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

function isIPv4(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  return false
}

function isValidIPAddress(ip_str) { return isIPv4(ip_str) || isIPv6(ip_str) }


//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//WRITE TO ERROR LOG
//Writes to the table "Armis Error Log", which is intended to be a mechanism to monitor any errors that occur during actions.
//Param template: writeToErrorLog({id: , error_message: , debug_string: })

//Params:
//[str] id - action ID set by generateID() above
//[str(200)] error_message - error message from the catch block
//[str(10000000)] debug_string - the debug string (already joined) that led up to the error
function writeToErrorLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_error_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['error_message',p.error_message],['debug_string',p.debug_string]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>1c6a9e8e1b5fd0504ca7edf9bc4bcb6b</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>946a9e8e1b5fd0504ca7edf9bc4bcb71</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</action>
        <cid>9c44111f-3494-4908-9eca-f8468b3064d0</cid>
        <extended_inputs/>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>Script step</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>92debdf11b1ad4104be764e8bc4bcbf0</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:53</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=92debdf11b1ad4104be764e8bc4bcbf0"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>92debdf11b1ad4104be764e8bc4bcbf0</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>5edefdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 13:43:53</sys_updated_on>
        <value>/* 

This function uploads batches from the ARP, Key Attribute, Property, and Application tables. (In that order.)

For each operation:
1. Pull up to 2000 records and set their status to PROCESSING.
2. Compose a JSON payload or a CSV attachment with the contents.
3. Execute the REST API call and document the results. If it succeeds, set all 1000 records to COMPLETED, otherwise reset them to PENDING.
   - Note: for CSV/ARP uploads, can't actually do a multipart upload in a script due to limitation, have to be executed with IntegrationHub.

Operations should be done precisely in the order of ARP, then Key Attribute, then Property, then Application. However, because more ARPs may come in while the last stack of ARPs is processing, snapshots of the counts of each will be taken at the beginning to ensure that the system doesn't get bogged down doing a handful of ARPs over and over and nothing else.

*/


// ACTION SPECIFIC FUNCTIONS

// CSV encapsulation as per RFC4180. Note that Armis is a bit finicky so I'm just encapsulating and not checking whether I have to.
function csv_encapsulate(str) { return '"' + ('' + str).replace('"','""') + '"' }

// **********************
// *** IMPLEMENTATION ***
// **********************

(function execute(inputs, outputs) {
  
  //Init
  var debug = []
  var start_time = now()
  var execution_id = generateID()
  var api_total = 0 // total time spent on the api
  var heavy_total = 0 // total time spent on sql processing
  var query_limit = 2 //This is how many properties should be processed at once--for each of the operations below, Armis can sustain 2000 at once.
  var max_entries = 1900 //All of the upload functions we're using should be able to handle this many.
  var total_entries = 0
  var total_records_count = 0
  var lap = now()
  var report_string = ''
  var error_message = ''
  var max_seconds = parseInt(inputs.max_seconds)
  if(isNaN(max_seconds)) { max_seconds = 240 }
  
  //Set up initial variables depending on the operation we're executing
  var table = ''
  var payload
  var endpoint = ''
  switch (inputs.operation)
  {
    case 'arp': table = 'x_fmcna_armis_inte_armis_op_arp_table';break
    case 'csv': table = 'x_fmcna_armis_inte_armis_op_key_attribute';break;
    case 'app':
      table = 'x_fmcna_armis_inte_armis_op_application_upload'
      endpoint = "POST Applications"
      break;
    case 'prop':
      table = 'x_fmcna_armis_inte_armis_op_property_upload'
      endpoint = "POST Properties"
      break;  
    default: return
  }
  debug.push("Operation: " + inputs.operation)
  debug.push("Table: " + table)
  
  try
  {
    //Find out potentially how many loops we'll be processing.
    var q = new GlideAggregate(table)
    q.addQuery('status','PENDING')
    q.addAggregate('COUNT')
    q.query()
    var num_pending = 0
    if (q.next()) { num_pending = q.getAggregate('COUNT') }
    var num_loops = Math.ceil(num_pending/max_entries) + 50
    debug.push("Num pending: " + num_pending + " (" + num_loops + " loops) "+lapReport(lap));lap=now()

    //Do the loop!
    //Keep processing queries until we're out of time, out of queries, or another failure has triggered an early abort.
    var loop_counter = 0
    var end_loop_early = false
    debug.push("loop_counter=" + loop_counter + ",num_loops=" + num_loops + ",max_seconds=" + max_seconds +lapReport(lap));lap=now()
    while(loop_counter &lt; num_loops &amp;&amp; end_loop_early == false &amp;&amp; (now() - start_time) &lt; max_seconds*1000)
    {
      loop_counter++
      debug.push("START LOOP " + loop_counter+lapReport(lap));lap=now()
      
      //Initialize payload
      switch (inputs.operation)
      {
        case 'arp':
          payload = ["ip,mac"]
          break;
        case 'csv':
          payload = ["id,mac,key,value"]
          break;
        case 'app':
        case 'prop':
          payload = []
          break;  
        default: return
      }

      //Get the sys_id of the last entry in our current batch. (See FUNCTION_LIBRARY for details.)
      var end_sys_id = getPendingRecordsEndSysID(max_entries,table)

      //Get two sets of records: one to iterate through, one to updatemultiple() to "COMPLETE" when we're done.
      var rec1 = getNumPendingRecords(max_entries,table,end_sys_id)
      var rec2 = getNumPendingRecords(max_entries,table,end_sys_id)
      debug.push("Records end at sys_id '" + end_sys_id + "', total records (1) " + rec1.getRowCount() + " (2) " + rec2.getRowCount() + " " +lapReport(lap));lap=now()

      //Format: "2020-07-29T15:07:56"
      var lastSeenString = (new GlideDateTime()).getDisplayValue().replace(" ","T")

      var heavy_timer = now()
      var rec_counter = 0
      var rec_time = now()

      //Pull all of the values from our records-to-process.
      while(rec1.next())
      {
        rec_counter++
        total_records_count++
        switch (inputs.operation)
        {
          case 'arp':
            payload.push(rec1.getValue('ip') + "," + rec1.getValue('mac'))
            break;
          case 'csv':
            var device_id = parseInt(rec1.getValue('armis_device_id'))
            if(isNaN(device_id)) { device_id = ''}
            var payload_line = '' + device_id + "," + rec1.getValue('armis_mac') + "," + rec1.getValue('attribute') + "," + csv_encapsulate(rec1.getValue('value'))
            payload.push(payload_line)
            break;
          case 'app':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'name': rec1.getValue('application_name'),
              'application_version': rec1.getValue('version') } } )
            break;
          case 'prop':
            payload.push( { 'upsert': {
              'deviceId': parseInt(rec1.getValue('armis_device_id')),
              'lastSeen': lastSeenString,
              'description': rec1.getValue('property_name'),
              'type': rec1.getValue('property_key'),
              'value': rec1.getValue('property_value') } } )
            break;  
          default: return
        }
      }
      debug.push("Processed " + rec_counter + " records. "+lapReport(lap));lap=now()


      //Combine payload.
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          payload = payload.join("\n")
          break;
        case 'app':
        case 'prop':
          payload = JSON.stringify(payload)
      }
      debug.push("Combined payload (" + ('' + payload).length + "): '" + ('' + payload).substring(0,300) + "...' "+lapReport(lap));lap=now()
	
      //Upload payload to Armis. (Or queue attachment for upload.
      var rest_results = {}
      var rest_success = true
      switch (inputs.operation)
      {
        case 'arp':
        case 'csv':
          queueAttachmentREST({id: execution_id, type: inputs.operation.toUpperCase(), payload: payload})
          debug.push("Queued payload for attachment upload. "+lapReport(lap));lap=now()
          break;
        case 'app':
        case 'prop':
          rest_results = executeStandardREST({id: execution_id, endpoint: endpoint, payload: payload, async: false, query_params: []})
          api_total += rest_results.api_time
          debug.push("REST Executed (" + rest_results.api_time + "ms). Result: " + rest_results.response_code + " : '" + ('' + rest_results.response_body).substring(0,300) + "' "+lapReport(lap));lap=now()
          if(rest_results.response_code != 207)
          {
          	rest_success = false
            report_string += '[REST:' + rest_results.response_code + ',' + rest_results.response_body + ']'
          } 
      }
      
      if(rest_success==true)
      {
        //Processed all, mark them complete.
        rec_time = now()
        rec2.setValue('status','COMPLETE')
        rec2.updateMultiple()
        heavy_total += ( now() - heavy_timer )
        debug.push("Marked records as complete. "+lapReport(lap));lap=now()
      }
    }
  }
  catch(ex)
  {
    error_message = '[ERROR: ' + ex + ']'
    debug.push(error_message)
    writeToErrorLog({id: execution_id, error_message: ex, debug_string: debug.join('\n')})
  }

  //Done looping. Report! Not much to report here except the number of loops we executed, as the REST API log has all the rest of the data.
  report_string += error_message + inputs.operation + ' operation, ' + loop_counter  + ' executions, ' + total_records_count + ' records processed.'
  debug = debug.join('\n')
  if(num_loops &gt; 0) { writeToActionLog({id: execution_id, action_type: 'UP_UploadBatches('+inputs.operation+')', total_time: (now() - start_time), api_time: api_total, heavy_processing_time: heavy_total, report: report_string, debug_string: debug}) }
  
  outputs.debug = debug
  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>92debdf11b1ad4104be764e8bc4bcbf0</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>9adefdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_element_mapping action="delete_multiple" query="id=92debdf11b1ad4104be764e8bc4bcbf0"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>application</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>56defdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>max_seconds</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>d6defdf11b1ad4104be764e8bc4bcb23</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</table>
        <value>{{action.max_seconds}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>operation</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>9adefdf11b1ad4104be764e8bc4bcb23</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</table>
        <value>{{action.operation}}</value>
    </sys_element_mapping>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>script</field>
        <id>92debdf11b1ad4104be764e8bc4bcbf0</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_id>1adefdf11b1ad4104be764e8bc4bcb22</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table>var__m_sys_flow_step_definition_input_106afb6647032200b4fad7527c9a71e7</table>
        <value/>
    </sys_element_mapping>
    <sys_hub_step_ext_input action="delete_multiple" query="model=92debdf11b1ad4104be764e8bc4bcbf0^sys_idNOT IN52defdf11b1ad4104be764e8bc4bcb06,dedebdf11b1ad4104be764e8bc4bcbf2"/>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>operation</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>operation</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>100</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>52defdf11b1ad4104be764e8bc4bcb06</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_input action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>max_seconds</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>max_seconds</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_input_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>0</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_input</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dedebdf11b1ad4104be764e8bc4bcbf2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_input>
    <sys_hub_step_ext_output action="delete_multiple" query="model=92debdf11b1ad4104be764e8bc4bcbf0^sys_idNOT IN8cace99a1b1e90104ca7edf9bc4bcb64,dadefdf11b1ad4104be764e8bc4bcb0c"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=32b9c1fb-76e3-4d8b-9640-d0a4c17d940e</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>report</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>report</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>2</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 11:11:48</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8cace99a1b1e90104ca7edf9bc4bcb64</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 11:11:48</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=43d13408-838c-41e3-bd14-36ff6a8d5360</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="Script step">92debdf11b1ad4104be764e8bc4bcbf0</model>
        <model_id>92debdf11b1ad4104be764e8bc4bcbf0</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_92debdf11b1ad4104be764e8bc4bcbf0</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>dadefdf11b1ad4104be764e8bc4bcb0c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="UP_UploadBatches (v2.2)">c6debdf11b1ad4104be764e8bc4bcbd7</action>
        <cid>dc2caecc-71cf-4daf-914d-999f55b23164</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>lib</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9c6a9e8e1b5fd0504ca7edf9bc4bcb72</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=9c6a9e8e1b5fd0504ca7edf9bc4bcb72"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9c6a9e8e1b5fd0504ca7edf9bc4bcb72</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>146a9e8e1b5fd0504ca7edf9bc4bcb78</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>9c6a9e8e1b5fd0504ca7edf9bc4bcb72</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-09-18 12:56:01</sys_created_on>
        <sys_id>d46a9e8e1b5fd0504ca7edf9bc4bcb78</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-09-18 12:56:01</sys_updated_on>
        <value>
// **************************************
// **** TABLES AND REST LIBRARY v0.17 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , key: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] key - the key for the property
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  if (p.key == null || p.key == "") { p.key = p.name }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['property_key',p.key],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var index_multiplier = 0
  if (p.attribute == "TAG") { index_multiplier = Math.floor(1.0*Math.random()*10000)}
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute],['index_multiplier',index_multiplier]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
//Queues a property, tag, or key attribute depending on what is sent. upload_type should match the upload types in the SNOW Attribute Map.
//Param template: queueAnyAttribute({execution_id: , armis_id: , mac: , snow_field: , value: , upload_type: , is_mapped_upload: , format_as_utc: , armis_attribute_description: , armis_property_key: })
function queueAnyAttribute(p)
{
  var lap = now()
  var debug = []
  //Convert to UTC format if needed
  if(p.format_as_utc == true)
  {
    //UTC format is just a "T" in the place of a space.
    p.value = p.value.replace(' ','T')
    debug.push("Converted value to UTC: " + p.value + lapReport(lap));lap=now()
  }
  
  if(p.is_mapped_upload != true)
  {
    switch(p.upload_type)
    {
      case 'key_attribute':
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: p.armis_property_key, value: p.value});break;
      case 'property':
        queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: p.armis_attribute_description, key: p.armis_property_key, value: p.value});break
      case 'tag':
        p.armis_attribute_description = p.armis_attribute_description.replace("###",p.value)
        queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: p.armis_attribute_description});break;
    }
    debug.push("Queued upload. key=" + p.armis_property_key + ",desc=" + p.armis_attribute_description + ",type=" + p.upload_type + ",value=" + p.value + lapReport(lap));lap=now()
  }
  else
  {
    //We need to process this using the table  Armis SNOW Upload Value Map
    var m = new GlideRecord('x_fmcna_armis_inte_armis_snow_upload_value_map')
    m.addQuery('snow_field',p.snow_field)
    m.addQuery('snow_value',p.value)
    m.query()
    if(m.next())
    {
      debug.push("Processing mapped upload for value '"+p.value+"'" + lapReport(lap));lap=now()
      var types = JSON.parse(m.getValue('armis_types'))
      var keys = JSON.parse(m.getValue('armis_keys'))
      var values = JSON.parse(m.getValue('armis_values'))
      for(var j=0;j&lt;types.length;j++)
      {
        if(values[j] == null || values[j] == "") { continue }
        switch(types[j])
        {
          case 'key_attribute':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: keys[j], value: values[j]});break;
          case 'tag':
            queueKeyAttribute({execution_id: p.execution_id, armis_id: p.armis_id, mac: p.mac, attribute: 'TAG', value: values[j]});break;
          case 'property':
            var keys_split = keys[j].split(",")
            queueProperty({armis_id: p.armis_id, execution_id: p.execution_id, name: keys_split[1], key: keys_split[0], value: values[j]});
        }
        debug.push("Queued " + types[j] + " '" + keys[j] + "':" + values[j] + lapReport(lap));lap=now()
      }
    }
    else
    {
      debug.push("Value '" + p.value + "' not found in Armis SNOW Upload Value Map." + lapReport(lap));lap=now()
      writeToErrorLog({id: p.execution_id, error_message: "Armis SNOW Upload Value Map must contain all possible values found in SNOW CMDB for field '"+p.snow_field+"'. Property was not uploaded due to missing corresponding snow_value entry for '"+ p.value + "'.", debug_string: debug.join('\n')})
    }
  }
  return debug.join("\n")
}

  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}


//This identifies the best MAC to use for uploading to Armis based on a secret sauce matching algorithm:
// 1. If the computer itself is assigned a MAC, that's the MAC to use.
// 2. Otherwise, check the network adapters and weight them:
//    a. 1000 points if the IP is a 10.x.x.x address
//    b. 900 points if the name starts with "Local Area"
//    c. Loses 1 point for each occurrence of the MAC in all of the network adapters.
//    d. Disqualified if the MAC ends in "00:00:01" (a very common dummy MAC)
function getBestMAC(snow_computer)
{
  if(isValidMACAddress(snow_computer.mac_address)) { if(!snow_computer.mac_address.endsWith("00:00:01")) { return snow_computer.mac_address } }

  var q = new GlideRecord('cmdb_ci_network_adapter')
  q.addQuery('cmdb_ci',snow_computer.sys_id)
  q.query()

  var return_mac = null
  var return_weight = -1000
  while(q.next())
  {
    if(!isValidMACAddress(q.mac_address)) { continue }
    if(q.mac_address.endsWith("00:00:01")) { continue }

    var current_weight = 0
    if(('' + q.ip_address).startsWith('10.') ) { current_weight += 1000 }
    if(('' + q.name).startsWith('Local Area')) { current_weight += 900 }

    //Count occurrences of this MAC
    var agg = new GlideAggregate('cmdb_ci_network_adapter')
    agg.addAggregate('COUNT')
    agg.addQuery('mac_address',q.mac_address)
    agg.query()
    
    if(agg.next()) { current_weight -= agg.getAggregate('COUNT') }
    
    if (current_weight &gt; return_weight &amp;&amp; current_weight &gt; 0)
    {
      return_mac = '' + q.mac_address
      return_weight = current_weight
    }
  }

  return return_mac
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = getBestMAC(snow_computer)
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
  return null
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {
  //outputs.debug = queueAnyAttribute({execution_id: generateID(), armis_id: 97914, mac: "00:50:56:a9:36:91", value: "test FQDN", snow_field: "fqdn", upload_type: "property", is_mapped_upload: false, format_as_utc: false, armis_attribute_description: "ServiceNow Last Discovered", armis_property_key: "SERVICENOW_LAST_DISCOVERED"})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "TAG", value: generateID()})
  //outputs.debug = queueKeyAttribute({execution_id: 0, armis_id: 23454, mac: "asdf", attribute: "NAME", value: generateID()})
  
})(inputs, outputs);</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7^sys_idNOT INd2debdf11b1ad4104be764e8bc4bcbe1,d6debdf11b1ad4104be764e8bc4bcbed"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>max_seconds</element>
        <help/>
        <hint/>
        <label>max_seconds</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>d2debdf11b1ad4104be764e8bc4bcbe1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>operation</element>
        <help/>
        <hint/>
        <label>operation</label>
        <language>en</language>
        <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>d6debdf11b1ad4104be764e8bc4bcbed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_choice action="delete_multiple" query="name=var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7^sys_idNOT IN56debdf11b1ad4104be764e8bc4bcbe6,12debdf11b1ad4104be764e8bc4bcbe7,dadebdf11b1ad4104be764e8bc4bcbe7,96debdf11b1ad4104be764e8bc4bcbe8"/>
    <sys_choice field="operation" table="var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7">
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>arp</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
            <sequence>0</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 23:14:27</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>56debdf11b1ad4104be764e8bc4bcbe6</sys_id>
            <sys_mod_count>0</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
            <value>arp</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>prop</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
            <sequence>1</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 23:14:27</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>12debdf11b1ad4104be764e8bc4bcbe7</sys_id>
            <sys_mod_count>0</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
            <value>prop</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>csv</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
            <sequence>2</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 23:14:27</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>dadebdf11b1ad4104be764e8bc4bcbe7</sys_id>
            <sys_mod_count>0</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
            <value>csv</value>
        </sys_choice>
        <sys_choice action="INSERT_OR_UPDATE">
            <dependent_value/>
            <element>operation</element>
            <hint/>
            <inactive>false</inactive>
            <label>app</label>
            <language>en</language>
            <name>var__m_sys_hub_action_input_c6debdf11b1ad4104be764e8bc4bcbd7</name>
            <sequence>3</sequence>
            <sys_created_by>3244578</sys_created_by>
            <sys_created_on>2020-07-29 23:14:27</sys_created_on>
            <sys_domain>global</sys_domain>
            <sys_id>96debdf11b1ad4104be764e8bc4bcbe8</sys_id>
            <sys_mod_count>0</sys_mod_count>
            <sys_updated_by>3244578</sys_updated_by>
            <sys_updated_on>2020-07-29 23:14:27</sys_updated_on>
            <value>app</value>
        </sys_choice>
    </sys_choice>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_output_c6debdf11b1ad4104be764e8bc4bcbd7^sys_idNOT INaadefdf11b1ad4104be764e8bc4bcb2b"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>debug</element>
        <help/>
        <hint/>
        <label>debug</label>
        <language>en</language>
        <name>var__m_sys_hub_action_output_c6debdf11b1ad4104be764e8bc4bcbd7</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-29 23:14:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>aadefdf11b1ad4104be764e8bc4bcb2b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-29 23:14:28</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
</record_update>
