<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_hub_action_type_definition">
    <sys_hub_action_type_definition action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <active>true</active>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <ih_action>false</ih_action>
        <internal_name>debug_sandbox</internal_name>
        <label_cache>[{"name":"{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].variable}}","label":"step➛GENERAL FUNCTION LIBRARY➛variable","type":"step","ref":""},{"name":"{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].debug}}","label":"step➛GENERAL FUNCTION LIBRARY➛debug","type":"step","ref":""},{"name":"{{step[40adef71-a211-4cd4-bade-800daa7b380c].variable}}","label":"step➛CURRENT MINIFIED➛variable","type":"step","ref":""},{"name":"{{step[40adef71-a211-4cd4-bade-800daa7b380c].debug}}","label":"step➛CURRENT MINIFIED➛debug","type":"step","ref":""},{"name":"{{step[76ba4dfd-1b50-48a2-8604-a87006f3ca28].variable}}","label":"step➛SANDBOX➛variable","type":"step","ref":""},{"name":"{{step[76ba4dfd-1b50-48a2-8604-a87006f3ca28].debug}}","label":"step➛SANDBOX➛debug","type":"step","ref":""}]</label_cache>
        <latest_snapshot>2eb459c21b9e18104be764e8bc4bcb9a</latest_snapshot>
        <master_snapshot>a50e35bf1b0ed8104ca7edf9bc4bcb12</master_snapshot>
        <name>FUNCTION_LIBRARY (v2.1)</name>
        <natlang/>
        <outputs/>
        <outputs/>
        <state>draft</state>
        <sys_class_name>sys_hub_action_type_definition</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:05:34</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>148627ba1bc294104ca7edf9bc4bcbaf</sys_id>
        <sys_mod_count>74</sys_mod_count>
        <sys_name>FUNCTION_LIBRARY (v2.1)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name>sys_hub_action_type_definition_148627ba1bc294104ca7edf9bc4bcbaf</sys_update_name>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:57:09</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_definition>
    <sys_variable_value action="delete_multiple" query="document_key=148627ba1bc294104ca7edf9bc4bcbaf"/>
    <sys_element_mapping action="delete_multiple" query="id=148627ba1bc294104ca7edf9bc4bcbaf"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>debug</field>
        <id>148627ba1bc294104ca7edf9bc4bcbaf</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>f307233e1bc294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:52</sys_updated_on>
        <table>var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf</table>
        <value>{{step[76ba4dfd-1b50-48a2-8604-a87006f3ca28].debug}}</value>
    </sys_element_mapping>
    <sys_hub_step_instance action="delete_multiple" query="action=148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT IN050ef1bf1b0ed8104ca7edf9bc4bcb8f,73076f361bc294104ca7edf9bc4bcb6a,a57d849e1b9650104ca7edf9bc4bcb04,f9e4768c1bd29c104ca7edf9bc4bcb09"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>76ba4dfd-1b50-48a2-8604-a87006f3ca28</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>SANDBOX</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:02:58</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>050ef1bf1b0ed8104ca7edf9bc4bcb8f</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:52</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=050ef1bf1b0ed8104ca7edf9bc4bcb8f"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>050ef1bf1b0ed8104ca7edf9bc4bcb8f</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:02:58</sys_created_on>
        <sys_id>850ef1bf1b0ed8104ca7edf9bc4bcb95</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:02:58</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>050ef1bf1b0ed8104ca7edf9bc4bcb8f</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:02:58</sys_created_on>
        <sys_id>8d0ef1bf1b0ed8104ca7edf9bc4bcb95</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:52</sys_updated_on>
        <value>//GENERAL FUNCTION LIBRARY v0.8 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,t){for(var a=0;a&lt;e.length;a++)if(e[a]==t)return!0;return!1}function digest(e){for(var t=5381,a=e.length;a;)t=33*t^e.charCodeAt(--a);return t&gt;&gt;&gt;0}function isValidIPAddress(e){return!!RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e)||!!RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e)}function isValidMACAddress(e){return RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$").test(e)}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var t=6;t&gt;0;t--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var t={},a=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var r=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var i=0;i&lt;e.unique_pairs.length;i++)r.addQuery(e.unique_pairs[i][0],e.unique_pairs[i][1]);r.query()}if(0==r.getRowCount()){r.initialize();for(i=0;i&lt;e.unique_pairs.length;i++)r[e.unique_pairs[i][0]]=e.unique_pairs[i][1];for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.insert(),t.operation="insert"}else{for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.updateMultiple(),t.operation="update"}}catch(e){t.operation="error: "+e}return t.time_delta=now()-a,t}function writeToActionLog(e){var t={table:"x_fmcna_armis_inte_armis_action_log"};return t.unique_pairs=[["execution_id",e.id]],t.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",e.report.substring(0,199)],["debug_string",e.debug_string.substring(0,1999)]],insertOrUpdate(t)}function getConfigValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return t.addQuery("key",e),t.query(),0==t.getRowCount()?"":(t.next(),t.getValue("value"))}function getCacheValue(e,t){var a=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(a.addQuery("key",e),a.query(),0==a.getRowCount())return null;switch(a.next(),t){case"str":return a.getValue("value_string");case"int":return a.getValue("value_int");case"datetime":return a.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,t,a){var r={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(r.unique_pairs=[["key",e]],a){case"str":r.update_pairs=[["value_string",t]];break;case"int":r.update_pairs=[["value_int",t]];break;case"datetime":r.update_pairs=[["value_datetime",t]]}return insertOrUpdate(r)}function deleteCacheValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");t.addQuery("key",e),t.query(),t.deleteMultiple()}

//'TABLES AND REST' FUNCTION LIBRARY v0.8 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var t={table:"x_fmcna_armis_inte_armis_rest_api_log"};return t.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",e.payload.substring(0,1999)],["response_code",e.response_code],["response_body",e.response_body.substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(t)}function queueProperty(e){if(null==e.name||""==e.name)return{operation:"error: empty name",time_delta:0};if(null==e.value||""==e.value)return{operation:"error: empty value",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_property_upload"};return t.update_pairs=[["armis_device_id",e.armis_id],["property_name",e.name],["property_value",e.value],["execution_id",e.execution_id],["status","PENDING"]],insertOrUpdate(t)}function queueARP(e){if(null==e.mac||""==e.mac)return{operation:"error: empty mac",time_delta:0};if(null==e.ip||""==e.ip)return{operation:"error: empty ip",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_arp_table"};return t.update_pairs=[["execution_id",e.execution_id],["mac",e.mac],["ip",e.ip],["status","PENDING"]],insertOrUpdate(t)}function queueKeyAttribute(e){if(!(null!=e.armis_id&amp;&amp;""!=e.armis_id||null!=e.mac&amp;&amp;""!=e.mac))return{operation:"error: must have either a MAC or an Armis ID",time_delta:0};if(allowed_attributes=["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"],0==includes(allowed_attributes,e.attribute))return{operation:"error: attribute '"+e.attribute+"' is not valid.",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_key_attribute"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["armis_mac",e.mac],["attribute",e.attribute],["value",e.value],["status","PENDING"]],insertOrUpdate(t)}function queueApplication(e){if(null==e.armis_id||""==e.armis_id)return{operation:"error: Armis ID cannot be empty",time_delta:0};if(null==e.name||""==e.name)return{operation:"error: Software name cannot be empty",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_application_upload"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["application_name",e.name],["application_version",e.version],["status","PENDING"]],insertOrUpdate(t)}function executeStandardREST(e){try{var t=new GlideDateTime,i=new sn_ws.RESTMessageV2("Armis API",e.endpoint);i.setRequestHeader("Authorization",getCurrentToken()),i.setRequestHeader("accept","application/json"),i.setRequestHeader("content-type","application/json"),null==e.query_params&amp;&amp;(e.query_params=[]);for(var a=0;a&lt;e.query_params.length;a++)i.setQueryParameter(e.query_params[a][0],e.query_params[a][1]);i.setRequestBody(e.payload);var r,n=now(),u={};return 1==e.async?r=i.executeAsync():(r=i.execute(),u.response_code=r.getStatusCode(),u.response_body=r.getBody()),u.api_time=now()-n,writeToAPILog({id:e.id,endpoint:e.endpoint,payload:e.payload,response_code:u.response_code,response_body:u.response_body,start_time:t,time_delta_ms:u.api_time}),u}catch(e){return(u={response_code:"xx"}).response_body="Failed to build query. "+e,u.api_time=0,u}}function queueAttachmentREST(e){var t=new GlideRecord("sys_attachment"),i=(new GlideSysAttachment).write(t,e.id+".csv","text/plain",e.payload),a=new GlideRecord("x_fmcna_armis_inte_armis_attachment_upload");a.initialize(),a.attachment=i,a.execution_id=e.id,a.status="PENDING",a.type=e.type,a.insert()}function queueInitialARPandCSV(e,t){var i=e.mac_address,a=e.ip_address;isValidMACAddress(i)&amp;&amp;isValidIPAddress(a)&amp;&amp;(queueARP({execution_id:t,mac:i,ip:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"IP",value:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"TAG",value:getConfigValue("armis_import_universal_tag")}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"LAST_SEEN",value:(new GlideDateTime).getDisplayValue().replace(" ","T")}),null!=e.model_id&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"MODEL",value:e.model_id.getDisplayValue()}),null!=e.os&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS",value:e.os.getDisplayValue()}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS_VERSION",value:e.os_version}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"USER",value:e.users}))}function getPendingRecordsEndSysID(e,t,i){null==i&amp;&amp;(i={}),null==i.force_field&amp;&amp;(i.force_field="status"),null==i.force_pending&amp;&amp;(i.force_pending="PENDING");var a=new GlideRecord(t);for(a.addQuery(i.force_field,i.force_pending),a.setLimit(e),a.orderBy("sys_id"),a.query();a.next();)if(0==a.hasNext())return a.getValue("sys_id")}function getNumPendingRecords(e,t,i,a){null==a&amp;&amp;(a={}),null==a.force_field&amp;&amp;(a.force_field="status"),null==a.force_pending&amp;&amp;(a.force_pending="PENDING");var r=new GlideRecord(t);return r.addQuery(a.force_field,a.force_pending),r.setLimit(e),r.orderBy("sys_id"),r.addQuery("sys_id","&lt;=",i),r.query(),r}

(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=050ef1bf1b0ed8104ca7edf9bc4bcb8f^sys_idNOT INc2ad889e1b9650104ca7edf9bc4bcb11"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=05619205-8719-46f9-a7f2-8166007413d7</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="SANDBOX">050ef1bf1b0ed8104ca7edf9bc4bcb8f</model>
        <model_id>050ef1bf1b0ed8104ca7edf9bc4bcb8f</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_050ef1bf1b0ed8104ca7edf9bc4bcb8f</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:52</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c2ad889e1b9650104ca7edf9bc4bcb11</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:52</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>GENERAL FUNCTION LIBRARY</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>73076f361bc294104ca7edf9bc4bcb6a</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:02:10</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=73076f361bc294104ca7edf9bc4bcb6a"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7707233e1bc294104ca7edf9bc4bcbd0</sys_id>
        <sys_mod_count>50</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:02:10</sys_updated_on>
        <value>//GENERAL FUNCTION LIBRARY v0.8 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,t){for(var a=0;a&lt;e.length;a++)if(e[a]==t)return!0;return!1}function digest(e){for(var t=5381,a=e.length;a;)t=33*t^e.charCodeAt(--a);return t&gt;&gt;&gt;0}function isValidIPAddress(e){return!!RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e)||!!RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e)}function isValidMACAddress(e){return RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$").test(e)}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var t=6;t&gt;0;t--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var t={},a=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var r=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var i=0;i&lt;e.unique_pairs.length;i++)r.addQuery(e.unique_pairs[i][0],e.unique_pairs[i][1]);r.query()}if(0==r.getRowCount()){r.initialize();for(i=0;i&lt;e.unique_pairs.length;i++)r[e.unique_pairs[i][0]]=e.unique_pairs[i][1];for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.insert(),t.operation="insert"}else{for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.updateMultiple(),t.operation="update"}}catch(e){t.operation="error: "+e}return t.time_delta=now()-a,t}function writeToActionLog(e){var t={table:"x_fmcna_armis_inte_armis_action_log"};return t.unique_pairs=[["execution_id",e.id]],t.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",(""+e.report).substring(0,199)],["debug_string",(""+e.debug_string).substring(0,1999)]],insertOrUpdate(t)}function getConfigValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return t.addQuery("key",e),t.query(),0==t.getRowCount()?"":(t.next(),t.getValue("value"))}function getCacheValue(e,t){var a=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(a.addQuery("key",e),a.query(),0==a.getRowCount())return null;switch(a.next(),t){case"str":return a.getValue("value_string");case"int":return a.getValue("value_int");case"datetime":return a.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,t,a){var r={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(r.unique_pairs=[["key",e]],a){case"str":r.update_pairs=[["value_string",t]];break;case"int":r.update_pairs=[["value_int",t]];break;case"datetime":r.update_pairs=[["value_datetime",t]]}return insertOrUpdate(r)}function deleteCacheValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");t.addQuery("key",e),t.query(),t.deleteMultiple()}

// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.8 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isValidIPAddress(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7f07233e1bc294104ca7edf9bc4bcbcf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=73076f361bc294104ca7edf9bc4bcb6a^sys_idNOT IN7307233e1bc294104ca7edf9bc4bcbc6"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=3dd8b4c7-0a82-4a9d-9b1d-faa37e6b9813</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="GENERAL FUNCTION LIBRARY">73076f361bc294104ca7edf9bc4bcb6a</model>
        <model_id>73076f361bc294104ca7edf9bc4bcb6a</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_73076f361bc294104ca7edf9bc4bcb6a</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7307233e1bc294104ca7edf9bc4bcbc6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>7e3093fa-5401-4e0f-86dd-d4ec1f8437ff</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>TABLES AND REST</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:02</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a57d849e1b9650104ca7edf9bc4bcb04</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:57:09</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=a57d849e1b9650104ca7edf9bc4bcb04"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>a57d849e1b9650104ca7edf9bc4bcb04</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:02</sys_created_on>
        <sys_id>317d849e1b9650104ca7edf9bc4bcb0b</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:57:09</sys_updated_on>
        <value>//'TABLES AND REST' FUNCTION LIBRARY v0.11 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var t={table:"x_fmcna_armis_inte_armis_rest_api_log"};return t.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",(""+e.payload).substring(0,1999)],["response_code",e.response_code],["response_body",(""+e.response_body).substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(t)}function queueProperty(e){if(null==e.name||""==e.name)return{operation:"error: empty name",time_delta:0};if(null==e.value||""==e.value)return{operation:"error: empty value",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_property_upload"};return t.unique_pairs=[["armis_device_id",e.armis_id],["property_name",e.name]],t.update_pairs=[["property_value",e.value],["execution_id",e.execution_id],["status","PENDING"]],insertOrUpdate(t)}function queueARP(e){if(null==e.mac||""==e.mac)return{operation:"error: empty mac",time_delta:0};if(null==e.ip||""==e.ip)return{operation:"error: empty ip",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_arp_table"};return t.update_pairs=[["execution_id",e.execution_id],["mac",e.mac],["ip",e.ip],["status","PENDING"]],insertOrUpdate(t)}function queueKeyAttribute(e){if(!(null!=e.armis_id&amp;&amp;""!=e.armis_id||null!=e.mac&amp;&amp;""!=e.mac))return{operation:"error: must have either a MAC or an Armis ID",time_delta:0};if(allowed_attributes=["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"],0==includes(allowed_attributes,e.attribute))return{operation:"error: attribute '"+e.attribute+"' is not valid.",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_key_attribute"};return t.unique_pairs=[["armis_mac",e.mac],["attribute",e.attribute]],t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.armis_id],["value",e.value],["status","PENDING"]],insertOrUpdate(t)}function queueApplication(e){if(null==e.armis_id||""==e.armis_id)return{operation:"error: Armis ID cannot be empty",time_delta:0};if(null==e.name||""==e.name)return{operation:"error: Software name cannot be empty",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_application_upload"};return t.unique_pairs=[["armis_device_id",e.armis_id],["application_name",e.name]],t.update_pairs=[["execution_id",e.execution_id],["application_version",e.version],["status","PENDING"]],insertOrUpdate(t)}function executeStandardREST(e){try{var t=new GlideDateTime,i=new sn_ws.RESTMessageV2("Armis API",e.endpoint);i.setRequestHeader("Authorization",getCurrentToken()),i.setRequestHeader("accept","application/json"),i.setRequestHeader("content-type","application/json"),null==e.query_params&amp;&amp;(e.query_params=[]);for(var a=0;a&lt;e.query_params.length;a++)i.setQueryParameter(e.query_params[a][0],e.query_params[a][1]);i.setRequestBody(e.payload);var r,n=now(),u={};return 1==e.async?r=i.executeAsync():(r=i.execute(),u.response_code=r.getStatusCode(),u.response_body=r.getBody()),u.api_time=now()-n,writeToAPILog({id:e.id,endpoint:e.endpoint,payload:e.payload,response_code:u.response_code,response_body:u.response_body,start_time:t,time_delta_ms:u.api_time}),u}catch(e){return(u={response_code:"xx"}).response_body="Failed to build query. "+e,u.api_time=0,u}}function queueAttachmentREST(e){var t=new GlideRecord("sys_attachment"),i=(new GlideSysAttachment).write(t,e.id+".csv","text/plain",e.payload),a=new GlideRecord("x_fmcna_armis_inte_armis_attachment_upload");a.initialize(),a.attachment=i,a.execution_id=e.id,a.status="PENDING",a.type=e.type,a.content=e.payload,a.insert()}function queueInitialARPandCSV(e,t){var i=e.mac_address,a=e.ip_address;isValidMACAddress(i)&amp;&amp;isValidIPAddress(a)&amp;&amp;(queueARP({execution_id:t,mac:i,ip:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"NAME",value:""+e.name}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"IP",value:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"TAG",value:getConfigValue("armis_import_universal_tag")}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"LAST_SEEN",value:(new GlideDateTime).getDisplayValue().replace(" ","T")}),null!=e.model_id&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"MODEL",value:e.model_id.getDisplayValue()}),null!=e.os&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS",value:e.os.getDisplayValue()}),null!=e.os_version&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS_VERSION",value:e.os_version}),null!=e.users&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"USER",value:e.users}))}function getPendingRecordsEndSysID(e,t,i){null==i&amp;&amp;(i={}),null==i.force_field&amp;&amp;(i.force_field="status"),null==i.force_pending&amp;&amp;(i.force_pending="PENDING");var a=new GlideRecord(t);for(a.addQuery(i.force_field,i.force_pending),a.setLimit(e),a.orderBy("sys_id"),a.query();a.next();)if(0==a.hasNext())return a.getValue("sys_id")}function getNumPendingRecords(e,t,i,a){null==a&amp;&amp;(a={}),null==a.force_field&amp;&amp;(a.force_field="status"),null==a.force_pending&amp;&amp;(a.force_pending="PENDING");var r=new GlideRecord(t);return r.addQuery(a.force_field,a.force_pending),r.setLimit(e),r.orderBy("sys_id"),r.addQuery("sys_id","&lt;=",i),r.query(),r}


// **************************************
// **** TABLES AND REST LIBRARY v0.11 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = snow_computer.mac_address
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'TAG', value: getConfigValue('armis_import_universal_tag')})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'LAST_SEEN', value: (new GlideDateTime()).getDisplayValue().replace(' ','T')})
      if(snow_computer.model_id != null) { queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'MODEL', value: snow_computer.model_id.getDisplayValue()}) }
      if(snow_computer.os != null) { queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'OS', value: snow_computer.os.getDisplayValue()}) }
      if(snow_computer.os_version != null) {queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'OS_VERSION', value: snow_computer.os_version}) }
      if(snow_computer.users != null) {queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'USER', value: snow_computer.users}) }
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {

  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>a57d849e1b9650104ca7edf9bc4bcb04</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:02</sys_created_on>
        <sys_id>397d849e1b9650104ca7edf9bc4bcb0a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:02</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>a73465c8-4eec-4248-8884-9f03a895f380</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>UPDATE ARMIS DEVICE</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 16:41:16</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f9e4768c1bd29c104ca7edf9bc4bcb09</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 15:00:40</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=f9e4768c1bd29c104ca7edf9bc4bcb09"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f9e4768c1bd29c104ca7edf9bc4bcb09</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 16:41:16</sys_created_on>
        <sys_id>86e4768c1bd29c104ca7edf9bc4bcb10</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 15:00:40</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    if(j.sensor != null) { device.sensor_name = j.sensor.name }
    if(j.sensor != null) { device.sensor_type = j.sensor.type }
    if(j.site != null) { device.site = j.site.name }
    if(j.site != null) { device.site_location = j.site.location }
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}

// MINIFIED

function updateArmisDevice(e,i){var s=(new GlideDateTime).getNumericValue(),a={},t=new GlideRecord("x_fmcna_armis_inte_armis_device_table"),r=digest(JSON.stringify(e));a.digest=r,t.addQuery("armis_device_id",e.id),t.query();var n=0==t.getRowCount();n?t.initialize():t.next(),a.is_insert=n;var d,_=!0;if(n||t.getValue("digest")!=r||(_=!1),a.perform=_,a.digest_existing=t.getValue("digest"),_){if(t.access_switch=e.accessSwitch,t.armis_device_id=e.id,t.armis_risk_level=e.riskLevel,t.category=e.category,t.first_seen=new GlideDateTime(e.firstSeen),t.ip_address=e.ipAddress,t.last_seen=new GlideDateTime(e.lastSeen),t.mac_address=e.macAddress,t.manufacturer=e.manufacturer,t.model=e.model,t.name=e.name,t.os=e.operatingSystem,t.os_version=e.operatingSystemVersion,null!=e.sensor&amp;&amp;(t.sensor_name=e.sensor.name),null!=e.sensor&amp;&amp;(t.sensor_type=e.sensor.type),null!=e.site&amp;&amp;(t.site=e.site.name),null!=e.site&amp;&amp;(t.site_location=e.site.location),t.armis_tags=JSON.stringify(e.tags),t.visibility=e.visibility,t.digest=r,n?(d=t.insert(),a.action="insert"):(d=t.update(),a.action="update"),a.record=d,i){null==e.tags&amp;&amp;(e.tags=[]);var l=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");l.addQuery("armis_device",d),l.query();for(var m=[];l.next();){var c=l.getValue("armis_tag");includes(m,l.getValue("armis_tag"))?m.push(c):l.deleteRecord()}for(var o=0;o&lt;e.tags.length;o++)if(!includes(m,e.tags[o])){var g=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");g.initialize(),g.armis_device=d,g.armis_tag=e.tags[o],g.insert()}}}else a.action="no_update_needed";return a.time_delta=(new GlideDateTime).getNumericValue()-s,a}


(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f9e4768c1bd29c104ca7edf9bc4bcb09</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 16:41:16</sys_created_on>
        <sys_id>8ee4768c1bd29c104ca7edf9bc4bcb0f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 16:41:16</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_action_output action="delete_multiple" query="model=148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT INbf07233e1bc294104ca7edf9bc4bcbd2"/>
    <sys_hub_action_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,pwd2droppable=true,uiType=string,uiTypeLabel=String,uiUniqueId=8f49d6ee-1463-42d9-a53f-6980e4241c94</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_prototype/>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_link/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>false</mandatory>
        <max_length>8000</max_length>
        <model display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</model>
        <model_id>148627ba1bc294104ca7edf9bc4bcbaf</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>bf07233e1bc294104ca7edf9bc4bcbd2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_output>
    <sys_hub_step_instance action="delete_multiple" query="action=148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT IN050ef1bf1b0ed8104ca7edf9bc4bcb8f,73076f361bc294104ca7edf9bc4bcb6a,a57d849e1b9650104ca7edf9bc4bcb04,f9e4768c1bd29c104ca7edf9bc4bcb09"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>76ba4dfd-1b50-48a2-8604-a87006f3ca28</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>SANDBOX</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:02:58</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>050ef1bf1b0ed8104ca7edf9bc4bcb8f</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:52</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=050ef1bf1b0ed8104ca7edf9bc4bcb8f"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>050ef1bf1b0ed8104ca7edf9bc4bcb8f</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:02:58</sys_created_on>
        <sys_id>850ef1bf1b0ed8104ca7edf9bc4bcb95</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:02:58</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>050ef1bf1b0ed8104ca7edf9bc4bcb8f</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:02:58</sys_created_on>
        <sys_id>8d0ef1bf1b0ed8104ca7edf9bc4bcb95</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:52</sys_updated_on>
        <value>//GENERAL FUNCTION LIBRARY v0.8 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,t){for(var a=0;a&lt;e.length;a++)if(e[a]==t)return!0;return!1}function digest(e){for(var t=5381,a=e.length;a;)t=33*t^e.charCodeAt(--a);return t&gt;&gt;&gt;0}function isValidIPAddress(e){return!!RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e)||!!RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e)}function isValidMACAddress(e){return RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$").test(e)}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var t=6;t&gt;0;t--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var t={},a=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var r=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var i=0;i&lt;e.unique_pairs.length;i++)r.addQuery(e.unique_pairs[i][0],e.unique_pairs[i][1]);r.query()}if(0==r.getRowCount()){r.initialize();for(i=0;i&lt;e.unique_pairs.length;i++)r[e.unique_pairs[i][0]]=e.unique_pairs[i][1];for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.insert(),t.operation="insert"}else{for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.updateMultiple(),t.operation="update"}}catch(e){t.operation="error: "+e}return t.time_delta=now()-a,t}function writeToActionLog(e){var t={table:"x_fmcna_armis_inte_armis_action_log"};return t.unique_pairs=[["execution_id",e.id]],t.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",e.report.substring(0,199)],["debug_string",e.debug_string.substring(0,1999)]],insertOrUpdate(t)}function getConfigValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return t.addQuery("key",e),t.query(),0==t.getRowCount()?"":(t.next(),t.getValue("value"))}function getCacheValue(e,t){var a=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(a.addQuery("key",e),a.query(),0==a.getRowCount())return null;switch(a.next(),t){case"str":return a.getValue("value_string");case"int":return a.getValue("value_int");case"datetime":return a.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,t,a){var r={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(r.unique_pairs=[["key",e]],a){case"str":r.update_pairs=[["value_string",t]];break;case"int":r.update_pairs=[["value_int",t]];break;case"datetime":r.update_pairs=[["value_datetime",t]]}return insertOrUpdate(r)}function deleteCacheValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");t.addQuery("key",e),t.query(),t.deleteMultiple()}

//'TABLES AND REST' FUNCTION LIBRARY v0.8 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var t={table:"x_fmcna_armis_inte_armis_rest_api_log"};return t.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",e.payload.substring(0,1999)],["response_code",e.response_code],["response_body",e.response_body.substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(t)}function queueProperty(e){if(null==e.name||""==e.name)return{operation:"error: empty name",time_delta:0};if(null==e.value||""==e.value)return{operation:"error: empty value",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_property_upload"};return t.update_pairs=[["armis_device_id",e.armis_id],["property_name",e.name],["property_value",e.value],["execution_id",e.execution_id],["status","PENDING"]],insertOrUpdate(t)}function queueARP(e){if(null==e.mac||""==e.mac)return{operation:"error: empty mac",time_delta:0};if(null==e.ip||""==e.ip)return{operation:"error: empty ip",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_arp_table"};return t.update_pairs=[["execution_id",e.execution_id],["mac",e.mac],["ip",e.ip],["status","PENDING"]],insertOrUpdate(t)}function queueKeyAttribute(e){if(!(null!=e.armis_id&amp;&amp;""!=e.armis_id||null!=e.mac&amp;&amp;""!=e.mac))return{operation:"error: must have either a MAC or an Armis ID",time_delta:0};if(allowed_attributes=["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"],0==includes(allowed_attributes,e.attribute))return{operation:"error: attribute '"+e.attribute+"' is not valid.",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_key_attribute"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["armis_mac",e.mac],["attribute",e.attribute],["value",e.value],["status","PENDING"]],insertOrUpdate(t)}function queueApplication(e){if(null==e.armis_id||""==e.armis_id)return{operation:"error: Armis ID cannot be empty",time_delta:0};if(null==e.name||""==e.name)return{operation:"error: Software name cannot be empty",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_application_upload"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["application_name",e.name],["application_version",e.version],["status","PENDING"]],insertOrUpdate(t)}function executeStandardREST(e){try{var t=new GlideDateTime,i=new sn_ws.RESTMessageV2("Armis API",e.endpoint);i.setRequestHeader("Authorization",getCurrentToken()),i.setRequestHeader("accept","application/json"),i.setRequestHeader("content-type","application/json"),null==e.query_params&amp;&amp;(e.query_params=[]);for(var a=0;a&lt;e.query_params.length;a++)i.setQueryParameter(e.query_params[a][0],e.query_params[a][1]);i.setRequestBody(e.payload);var r,n=now(),u={};return 1==e.async?r=i.executeAsync():(r=i.execute(),u.response_code=r.getStatusCode(),u.response_body=r.getBody()),u.api_time=now()-n,writeToAPILog({id:e.id,endpoint:e.endpoint,payload:e.payload,response_code:u.response_code,response_body:u.response_body,start_time:t,time_delta_ms:u.api_time}),u}catch(e){return(u={response_code:"xx"}).response_body="Failed to build query. "+e,u.api_time=0,u}}function queueAttachmentREST(e){var t=new GlideRecord("sys_attachment"),i=(new GlideSysAttachment).write(t,e.id+".csv","text/plain",e.payload),a=new GlideRecord("x_fmcna_armis_inte_armis_attachment_upload");a.initialize(),a.attachment=i,a.execution_id=e.id,a.status="PENDING",a.type=e.type,a.insert()}function queueInitialARPandCSV(e,t){var i=e.mac_address,a=e.ip_address;isValidMACAddress(i)&amp;&amp;isValidIPAddress(a)&amp;&amp;(queueARP({execution_id:t,mac:i,ip:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"IP",value:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"TAG",value:getConfigValue("armis_import_universal_tag")}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"LAST_SEEN",value:(new GlideDateTime).getDisplayValue().replace(" ","T")}),null!=e.model_id&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"MODEL",value:e.model_id.getDisplayValue()}),null!=e.os&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS",value:e.os.getDisplayValue()}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS_VERSION",value:e.os_version}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"USER",value:e.users}))}function getPendingRecordsEndSysID(e,t,i){null==i&amp;&amp;(i={}),null==i.force_field&amp;&amp;(i.force_field="status"),null==i.force_pending&amp;&amp;(i.force_pending="PENDING");var a=new GlideRecord(t);for(a.addQuery(i.force_field,i.force_pending),a.setLimit(e),a.orderBy("sys_id"),a.query();a.next();)if(0==a.hasNext())return a.getValue("sys_id")}function getNumPendingRecords(e,t,i,a){null==a&amp;&amp;(a={}),null==a.force_field&amp;&amp;(a.force_field="status"),null==a.force_pending&amp;&amp;(a.force_pending="PENDING");var r=new GlideRecord(t);return r.addQuery(a.force_field,a.force_pending),r.setLimit(e),r.orderBy("sys_id"),r.addQuery("sys_id","&lt;=",i),r.query(),r}

(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=050ef1bf1b0ed8104ca7edf9bc4bcb8f^sys_idNOT INc2ad889e1b9650104ca7edf9bc4bcb11"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=05619205-8719-46f9-a7f2-8166007413d7</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="SANDBOX">050ef1bf1b0ed8104ca7edf9bc4bcb8f</model>
        <model_id>050ef1bf1b0ed8104ca7edf9bc4bcb8f</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_050ef1bf1b0ed8104ca7edf9bc4bcb8f</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:52</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c2ad889e1b9650104ca7edf9bc4bcb11</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:52</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>GENERAL FUNCTION LIBRARY</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>73076f361bc294104ca7edf9bc4bcb6a</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:02:10</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=73076f361bc294104ca7edf9bc4bcb6a"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7707233e1bc294104ca7edf9bc4bcbd0</sys_id>
        <sys_mod_count>50</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 08:02:10</sys_updated_on>
        <value>//GENERAL FUNCTION LIBRARY v0.8 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,t){for(var a=0;a&lt;e.length;a++)if(e[a]==t)return!0;return!1}function digest(e){for(var t=5381,a=e.length;a;)t=33*t^e.charCodeAt(--a);return t&gt;&gt;&gt;0}function isValidIPAddress(e){return!!RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e)||!!RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e)}function isValidMACAddress(e){return RegExp("^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$").test(e)}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var t=6;t&gt;0;t--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var t={},a=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var r=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var i=0;i&lt;e.unique_pairs.length;i++)r.addQuery(e.unique_pairs[i][0],e.unique_pairs[i][1]);r.query()}if(0==r.getRowCount()){r.initialize();for(i=0;i&lt;e.unique_pairs.length;i++)r[e.unique_pairs[i][0]]=e.unique_pairs[i][1];for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.insert(),t.operation="insert"}else{for(i=0;i&lt;e.update_pairs.length;i++)r[e.update_pairs[i][0]]=e.update_pairs[i][1];r.updateMultiple(),t.operation="update"}}catch(e){t.operation="error: "+e}return t.time_delta=now()-a,t}function writeToActionLog(e){var t={table:"x_fmcna_armis_inte_armis_action_log"};return t.unique_pairs=[["execution_id",e.id]],t.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",(""+e.report).substring(0,199)],["debug_string",(""+e.debug_string).substring(0,1999)]],insertOrUpdate(t)}function getConfigValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return t.addQuery("key",e),t.query(),0==t.getRowCount()?"":(t.next(),t.getValue("value"))}function getCacheValue(e,t){var a=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(a.addQuery("key",e),a.query(),0==a.getRowCount())return null;switch(a.next(),t){case"str":return a.getValue("value_string");case"int":return a.getValue("value_int");case"datetime":return a.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,t,a){var r={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(r.unique_pairs=[["key",e]],a){case"str":r.update_pairs=[["value_string",t]];break;case"int":r.update_pairs=[["value_int",t]];break;case"datetime":r.update_pairs=[["value_datetime",t]]}return insertOrUpdate(r)}function deleteCacheValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");t.addQuery("key",e),t.query(),t.deleteMultiple()}

// ***************************************
// **** GENERAL FUNCTION LIBRARY v0.8 ****
// ***************************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//Check validity of IP
//Regex stolen from https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames
function isValidIPAddress(ip_str)
{
  if ( RegExp('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$').test(ip_str)) { return true }
  if ( RegExp('^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$').test(ip_str)) { return true}
  return false
}

//Check validity of MAC
//Regex stolen from https://www.geeksforgeeks.org/how-to-validate-mac-address-using-regular-expression/#:~:text=Get%20the%20String.,fA%2DF%5D%7B4%7D%5C%5C.
function isValidMACAddress(mac_str) { return RegExp('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})$').test(mac_str) }

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}




//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',('' + p.report).substring(0,199)],['debug_string',('' + p.debug_string).substring(0,1999)]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}







// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7f07233e1bc294104ca7edf9bc4bcbcf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=73076f361bc294104ca7edf9bc4bcb6a^sys_idNOT IN7307233e1bc294104ca7edf9bc4bcbc6"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=3dd8b4c7-0a82-4a9d-9b1d-faa37e6b9813</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="GENERAL FUNCTION LIBRARY">73076f361bc294104ca7edf9bc4bcb6a</model>
        <model_id>73076f361bc294104ca7edf9bc4bcb6a</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_73076f361bc294104ca7edf9bc4bcb6a</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7307233e1bc294104ca7edf9bc4bcbc6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>7e3093fa-5401-4e0f-86dd-d4ec1f8437ff</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>TABLES AND REST</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:02</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a57d849e1b9650104ca7edf9bc4bcb04</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:57:09</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=a57d849e1b9650104ca7edf9bc4bcb04"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>a57d849e1b9650104ca7edf9bc4bcb04</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:02</sys_created_on>
        <sys_id>317d849e1b9650104ca7edf9bc4bcb0b</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 10:57:09</sys_updated_on>
        <value>//'TABLES AND REST' FUNCTION LIBRARY v0.11 MINIFIED
//SEE FUNCTION_LIBRARY ACTION FOR DOCUMENTATION AND FULL VERSION
function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var t={table:"x_fmcna_armis_inte_armis_rest_api_log"};return t.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",(""+e.payload).substring(0,1999)],["response_code",e.response_code],["response_body",(""+e.response_body).substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(t)}function queueProperty(e){if(null==e.name||""==e.name)return{operation:"error: empty name",time_delta:0};if(null==e.value||""==e.value)return{operation:"error: empty value",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_property_upload"};return t.unique_pairs=[["armis_device_id",e.armis_id],["property_name",e.name]],t.update_pairs=[["property_value",e.value],["execution_id",e.execution_id],["status","PENDING"]],insertOrUpdate(t)}function queueARP(e){if(null==e.mac||""==e.mac)return{operation:"error: empty mac",time_delta:0};if(null==e.ip||""==e.ip)return{operation:"error: empty ip",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_arp_table"};return t.update_pairs=[["execution_id",e.execution_id],["mac",e.mac],["ip",e.ip],["status","PENDING"]],insertOrUpdate(t)}function queueKeyAttribute(e){if(!(null!=e.armis_id&amp;&amp;""!=e.armis_id||null!=e.mac&amp;&amp;""!=e.mac))return{operation:"error: must have either a MAC or an Armis ID",time_delta:0};if(allowed_attributes=["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"],0==includes(allowed_attributes,e.attribute))return{operation:"error: attribute '"+e.attribute+"' is not valid.",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_key_attribute"};return t.unique_pairs=[["armis_mac",e.mac],["attribute",e.attribute]],t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.armis_id],["value",e.value],["status","PENDING"]],insertOrUpdate(t)}function queueApplication(e){if(null==e.armis_id||""==e.armis_id)return{operation:"error: Armis ID cannot be empty",time_delta:0};if(null==e.name||""==e.name)return{operation:"error: Software name cannot be empty",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_application_upload"};return t.unique_pairs=[["armis_device_id",e.armis_id],["application_name",e.name]],t.update_pairs=[["execution_id",e.execution_id],["application_version",e.version],["status","PENDING"]],insertOrUpdate(t)}function executeStandardREST(e){try{var t=new GlideDateTime,i=new sn_ws.RESTMessageV2("Armis API",e.endpoint);i.setRequestHeader("Authorization",getCurrentToken()),i.setRequestHeader("accept","application/json"),i.setRequestHeader("content-type","application/json"),null==e.query_params&amp;&amp;(e.query_params=[]);for(var a=0;a&lt;e.query_params.length;a++)i.setQueryParameter(e.query_params[a][0],e.query_params[a][1]);i.setRequestBody(e.payload);var r,n=now(),u={};return 1==e.async?r=i.executeAsync():(r=i.execute(),u.response_code=r.getStatusCode(),u.response_body=r.getBody()),u.api_time=now()-n,writeToAPILog({id:e.id,endpoint:e.endpoint,payload:e.payload,response_code:u.response_code,response_body:u.response_body,start_time:t,time_delta_ms:u.api_time}),u}catch(e){return(u={response_code:"xx"}).response_body="Failed to build query. "+e,u.api_time=0,u}}function queueAttachmentREST(e){var t=new GlideRecord("sys_attachment"),i=(new GlideSysAttachment).write(t,e.id+".csv","text/plain",e.payload),a=new GlideRecord("x_fmcna_armis_inte_armis_attachment_upload");a.initialize(),a.attachment=i,a.execution_id=e.id,a.status="PENDING",a.type=e.type,a.content=e.payload,a.insert()}function queueInitialARPandCSV(e,t){var i=e.mac_address,a=e.ip_address;isValidMACAddress(i)&amp;&amp;isValidIPAddress(a)&amp;&amp;(queueARP({execution_id:t,mac:i,ip:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"NAME",value:""+e.name}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"IP",value:a}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"TAG",value:getConfigValue("armis_import_universal_tag")}),queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"LAST_SEEN",value:(new GlideDateTime).getDisplayValue().replace(" ","T")}),null!=e.model_id&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"MODEL",value:e.model_id.getDisplayValue()}),null!=e.os&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS",value:e.os.getDisplayValue()}),null!=e.os_version&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"OS_VERSION",value:e.os_version}),null!=e.users&amp;&amp;queueKeyAttribute({execution_id:t,armis_id:"",mac:i,attribute:"USER",value:e.users}))}function getPendingRecordsEndSysID(e,t,i){null==i&amp;&amp;(i={}),null==i.force_field&amp;&amp;(i.force_field="status"),null==i.force_pending&amp;&amp;(i.force_pending="PENDING");var a=new GlideRecord(t);for(a.addQuery(i.force_field,i.force_pending),a.setLimit(e),a.orderBy("sys_id"),a.query();a.next();)if(0==a.hasNext())return a.getValue("sys_id")}function getNumPendingRecords(e,t,i,a){null==a&amp;&amp;(a={}),null==a.force_field&amp;&amp;(a.force_field="status"),null==a.force_pending&amp;&amp;(a.force_pending="PENDING");var r=new GlideRecord(t);return r.addQuery(a.force_field,a.force_pending),r.setLimit(e),r.orderBy("sys_id"),r.addQuery("sys_id","&lt;=",i),r.query(),r}


// **************************************
// **** TABLES AND REST LIBRARY v0.11 ***
// **************************************

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',('' + p.payload).substring(0,1999)],['response_code',p.response_code],
    ['response_body',('' + p.response_body).substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['property_name',p.name]]
  q.update_pairs = [['property_value',p.value],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.unique_pairs = [['armis_mac',p.mac],['attribute',p.attribute]]
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.armis_id],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.unique_pairs = [['armis_device_id',p.armis_id],['application_name',p.name]]
  q.update_pairs = [['execution_id',p.execution_id],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}
  
  //Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.content = p.payload
  q.insert()
}

//This accepts a SNOW computer and queues all 'initial' uploads. This means an ARP entry and all key value entries.
function queueInitialARPandCSV(snow_computer,execution_id)
{
  var snow_mac = snow_computer.mac_address
  var snow_ip = snow_computer.ip_address
  if(isValidMACAddress(snow_mac) &amp;&amp; isValidIPAddress(snow_ip))
    {
      //Queue ARP first.
      queueARP({execution_id: execution_id, mac: snow_mac, ip: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'NAME', value: '' + snow_computer.name})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'IP', value: snow_ip})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'TAG', value: getConfigValue('armis_import_universal_tag')})
      queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'LAST_SEEN', value: (new GlideDateTime()).getDisplayValue().replace(' ','T')})
      if(snow_computer.model_id != null) { queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'MODEL', value: snow_computer.model_id.getDisplayValue()}) }
      if(snow_computer.os != null) { queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'OS', value: snow_computer.os.getDisplayValue()}) }
      if(snow_computer.os_version != null) {queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'OS_VERSION', value: snow_computer.os_version}) }
      if(snow_computer.users != null) {queueKeyAttribute({execution_id: execution_id, armis_id: '', mac: snow_mac, attribute: 'USER', value: snow_computer.users}) }
    }
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
//     .force_field - override 'status' with a different field name
//     .force_pending - override 'PENDING' check with a different value
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
}

function getNumPendingRecords(n,table,end_sys_id,other_params)
{  
  if(other_params == null) { other_params = {} }
  if(other_params.force_field == null) { other_params.force_field = 'status'}
  if(other_params.force_pending == null) { other_params.force_pending = 'PENDING'}
  var q = new GlideRecord(table)
  q.addQuery(other_params.force_field,other_params.force_pending)
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}







(function execute(inputs, outputs) {

  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>a57d849e1b9650104ca7edf9bc4bcb04</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-31 04:16:02</sys_created_on>
        <sys_id>397d849e1b9650104ca7edf9bc4bcb0a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-31 04:16:02</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>a73465c8-4eec-4248-8884-9f03a895f380</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>UPDATE ARMIS DEVICE</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 16:41:16</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f9e4768c1bd29c104ca7edf9bc4bcb09</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 15:00:40</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=f9e4768c1bd29c104ca7edf9bc4bcb09"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f9e4768c1bd29c104ca7edf9bc4bcb09</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 16:41:16</sys_created_on>
        <sys_id>86e4768c1bd29c104ca7edf9bc4bcb10</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 15:00:40</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    if(j.sensor != null) { device.sensor_name = j.sensor.name }
    if(j.sensor != null) { device.sensor_type = j.sensor.type }
    if(j.site != null) { device.site = j.site.name }
    if(j.site != null) { device.site_location = j.site.location }
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}

// MINIFIED

function updateArmisDevice(e,i){var s=(new GlideDateTime).getNumericValue(),a={},t=new GlideRecord("x_fmcna_armis_inte_armis_device_table"),r=digest(JSON.stringify(e));a.digest=r,t.addQuery("armis_device_id",e.id),t.query();var n=0==t.getRowCount();n?t.initialize():t.next(),a.is_insert=n;var d,_=!0;if(n||t.getValue("digest")!=r||(_=!1),a.perform=_,a.digest_existing=t.getValue("digest"),_){if(t.access_switch=e.accessSwitch,t.armis_device_id=e.id,t.armis_risk_level=e.riskLevel,t.category=e.category,t.first_seen=new GlideDateTime(e.firstSeen),t.ip_address=e.ipAddress,t.last_seen=new GlideDateTime(e.lastSeen),t.mac_address=e.macAddress,t.manufacturer=e.manufacturer,t.model=e.model,t.name=e.name,t.os=e.operatingSystem,t.os_version=e.operatingSystemVersion,null!=e.sensor&amp;&amp;(t.sensor_name=e.sensor.name),null!=e.sensor&amp;&amp;(t.sensor_type=e.sensor.type),null!=e.site&amp;&amp;(t.site=e.site.name),null!=e.site&amp;&amp;(t.site_location=e.site.location),t.armis_tags=JSON.stringify(e.tags),t.visibility=e.visibility,t.digest=r,n?(d=t.insert(),a.action="insert"):(d=t.update(),a.action="update"),a.record=d,i){null==e.tags&amp;&amp;(e.tags=[]);var l=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");l.addQuery("armis_device",d),l.query();for(var m=[];l.next();){var c=l.getValue("armis_tag");includes(m,l.getValue("armis_tag"))?m.push(c):l.deleteRecord()}for(var o=0;o&lt;e.tags.length;o++)if(!includes(m,e.tags[o])){var g=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");g.initialize(),g.armis_device=d,g.armis_tag=e.tags[o],g.insert()}}}else a.action="no_update_needed";return a.time_delta=(new GlideDateTime).getNumericValue()-s,a}


(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f9e4768c1bd29c104ca7edf9bc4bcb09</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-24 16:41:16</sys_created_on>
        <sys_id>8ee4768c1bd29c104ca7edf9bc4bcb0f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-24 16:41:16</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT INb307233e1bc294104ca7edf9bc4bcbd8"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>debug</element>
        <help/>
        <hint/>
        <label>debug</label>
        <language>en</language>
        <name>var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b307233e1bc294104ca7edf9bc4bcbd8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
    <sys_hub_action_plan action="delete_multiple" query="action_id=148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT INca0e35bf1b0ed8104ca7edf9bc4bcba9"/>
    <sys_hub_action_plan action="INSERT_OR_UPDATE">
        <action_id display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</action_id>
        <plan>{"persistor":{"@class":".ChunkingPlanPersistor","table":"sys_hub_action_plan","id":"ca0e35bf1b0ed8104ca7edf9bc4bcba9","name":"plan"}}</plan>
        <snapshot>2eb459c21b9e18104be764e8bc4bcb9a</snapshot>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:03</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>ca0e35bf1b0ed8104ca7edf9bc4bcba9</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_overrides/>
        <sys_scope/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:58</sys_updated_on>
    </sys_hub_action_plan>
    <sys_hub_action_type_snapshot action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <internal_name>function_library_v21</internal_name>
        <label_cache>[{"name":"{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].variable}}","label":"step➛LIBRARY➛variable","type":"step","ref":""},{"name":"{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].debug}}","label":"step➛LIBRARY➛debug","type":"step","ref":""},{"name":"{{step[40adef71-a211-4cd4-bade-800daa7b380c].variable}}","label":"step➛CURRENT MINIFIED➛variable","type":"step","ref":""},{"name":"{{step[40adef71-a211-4cd4-bade-800daa7b380c].debug}}","label":"step➛CURRENT MINIFIED➛debug","type":"step","ref":""}]</label_cache>
        <master>true</master>
        <name>FUNCTION_LIBRARY (v2.1)</name>
        <natlang/>
        <outputs/>
        <outputs/>
        <parent_action display_value="FUNCTION_LIBRARY (v2.1)">148627ba1bc294104ca7edf9bc4bcbaf</parent_action>
        <sys_class_name>sys_hub_action_type_snapshot</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>a50e35bf1b0ed8104ca7edf9bc4bcb12</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_overrides/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:00</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_snapshot>
    <sys_variable_value action="delete_multiple" query="document_key=a50e35bf1b0ed8104ca7edf9bc4bcb12"/>
    <sys_element_mapping action="delete_multiple" query="id=a50e35bf1b0ed8104ca7edf9bc4bcb12"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>debug</field>
        <id>a50e35bf1b0ed8104ca7edf9bc4bcb12</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>b10e35bf1b0ed8104ca7edf9bc4bcb5a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <table>var__m_sys_hub_action_output_a50e35bf1b0ed8104ca7edf9bc4bcb12</table>
        <value>{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].debug}}</value>
    </sys_element_mapping>
    <sys_hub_step_instance action="delete_multiple" query="action=a50e35bf1b0ed8104ca7edf9bc4bcb12^sys_idNOT IN750e35bf1b0ed8104ca7edf9bc4bcb4a,e90e35bf1b0ed8104ca7edf9bc4bcb3b,ed0e35bf1b0ed8104ca7edf9bc4bcb13,f2b459c21b9e18104be764e8bc4bcbf8"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>76ba4dfd-1b50-48a2-8604-a87006f3ca28</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>DEBUG AND TESTING FUNCTIONS</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>750e35bf1b0ed8104ca7edf9bc4bcb4a</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=750e35bf1b0ed8104ca7edf9bc4bcb4a"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>750e35bf1b0ed8104ca7edf9bc4bcb4a</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>bd0e35bf1b0ed8104ca7edf9bc4bcb4f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>//FUNCTION LIBRARY (v0.3) -- THESE FUNCTIONS HAVE BEEN MINIFIED.
//FOR FULL DOCUMENTAITON AND A CURRENT COPY, SEE THE ACTION "(vX.X) FUNCTION_LIBRARY"
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,i){for(var t=0;t&lt;e.length;t++)if(e[t]==i)return!0;return!1}function digest(e){for(var i=5381,t=e.length;t;)i=33*i^e.charCodeAt(--t);return i&gt;&gt;&gt;0}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyz";for(var i=16;i&gt;0;i--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var i={},t=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var a=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var r=0;r&lt;e.unique_pairs.length;r++)a.addQuery(e.unique_pairs[r][0],e.unique_pairs[r][1]);a.query()}if(0==a.getRowCount()){a.initialize();for(r=0;r&lt;e.unique_pairs.length;r++)a[e.unique_pairs[r][0]]=e.unique_pairs[r][1];for(r=0;r&lt;e.update_pairs.length;r++)a[e.update_pairs[r][0]]=e.update_pairs[r][1];a.insert(),i.operation="insert"}else{for(r=0;r&lt;e.update_pairs.length;r++)a[e.update_pairs[r][0]]=e.update_pairs[r][1];a.updateMultiple(),i.operation="update"}}catch(e){i.operation="error: "+e}return i.time_delta=now()-t,i}function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var i={table:"x_fmcna_armis_inte_armis_rest_api_log"};return i.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",e.payload.substring(0,1999)],["response_code",e.response_code],["response_body",e.response_body.substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(i)}function writeToActionLog(e){var i={table:"x_fmcna_armis_inte_armis_action_log"};return i.unique_pairs=[["execution_id",e.id]],i.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",e.report.substring(0,199)],["debug_string",e.debug_string.substring(0,1999)]],insertOrUpdate(i)}function getConfigValue(e){var i=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return i.addQuery("key",e),i.query(),0==i.getRowCount()?"":(i.next(),i.getValue("value"))}function getCacheValue(e,i){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(t.addQuery("key",e),t.query(),0==t.getRowCount())return null;switch(t.next(),i){case"str":return t.getValue("value_string");case"int":return t.getValue("value_int");case"datetime":return t.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,i,t){var a={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(a.unique_pairs=[["key",e]],t){case"str":a.update_pairs=[["value_string",i]];break;case"int":a.update_pairs=[["value_int",i]];break;case"datetime":a.update_pairs=[["value_datetime",i]]}return insertOrUpdate(a)}function deleteCacheValue(e){var i=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");i.addQuery("key",e),i.query(),i.deleteMultiple()}function updateArmisDevice(e,i){var t=(new GlideDateTime).getNumericValue(),a={},r=new GlideRecord("x_fmcna_armis_inte_armis_device_table"),n=digest(JSON.stringify(e));a.digest=n,r.addQuery("armis_device_id",e.id),r.query();var s=0==r.getRowCount();s?r.initialize():r.next(),a.is_insert=s;var u,_=!0;if(s||r.getValue("digest")!=n||(_=!1),a.perform=_,a.digest_existing=r.getValue("digest"),_){if(r.access_switch=e.accessSwitch,r.armis_device_id=e.id,r.armis_risk_level=e.riskLevel,r.category=e.category,r.first_seen=new GlideDateTime(e.firstSeen),r.ip_address=e.ipAddress,r.last_seen=new GlideDateTime(e.lastSeen),r.mac_address=e.macAddress,r.manufacturer=e.manufacturer,r.model=e.model,r.name=e.name,r.os=e.operatingSystem,r.os_version=e.operatingSystemVersion,r.sensor_name=e.sensor.name,r.sensor_type=e.sensor.type,r.site=e.site.name,r.site_location=e.site.location,r.armis_tags=JSON.stringify(e.tags),r.visibility=e.visibility,r.digest=n,s?(u=r.insert(),a.action="insert"):(u=r.update(),a.action="update"),a.record=u,i){null==e.tags&amp;&amp;(e.tags=[]);var o=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");o.addQuery("armis_device",u),o.query();for(var d=[];o.next();){var l=o.getValue("armis_tag");includes(d,o.getValue("armis_tag"))?d.push(l):o.deleteRecord()}for(var c=0;c&lt;e.tags.length;c++)if(!includes(d,e.tags[c])){var p=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");p.initialize(),p.armis_device=u,p.armis_tag=e.tags[c],p.insert()}}}else a.action="no_update_needed";return a.time_delta=(new GlideDateTime).getNumericValue()-t,a}


// ***********************************
// *** DEBUG AND TESTING FUNCTIONS ***
// ***********************************

// Grabs any computers in the CMDB labeled "AI_TEST_COMPUTER_"
function getTestComputers()
{
  var q = new GlideRecord('cmdb_ci_computer')
}

(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>750e35bf1b0ed8104ca7edf9bc4bcb4a</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>f90e35bf1b0ed8104ca7edf9bc4bcb4f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>40adef71-a211-4cd4-bade-800daa7b380c</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>CURRENT MINIFIED</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e90e35bf1b0ed8104ca7edf9bc4bcb3b</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=e90e35bf1b0ed8104ca7edf9bc4bcb3b"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e90e35bf1b0ed8104ca7edf9bc4bcb3b</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>750e35bf1b0ed8104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>  //minify with: https://javascript-minifier.com/ when the content of the LIBRARY script changes.
  //Make sure NOT to copy the actual implementation at the end: (function execute(inputs, outputs) { } })(inputs, outputs);
  

//FUNCTION LIBRARY (v0.5) -- THESE FUNCTIONS HAVE BEEN MINIFIED.
//FOR FULL DOCUMENTAITON AND A CURRENT COPY, SEE THE ACTION "(vX.X) FUNCTION_LIBRARY"
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,t){for(var r=0;r&lt;e.length;r++)if(e[r]==t)return!0;return!1}function digest(e){for(var t=5381,r=e.length;r;)t=33*t^e.charCodeAt(--r);return t&gt;&gt;&gt;0}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var t=6;t&gt;0;t--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var t={},r=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var a=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var i=0;i&lt;e.unique_pairs.length;i++)a.addQuery(e.unique_pairs[i][0],e.unique_pairs[i][1]);a.query()}if(0==a.getRowCount()){a.initialize();for(i=0;i&lt;e.unique_pairs.length;i++)a[e.unique_pairs[i][0]]=e.unique_pairs[i][1];for(i=0;i&lt;e.update_pairs.length;i++)a[e.update_pairs[i][0]]=e.update_pairs[i][1];a.insert(),t.operation="insert"}else{for(i=0;i&lt;e.update_pairs.length;i++)a[e.update_pairs[i][0]]=e.update_pairs[i][1];a.updateMultiple(),t.operation="update"}}catch(e){t.operation="error: "+e}return t.time_delta=now()-r,t}function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var t={table:"x_fmcna_armis_inte_armis_rest_api_log"};return t.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",e.payload.substring(0,1999)],["response_code",e.response_code],["response_body",e.response_body.substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(t)}function queueProperty(e){if(null==e.name||""==e.name)return{operation:"error: empty name",time_delta:0};if(null==e.value||""==e.value)return{operation:"error: empty value",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_property_upload"};return t.update_pairs=[["armis_device_id",e.armis_id],["property_name",e.name],["property_value",e.value],["execution_id",e.execution_id],["status","PENDING"]],insertOrUpdate(t)}function queueARP(e){if(null==e.mac||""==e.mac)return{operation:"error: empty mac",time_delta:0};if(null==e.ip||""==e.ip)return{operation:"error: empty ip",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_arp_table"};return t.update_pairs=[["execution_id",e.execution_id],["mac",e.mac],["ip",e.ip],["status","PENDING"]],insertOrUpdate(t)}function queueKeyAttribute(e){if(!(null!=e.armis_id&amp;&amp;""!=e.armis_id||null!=e.mac&amp;&amp;""!=e.mac))return{operation:"error: must have either a MAC or an Armis ID",time_delta:0};if(allowed_attributes=["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"],0==includes(allowed_attributes,e.attribute))return{operation:"error: attribute '"+e.attribute+"' is not valid.",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_key_attribute"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["armis_mac",e.mac],["attribute",e.attribute],["value",e.value],["status","PENDING"]],insertOrUpdate(t)}function queueApplication(e){if(null==e.armis_id||""==e.armis_id)return{operation:"error: Armis ID cannot be empty",time_delta:0};if(null==e.name||""==e.name)return{operation:"error: Software name cannot be empty",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_application_upload"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["application_name",e.name],["application_version",e.version],["status","PENDING"]],insertOrUpdate(t)}function writeToActionLog(e){var t={table:"x_fmcna_armis_inte_armis_action_log"};return t.unique_pairs=[["execution_id",e.id]],t.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",e.report.substring(0,199)],["debug_string",e.debug_string.substring(0,1999)]],insertOrUpdate(t)}function getConfigValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return t.addQuery("key",e),t.query(),0==t.getRowCount()?"":(t.next(),t.getValue("value"))}function getCacheValue(e,t){var r=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(r.addQuery("key",e),r.query(),0==r.getRowCount())return null;switch(r.next(),t){case"str":return r.getValue("value_string");case"int":return r.getValue("value_int");case"datetime":return r.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,t,r){var a={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(a.unique_pairs=[["key",e]],r){case"str":a.update_pairs=[["value_string",t]];break;case"int":a.update_pairs=[["value_int",t]];break;case"datetime":a.update_pairs=[["value_datetime",t]]}return insertOrUpdate(a)}function deleteCacheValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");t.addQuery("key",e),t.query(),t.deleteMultiple()}function getPendingRecordsEndSysID(e,t,r){var a=new GlideRecord(t);for(a.addQuery("status","PENDING"),a.setLimit(e),a.orderBy("sys_id"),a.query();a.next();)if(0==a.hasNext())return a.getValue("sys_id")}function getNumPendingRecords(e,t,r){var a=new GlideRecord(t);return a.addQuery("status","PENDING"),a.setLimit(e),a.orderBy("sys_id"),a.addQuery("sys_id","&lt;=",r),a.query(),a}function executeStandardREST(e){try{var t=new GlideDateTime,r=new sn_ws.RESTMessageV2("Armis API",e.endpoint);r.setRequestHeader("Authorization",getCurrentToken()),r.setRequestHeader("accept","application/json"),r.setRequestHeader("content-type","application/json"),null==e.query_params&amp;&amp;(e.query_params=[]);for(var a=0;a&lt;e.query_params.length;a++)r.setQueryParameter(e.query_params[a][0],e.query_params[a][1]);r.setRequestBody(e.payload);var i,n=now(),u={};return 1==e.async?i=r.executeAsync():(i=r.execute(),u.response_code=i.getStatusCode(),u.response_body=i.getBody()),u.api_time=now()-n,writeToAPILog({id:e.id,endpoint:e.endpoint,payload:e.payload,response_code:u.response_code,response_body:u.response_body,start_time:t,time_delta_ms:u.api_time}),u}catch(e){return(u={response_code:"xx"}).response_body="Failed to build query. "+e,u.api_time=0,u}}function queueAttachmentREST(e){var t=new GlideRecord("sys_attachment"),r=(new GlideSysAttachment).write(t,e.id+".csv","text/plain",e.payload),a=new GlideRecord("x_fmcna_armis_inte_armis_attachment_upload");a.initialize(),a.attachment=r,a.execution_id=e.id,a.status="PENDING",a.type=e.type,a.insert()}

(function execute(inputs, outputs) {
  
  /*
 j = '{"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":1001880,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA2","ServiceNow Import Prod2","FKC Region Northeast2","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}'
 jo = JSON.parse(j) */

  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e90e35bf1b0ed8104ca7edf9bc4bcb3b</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>b10e35bf1b0ed8104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=e90e35bf1b0ed8104ca7edf9bc4bcb3b^sys_idNOT INad0e35bf1b0ed8104ca7edf9bc4bcb3e"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=f880b7ad-09cc-47fa-bbdf-8633310df0e2</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="CURRENT MINIFIED">e90e35bf1b0ed8104ca7edf9bc4bcb3b</model>
        <model_id>e90e35bf1b0ed8104ca7edf9bc4bcb3b</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_e90e35bf1b0ed8104ca7edf9bc4bcb3b</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ad0e35bf1b0ed8104ca7edf9bc4bcb3e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIBRARY</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ed0e35bf1b0ed8104ca7edf9bc4bcb13</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=ed0e35bf1b0ed8104ca7edf9bc4bcb13"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>ed0e35bf1b0ed8104ca7edf9bc4bcb13</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>290e35bf1b0ed8104ca7edf9bc4bcb39</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>ed0e35bf1b0ed8104ca7edf9bc4bcb13</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>e90e35bf1b0ed8104ca7edf9bc4bcb39</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>// *******************************
// **** FUNCTION LIBRARY v0.5 ****
// *******************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}

// *** SPECIFIC TABLE FUNCTIONS ***

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',p.payload.substring(0,1999)],['response_code',p.response_code],
    ['response_body',p.response_body.substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.update_pairs = [['armis_device_id',p.armis_id],['property_name',p.name],['property_value',p.value],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.mac],['armis_mac',p.mac],['attribute',p.attribute],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.mac],['application_name',p.name],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}


//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',p.report.substring(0,199)],['debug_string',p.debug_string.substring(0,1999)]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  var q = new GlideRecord(table)
  q.addQuery('status','PENDING')
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
}

function getNumPendingRecords(n,table,end_sys_id)
{  
  var q = new GlideRecord(table)
  q.addQuery('status','PENDING')
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}

//Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.insert()
}

// ***************************************
// *** GETD_GetBulkArmisData FUNCTIONS ***
// ***************************************




// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
  
  debug = []
 
 /*j = '{"accessSwitch":null,"category":"Unknown","firstSeen":"2020-07-23T17:25:20","id":843846,"ipAddress":"10.55.24.104","lastSeen":"2020-07-23T17:25:20","macAddress":"d4:d2:52:4c:0a:09","manufacturer":"Intel","model":"Intel device","name":null,"operatingSystem":null,"operatingSystemVersion":null,"riskLevel":1,"sensor":{"name":"FL4-Back Right","type":"Access Point"},"site":{"location":"350 Merrimack St, Lawrence, MA 01843","name":"NxStage Lawrence MA"},"tags":[],"type":"Unknown","user":"","visibility":"Full"}'
 jo = JSON.parse(j)*/

  //debug.push(JSON.stringify(queueProperty({armis_id: 1, name: "Test Property", value: "Test Value"})))
  //debug.push(JSON.stringify(queueKeyAttribute({armis_id: 1, mac: "TEST_MAC", attribute: "IP", value: "TEST_IP"})))
  //debug.push(JSON.stringify(queueARP({mac: "Test_MAC", ip: "Test_IP"})))
  //debug.push(JSON.stringify(queueApplication({armis_id: 1, name: "Test Software"})))
  
  //var esys_id = getPendingRecordsEndSysID(1900,'x_fmcna_armis_inte_armis_op_arp_table',{})
  
  //var payload = '[{"upsert":{"description":"SNOW Location","deviceId":795567,"type":"SNOW Location","value":"Earth"}}]'
  
  //debug.push(JSON.stringify(executeREST({id: generateID(), endpoint: 'POST Properties', payload: payload, async: false, query_params: []})))
  
  var payload = 'ip,mac\n10.100.134.43,20:99:29:31:92:14\n10.100.134.5,3F:8C:91:58:14:41\n10.100.134.12,2D:91:AF:D6:94:35\n10.100.134.33,C8:72:03:F8:E2:89'
  queueAttachmentREST({id: generateID(), type: 'CSV', payload: payload})
  
  outputs.debug = debug.join("\n")
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=ed0e35bf1b0ed8104ca7edf9bc4bcb13^sys_idNOT INa50e35bf1b0ed8104ca7edf9bc4bcb17"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=3dd8b4c7-0a82-4a9d-9b1d-faa37e6b9813</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="LIBRARY">ed0e35bf1b0ed8104ca7edf9bc4bcb13</model>
        <model_id>ed0e35bf1b0ed8104ca7edf9bc4bcb13</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_ed0e35bf1b0ed8104ca7edf9bc4bcb13</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a50e35bf1b0ed8104ca7edf9bc4bcb17</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:00</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>a73465c8-4eec-4248-8884-9f03a895f380</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>UPDATE ARMIS DEVICE</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-30 14:48:56</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f2b459c21b9e18104be764e8bc4bcbf8</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=f2b459c21b9e18104be764e8bc4bcbf8"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f2b459c21b9e18104be764e8bc4bcbf8</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-30 14:48:56</sys_created_on>
        <sys_id>0fb459c21b9e18104be764e8bc4bcbfd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    device.sensor_name = j.sensor.name
    device.sensor_type = j.sensor.type
    device.site = j.site.name
    device.site_location = j.site.location
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}

// MINIFIED

function updateArmisDevice(e,i){var a=(new GlideDateTime).getNumericValue(),s={},t=new GlideRecord("x_fmcna_armis_inte_armis_device_table"),r=digest(JSON.stringify(e));s.digest=r,t.addQuery("armis_device_id",e.id),t.query();var n=0==t.getRowCount();n?t.initialize():t.next(),s.is_insert=n;var d,_=!0;if(n||t.getValue("digest")!=r||(_=!1),s.perform=_,s.digest_existing=t.getValue("digest"),_){if(t.access_switch=e.accessSwitch,t.armis_device_id=e.id,t.armis_risk_level=e.riskLevel,t.category=e.category,t.first_seen=new GlideDateTime(e.firstSeen),t.ip_address=e.ipAddress,t.last_seen=new GlideDateTime(e.lastSeen),t.mac_address=e.macAddress,t.manufacturer=e.manufacturer,t.model=e.model,t.name=e.name,t.os=e.operatingSystem,t.os_version=e.operatingSystemVersion,t.sensor_name=e.sensor.name,t.sensor_type=e.sensor.type,t.site=e.site.name,t.site_location=e.site.location,t.armis_tags=JSON.stringify(e.tags),t.visibility=e.visibility,t.digest=r,n?(d=t.insert(),s.action="insert"):(d=t.update(),s.action="update"),s.record=d,i){null==e.tags&amp;&amp;(e.tags=[]);var m=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");m.addQuery("armis_device",d),m.query();for(var c=[];m.next();){var l=m.getValue("armis_tag");includes(c,m.getValue("armis_tag"))?c.push(l):m.deleteRecord()}for(var g=0;g&lt;e.tags.length;g++)if(!includes(c,e.tags[g])){var o=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");o.initialize(),o.armis_device=d,o.armis_tag=e.tags[g],o.insert()}}}else s.action="no_update_needed";return s.time_delta=(new GlideDateTime).getNumericValue()-a,s}



(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f2b459c21b9e18104be764e8bc4bcbf8</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-30 14:48:56</sys_created_on>
        <sys_id>4bb459c21b9e18104be764e8bc4bcbfd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_action_output action="delete_multiple" query="model=a50e35bf1b0ed8104ca7edf9bc4bcb12^sys_idNOT IN390e35bf1b0ed8104ca7edf9bc4bcb51"/>
    <sys_hub_action_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,pwd2droppable=true,uiType=string,uiTypeLabel=String,uiUniqueId=8f49d6ee-1463-42d9-a53f-6980e4241c94</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_prototype/>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_link/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>false</mandatory>
        <max_length>8000</max_length>
        <model display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</model>
        <model_id>a50e35bf1b0ed8104ca7edf9bc4bcb12</model_id>
        <model_table>sys_hub_action_type_snapshot</model_table>
        <name>var__m_sys_hub_action_output_a50e35bf1b0ed8104ca7edf9bc4bcb12</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>390e35bf1b0ed8104ca7edf9bc4bcb51</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_output>
    <sys_hub_step_instance action="delete_multiple" query="action=a50e35bf1b0ed8104ca7edf9bc4bcb12^sys_idNOT IN750e35bf1b0ed8104ca7edf9bc4bcb4a,e90e35bf1b0ed8104ca7edf9bc4bcb3b,ed0e35bf1b0ed8104ca7edf9bc4bcb13,f2b459c21b9e18104be764e8bc4bcbf8"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>76ba4dfd-1b50-48a2-8604-a87006f3ca28</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>DEBUG AND TESTING FUNCTIONS</label>
        <order>4</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>750e35bf1b0ed8104ca7edf9bc4bcb4a</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=750e35bf1b0ed8104ca7edf9bc4bcb4a"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>750e35bf1b0ed8104ca7edf9bc4bcb4a</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>bd0e35bf1b0ed8104ca7edf9bc4bcb4f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>//FUNCTION LIBRARY (v0.3) -- THESE FUNCTIONS HAVE BEEN MINIFIED.
//FOR FULL DOCUMENTAITON AND A CURRENT COPY, SEE THE ACTION "(vX.X) FUNCTION_LIBRARY"
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,i){for(var t=0;t&lt;e.length;t++)if(e[t]==i)return!0;return!1}function digest(e){for(var i=5381,t=e.length;t;)i=33*i^e.charCodeAt(--t);return i&gt;&gt;&gt;0}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyz";for(var i=16;i&gt;0;i--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var i={},t=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var a=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var r=0;r&lt;e.unique_pairs.length;r++)a.addQuery(e.unique_pairs[r][0],e.unique_pairs[r][1]);a.query()}if(0==a.getRowCount()){a.initialize();for(r=0;r&lt;e.unique_pairs.length;r++)a[e.unique_pairs[r][0]]=e.unique_pairs[r][1];for(r=0;r&lt;e.update_pairs.length;r++)a[e.update_pairs[r][0]]=e.update_pairs[r][1];a.insert(),i.operation="insert"}else{for(r=0;r&lt;e.update_pairs.length;r++)a[e.update_pairs[r][0]]=e.update_pairs[r][1];a.updateMultiple(),i.operation="update"}}catch(e){i.operation="error: "+e}return i.time_delta=now()-t,i}function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var i={table:"x_fmcna_armis_inte_armis_rest_api_log"};return i.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",e.payload.substring(0,1999)],["response_code",e.response_code],["response_body",e.response_body.substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(i)}function writeToActionLog(e){var i={table:"x_fmcna_armis_inte_armis_action_log"};return i.unique_pairs=[["execution_id",e.id]],i.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",e.report.substring(0,199)],["debug_string",e.debug_string.substring(0,1999)]],insertOrUpdate(i)}function getConfigValue(e){var i=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return i.addQuery("key",e),i.query(),0==i.getRowCount()?"":(i.next(),i.getValue("value"))}function getCacheValue(e,i){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(t.addQuery("key",e),t.query(),0==t.getRowCount())return null;switch(t.next(),i){case"str":return t.getValue("value_string");case"int":return t.getValue("value_int");case"datetime":return t.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,i,t){var a={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(a.unique_pairs=[["key",e]],t){case"str":a.update_pairs=[["value_string",i]];break;case"int":a.update_pairs=[["value_int",i]];break;case"datetime":a.update_pairs=[["value_datetime",i]]}return insertOrUpdate(a)}function deleteCacheValue(e){var i=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");i.addQuery("key",e),i.query(),i.deleteMultiple()}function updateArmisDevice(e,i){var t=(new GlideDateTime).getNumericValue(),a={},r=new GlideRecord("x_fmcna_armis_inte_armis_device_table"),n=digest(JSON.stringify(e));a.digest=n,r.addQuery("armis_device_id",e.id),r.query();var s=0==r.getRowCount();s?r.initialize():r.next(),a.is_insert=s;var u,_=!0;if(s||r.getValue("digest")!=n||(_=!1),a.perform=_,a.digest_existing=r.getValue("digest"),_){if(r.access_switch=e.accessSwitch,r.armis_device_id=e.id,r.armis_risk_level=e.riskLevel,r.category=e.category,r.first_seen=new GlideDateTime(e.firstSeen),r.ip_address=e.ipAddress,r.last_seen=new GlideDateTime(e.lastSeen),r.mac_address=e.macAddress,r.manufacturer=e.manufacturer,r.model=e.model,r.name=e.name,r.os=e.operatingSystem,r.os_version=e.operatingSystemVersion,r.sensor_name=e.sensor.name,r.sensor_type=e.sensor.type,r.site=e.site.name,r.site_location=e.site.location,r.armis_tags=JSON.stringify(e.tags),r.visibility=e.visibility,r.digest=n,s?(u=r.insert(),a.action="insert"):(u=r.update(),a.action="update"),a.record=u,i){null==e.tags&amp;&amp;(e.tags=[]);var o=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");o.addQuery("armis_device",u),o.query();for(var d=[];o.next();){var l=o.getValue("armis_tag");includes(d,o.getValue("armis_tag"))?d.push(l):o.deleteRecord()}for(var c=0;c&lt;e.tags.length;c++)if(!includes(d,e.tags[c])){var p=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");p.initialize(),p.armis_device=u,p.armis_tag=e.tags[c],p.insert()}}}else a.action="no_update_needed";return a.time_delta=(new GlideDateTime).getNumericValue()-t,a}


// ***********************************
// *** DEBUG AND TESTING FUNCTIONS ***
// ***********************************

// Grabs any computers in the CMDB labeled "AI_TEST_COMPUTER_"
function getTestComputers()
{
  var q = new GlideRecord('cmdb_ci_computer')
}

(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>750e35bf1b0ed8104ca7edf9bc4bcb4a</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>f90e35bf1b0ed8104ca7edf9bc4bcb4f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>40adef71-a211-4cd4-bade-800daa7b380c</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>CURRENT MINIFIED</label>
        <order>3</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e90e35bf1b0ed8104ca7edf9bc4bcb3b</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=e90e35bf1b0ed8104ca7edf9bc4bcb3b"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e90e35bf1b0ed8104ca7edf9bc4bcb3b</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>750e35bf1b0ed8104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>  //minify with: https://javascript-minifier.com/ when the content of the LIBRARY script changes.
  //Make sure NOT to copy the actual implementation at the end: (function execute(inputs, outputs) { } })(inputs, outputs);
  

//FUNCTION LIBRARY (v0.5) -- THESE FUNCTIONS HAVE BEEN MINIFIED.
//FOR FULL DOCUMENTAITON AND A CURRENT COPY, SEE THE ACTION "(vX.X) FUNCTION_LIBRARY"
function now(){return(new GlideDateTime).getNumericValue()}function includes(e,t){for(var r=0;r&lt;e.length;r++)if(e[r]==t)return!0;return!1}function digest(e){for(var t=5381,r=e.length;r;)t=33*t^e.charCodeAt(--r);return t&gt;&gt;&gt;0}function generateID(){var e="";arr="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var t=6;t&gt;0;t--)e+=arr[Math.floor(Math.random()*arr.length)];return e}function insertOrUpdate(e){var t={},r=now();null==e.unique_pairs&amp;&amp;(e.unique_pairs=[]);try{var a=new GlideRecord(e.table);if(0!=e.unique_pairs.length){for(var i=0;i&lt;e.unique_pairs.length;i++)a.addQuery(e.unique_pairs[i][0],e.unique_pairs[i][1]);a.query()}if(0==a.getRowCount()){a.initialize();for(i=0;i&lt;e.unique_pairs.length;i++)a[e.unique_pairs[i][0]]=e.unique_pairs[i][1];for(i=0;i&lt;e.update_pairs.length;i++)a[e.update_pairs[i][0]]=e.update_pairs[i][1];a.insert(),t.operation="insert"}else{for(i=0;i&lt;e.update_pairs.length;i++)a[e.update_pairs[i][0]]=e.update_pairs[i][1];a.updateMultiple(),t.operation="update"}}catch(e){t.operation="error: "+e}return t.time_delta=now()-r,t}function writeToAPILog(e){null==e.payload&amp;&amp;(e.payload=""),null==e.response_body&amp;&amp;(e.response_body="");var t={table:"x_fmcna_armis_inte_armis_rest_api_log"};return t.update_pairs=[["execution_id",e.id],["api_endpoint",e.endpoint],["payload",e.payload.substring(0,1999)],["response_code",e.response_code],["response_body",e.response_body.substring(0,1999)],["query_submitted_at",e.start_time],["query_response_time_ms",e.time_delta_ms]],insertOrUpdate(t)}function queueProperty(e){if(null==e.name||""==e.name)return{operation:"error: empty name",time_delta:0};if(null==e.value||""==e.value)return{operation:"error: empty value",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_property_upload"};return t.update_pairs=[["armis_device_id",e.armis_id],["property_name",e.name],["property_value",e.value],["execution_id",e.execution_id],["status","PENDING"]],insertOrUpdate(t)}function queueARP(e){if(null==e.mac||""==e.mac)return{operation:"error: empty mac",time_delta:0};if(null==e.ip||""==e.ip)return{operation:"error: empty ip",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_arp_table"};return t.update_pairs=[["execution_id",e.execution_id],["mac",e.mac],["ip",e.ip],["status","PENDING"]],insertOrUpdate(t)}function queueKeyAttribute(e){if(!(null!=e.armis_id&amp;&amp;""!=e.armis_id||null!=e.mac&amp;&amp;""!=e.mac))return{operation:"error: must have either a MAC or an Armis ID",time_delta:0};if(allowed_attributes=["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"],0==includes(allowed_attributes,e.attribute))return{operation:"error: attribute '"+e.attribute+"' is not valid.",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_key_attribute"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["armis_mac",e.mac],["attribute",e.attribute],["value",e.value],["status","PENDING"]],insertOrUpdate(t)}function queueApplication(e){if(null==e.armis_id||""==e.armis_id)return{operation:"error: Armis ID cannot be empty",time_delta:0};if(null==e.name||""==e.name)return{operation:"error: Software name cannot be empty",time_delta:0};var t={table:"x_fmcna_armis_inte_armis_op_application_upload"};return t.update_pairs=[["execution_id",e.execution_id],["armis_device_id",e.mac],["application_name",e.name],["application_version",e.version],["status","PENDING"]],insertOrUpdate(t)}function writeToActionLog(e){var t={table:"x_fmcna_armis_inte_armis_action_log"};return t.unique_pairs=[["execution_id",e.id]],t.update_pairs=[["action_type",e.action_type],["api_time",e.api_time],["heavy_processing_time",e.heavy_processing_time],["total_time",e.total_time],["report",e.report.substring(0,199)],["debug_string",e.debug_string.substring(0,1999)]],insertOrUpdate(t)}function getConfigValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_configuration");return t.addQuery("key",e),t.query(),0==t.getRowCount()?"":(t.next(),t.getValue("value"))}function getCacheValue(e,t){var r=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");if(r.addQuery("key",e),r.query(),0==r.getRowCount())return null;switch(r.next(),t){case"str":return r.getValue("value_string");case"int":return r.getValue("value_int");case"datetime":return r.getValue("value_datetime")}}function getCurrentToken(){return getCacheValue("token","str")}function setCacheValue(e,t,r){var a={table:"x_fmcna_armis_inte_armis_integration_cache"};switch(a.unique_pairs=[["key",e]],r){case"str":a.update_pairs=[["value_string",t]];break;case"int":a.update_pairs=[["value_int",t]];break;case"datetime":a.update_pairs=[["value_datetime",t]]}return insertOrUpdate(a)}function deleteCacheValue(e){var t=new GlideRecord("x_fmcna_armis_inte_armis_integration_cache");t.addQuery("key",e),t.query(),t.deleteMultiple()}function getPendingRecordsEndSysID(e,t,r){var a=new GlideRecord(t);for(a.addQuery("status","PENDING"),a.setLimit(e),a.orderBy("sys_id"),a.query();a.next();)if(0==a.hasNext())return a.getValue("sys_id")}function getNumPendingRecords(e,t,r){var a=new GlideRecord(t);return a.addQuery("status","PENDING"),a.setLimit(e),a.orderBy("sys_id"),a.addQuery("sys_id","&lt;=",r),a.query(),a}function executeStandardREST(e){try{var t=new GlideDateTime,r=new sn_ws.RESTMessageV2("Armis API",e.endpoint);r.setRequestHeader("Authorization",getCurrentToken()),r.setRequestHeader("accept","application/json"),r.setRequestHeader("content-type","application/json"),null==e.query_params&amp;&amp;(e.query_params=[]);for(var a=0;a&lt;e.query_params.length;a++)r.setQueryParameter(e.query_params[a][0],e.query_params[a][1]);r.setRequestBody(e.payload);var i,n=now(),u={};return 1==e.async?i=r.executeAsync():(i=r.execute(),u.response_code=i.getStatusCode(),u.response_body=i.getBody()),u.api_time=now()-n,writeToAPILog({id:e.id,endpoint:e.endpoint,payload:e.payload,response_code:u.response_code,response_body:u.response_body,start_time:t,time_delta_ms:u.api_time}),u}catch(e){return(u={response_code:"xx"}).response_body="Failed to build query. "+e,u.api_time=0,u}}function queueAttachmentREST(e){var t=new GlideRecord("sys_attachment"),r=(new GlideSysAttachment).write(t,e.id+".csv","text/plain",e.payload),a=new GlideRecord("x_fmcna_armis_inte_armis_attachment_upload");a.initialize(),a.attachment=r,a.execution_id=e.id,a.status="PENDING",a.type=e.type,a.insert()}

(function execute(inputs, outputs) {
  
  /*
 j = '{"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":1001880,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA2","ServiceNow Import Prod2","FKC Region Northeast2","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}'
 jo = JSON.parse(j) */

  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>e90e35bf1b0ed8104ca7edf9bc4bcb3b</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>b10e35bf1b0ed8104ca7edf9bc4bcb48</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=e90e35bf1b0ed8104ca7edf9bc4bcb3b^sys_idNOT INad0e35bf1b0ed8104ca7edf9bc4bcb3e"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=f880b7ad-09cc-47fa-bbdf-8633310df0e2</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="CURRENT MINIFIED">e90e35bf1b0ed8104ca7edf9bc4bcb3b</model>
        <model_id>e90e35bf1b0ed8104ca7edf9bc4bcb3b</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_e90e35bf1b0ed8104ca7edf9bc4bcb3b</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ad0e35bf1b0ed8104ca7edf9bc4bcb3e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIBRARY</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ed0e35bf1b0ed8104ca7edf9bc4bcb13</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=ed0e35bf1b0ed8104ca7edf9bc4bcb13"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>ed0e35bf1b0ed8104ca7edf9bc4bcb13</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>290e35bf1b0ed8104ca7edf9bc4bcb39</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>ed0e35bf1b0ed8104ca7edf9bc4bcb13</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_id>e90e35bf1b0ed8104ca7edf9bc4bcb39</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>// *******************************
// **** FUNCTION LIBRARY v0.5 ****
// *******************************

// **** MISC FUNCTIONS ****

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 

//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }

//I needed a way to quickly generate a digest so I can check whether a JSON string changed since the last time an update occurred.
//This was lifted directly from "index.js" at: https://github.com/darkskyapp/string-hash
//It ingests a string of arbitrary length and spits out an integer unique to the string (i.e. non-secure hash)
function digest(str) {var hash=5381,i=str.length;while(i){hash=(hash*33)^str.charCodeAt(--i)};return hash&gt;&gt;&gt;0}

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is intended to be used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify an execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  for (var i = 6; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

// *** GENERAL SQL OPERATION FUNCTIONS ***

// INSERT OR UPDATE
// No "insert or update" function exists natively, so rather than rewriting the entire structure in every implementation, I am abstracting it here.
// INPUT (hash): 
//     .table : name of the target table
//     .unique_pairs : array of key-value pairs to check uniqueness on. If these pairs are found, will update, if not, will insert.
//     .update_pairs : array of key-value pairs that will be changed in the update or inserted along with the unique pairs.
// Note: this operation will run MUCH MUCH FASTER if the unique_pairs together form the primary key of the table.
// Example:
//          r = {}
//          r.table = 'x_fmcna_armis_inte_armis_op_arp_table'
//          r.unique_pairs = [ ['id','test_id'] , ['mac', 'test_mac' ] ]  -- note if this array is null or empty goes straight to an insert of the updated pairs
//          r.update_pairs = [ ['status', 'COMPLETE'] ]
//          insertOrUpdate(r)
// RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function insertOrUpdate(r)
{
  var out = {}
  var start_time = now()
  if (r.unique_pairs == null) { r.unique_pairs = [] }
  try {
    var gr = new GlideRecord(r.table)
    if (r.unique_pairs.length != 0) {
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr.addQuery(r.unique_pairs[i][0],r.unique_pairs[i][1]) } //Add all unique pairs to query
      gr.query() }
    if (gr.getRowCount() == 0) { //This is an insert, not an update.
      gr.initialize()
      for (var i=0;i&lt;r.unique_pairs.length;i++) { gr[r.unique_pairs[i][0]] = r.unique_pairs[i][1] } //Add all unique pairs to our insert
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.insert(); out.operation = 'insert' }
    else { //This is an update.
      for (var i=0;i&lt;r.update_pairs.length;i++) { gr[r.update_pairs[i][0]] = r.update_pairs[i][1] } //Add all update pairs to our insert
      gr.updateMultiple(); out.operation = 'update' }
  }
  catch(m) { out.operation = 'error: ' + m }
    
  out.time_delta = now() - start_time
  return out
}

// *** SPECIFIC TABLE FUNCTIONS ***

//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  if (p.payload == null) { p.payload = "" }
  if (p.response_body == null) { p.response_body = "" }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_rest_api_log'
  q.update_pairs = [['execution_id',p.id],['api_endpoint',p.endpoint],['payload',p.payload.substring(0,1999)],['response_code',p.response_code],
    ['response_body',p.response_body.substring(0,1999)],['query_submitted_at',p.start_time],['query_response_time_ms',p.time_delta_ms]]
  return insertOrUpdate(q)
}

//Param template: queueProperty({armis_id: , execution_id: , name: , value: })
//Create a property to upload to Armis. This shows up in the "Properties" tab, as a custom property. Technically there's a "description" but it doesn't seem to do anything, so just name and value is all we're after.
//     [int] armis_id - device ID of the Armis device this property will upload to
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(80)] name - the name of the property
//     [str(80)] value - the value of the property
//RETURN (hash):
//     .operation - string 'insert' or string 'update'. (returns 'error: [message]' if anything goes wrong.)
//     .time_delta - amount of time in milliseconds it took for the operation to run
function queueProperty(p)
{
  //We don't want to write a null value, ever.
  if (p.name == null || p.name == "") { return {operation: "error: empty name", time_delta: 0} }
  if (p.value == null || p.value == "") { return {operation: "error: empty value", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_property_upload'
  q.update_pairs = [['armis_device_id',p.armis_id],['property_name',p.name],['property_value',p.value],['execution_id',p.execution_id],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueARP({execution_id: , mac: , ip: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
//     [str(16)] execution_id - (optional) ID of the execution
//     [str(20)] mac - MAC address to push to the ARP table
//     [str(20)] ip - IP address to push to the ARP table
function queueARP(p)
{
  //We don't want to write a null mac or ip, ever.
  if (p.mac == null || p.mac == "") { return {operation: "error: empty mac", time_delta: 0} }
  if (p.ip == null || p.ip == "") { return {operation: "error: empty ip", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_arp_table'
  q.update_pairs = [['execution_id',p.execution_id],['mac',p.mac],['ip',p.ip],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueKeyAttribute({execution_id: , armis_id: , mac: , attribute: , value: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueKeyAttribute(p) 
{
  //Either the armis ID or MAC can be empty, but not both.
  if ( (p.armis_id == null || p.armis_id == "") &amp;&amp; (p.mac == null || p.mac == "") ) { return {operation: "error: must have either a MAC or an Armis ID", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  allowed_attributes = ["CATEGORY","IP","LAST_SEEN","MODEL","NAME","OS","OS_VERSION","TAG","TYPE","USER"]
  if ( includes(allowed_attributes,p.attribute) == false ) { return {operation: "error: attribute '" + p.attribute + "' is not valid.", time_delta: 0} }
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_key_attribute'
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.mac],['armis_mac',p.mac],['attribute',p.attribute],['value',p.value],['status','PENDING']]
  return insertOrUpdate(q)
}

//Param template: queueApplication({execution_id: , armis_id: , name: , version: })
//Create an ARP entry. This must be sent along with updates (for reasons Armis doesn't advise me, they just say they need it).
function queueApplication(p) 
{
  if (p.armis_id == null || p.armis_id == "") { return {operation: "error: Armis ID cannot be empty", time_delta: 0} }
  if (p.name == null || p.name == "") { return {operation: "error: Software name cannot be empty", time_delta: 0} }
  //Attributes must fall within a set of attributes allowed by Armis. (GET /api/v1/devices/csv/)
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_op_application_upload'
  q.update_pairs = [['execution_id',p.execution_id],['armis_device_id',p.mac],['application_name',p.name],['application_version',p.version],['status','PENDING']]
  return insertOrUpdate(q)
}


//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_action_log'
  q.unique_pairs = [['execution_id',p.id]]
  q.update_pairs = [['action_type',p.action_type],['api_time',p.api_time],['heavy_processing_time',p.heavy_processing_time],
    ['total_time',p.total_time],['report',p.report.substring(0,199)],['debug_string',p.debug_string.substring(0,1999)]]
  return insertOrUpdate(q)
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string');break;
    case 'int': return cache_query.getValue('value_int');break;
    case 'datetime': return cache_query.getValue('value_datetime');break;
    default: null
  }
}
// alias for tokens (the most common application) to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var q = {}
  q.table = 'x_fmcna_armis_inte_armis_integration_cache'
  q.unique_pairs = [['key',key]]
  switch (type) {
    case 'str': q.update_pairs = [['value_string',value]];break
    case 'int': q.update_pairs = [['value_int',value]];break
    case 'datetime': q.update_pairs = [['value_datetime',value]];break
  }
  return insertOrUpdate(q)
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}

//GET PENDING RECORDS
//The intention of these functions is to deal with bulk records from the operations tables that are set to PENDING.
//First, pull the last ID with getPendingRecordsEndSysID, then pull TWO sets of records using getNumPendingRecords().
//One to iterate through to GET data from records, the other to updateMultiple().
//If you attempt to updateMultiple() after iterating off of a single record set, it doesn't have any records to update;
//a second record set is needed that is still sitting at the first record for updateMultiple() to work.
//Additionally, if you setLimit() and then updateMultiple(), the updateMultiple() ignores the limit and updates ALL records, so
//it is necessary to find the "last sys_id in the set of 1000 records" that can be used as a limit condition so that updateMultiple()
//only updates 1000 records.
//In testing, if I iterated through 1000 records from the first getting data, then updatemultiple() using the second, it took &lt;100 ms.
//If I did a setValue() and update() in each iteration, it took &gt;2000 ms. So this method is complex, but extremely efficient.
//PARAMETERS:
// n - number of records to pull
// table - the table we're querying
// other_params - extensibility in case I want to expand this for other applications without breaking 
// end_sys_id - sys_id identified by the first function.
//EXAMPLE:
//   var n = 1000
//   var table = 'x_fmcna_armis_inte_armis_op_arp_table'
//   var end_sys_id = getPendingRecordsEndSysID(n,table)
//   var set_1 = getNumPendingRecords(n,table,end_sys_id)
//   var set_2 = getNumPendingRecords(n,table,end_sys_id)
//   while(set_1.next()) { /*get data from each record*/ }
//   set_2.setValue('status','COMPLETE')
//   
function getPendingRecordsEndSysID(n,table,other_params)
{
  var q = new GlideRecord(table)
  q.addQuery('status','PENDING')
  q.setLimit(n)
  q.orderBy('sys_id')
  q.query()
  var last_id;
  while(q.next()) { if(q.hasNext() == false) { return q.getValue('sys_id') } } 
}

function getNumPendingRecords(n,table,end_sys_id)
{  
  var q = new GlideRecord(table)
  q.addQuery('status','PENDING')
  q.setLimit(n)
  q.orderBy('sys_id')
  q.addQuery('sys_id','&lt;=',end_sys_id)
  q.query()
  return q
}

//Executes a REST query.
//Param template: executeStandardREST({id: , endpoint: , payload: , async: , query_params: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    endpoint - must be one of the entries on: https://fmcnadev.service-now.com/nav_to.do?uri=sys_rest_message.do?sys_id=8f8c12761b0a10104be764e8bc4bcb02
//    payload - whatever is being uploaded (must not be an attachment)
//    async - set to true if we don't want to wait for a response (if we are backed up on records to process)
//    query_params - an array of arrays (key value pairs), e.g. [['orderBy','id'],['length',100],['from',1]]
//Returns (as hash):
//    response_code 
//    response_body 
//    api_time - in milliseconds

function executeStandardREST(p)
{
  try {
    var starttime = new GlideDateTime()

    var request = new sn_ws.RESTMessageV2('Armis API',p.endpoint)
    request.setRequestHeader('Authorization',getCurrentToken())
    request.setRequestHeader('accept','application/json')
    request.setRequestHeader('content-type','application/json')

    //Set up parameters
    if(p.query_params == null) { p.query_params = [] }
    for(var i=0; i&lt;p.query_params.length; i++) { request.setQueryParameter(p.query_params[i][0],p.query_params[i][1]) }

    request.setRequestBody(p.payload)
    
    //Execute query.
    var api_start = now()
    var response;
    var r = {}
    if(p.async == true) { response = request.executeAsync() }
    else {
      response = request.execute()
      r.response_code = response.getStatusCode()
      r.response_body = response.getBody()
    }
    r.api_time = now() - api_start
    
    //Report the API call.
    writeToAPILog({id: p.id, endpoint: p.endpoint, payload: p.payload, response_code: r.response_code, response_body: r.response_body, start_time: starttime, time_delta_ms: r.api_time})
    
    return r;
  }
  catch(ex)
  {
    var r = {}
    r.response_code = "xx"
    r.response_body = "Failed to build query. " + ex
    r.api_time = 0
    return r
  }
}

//REST queries that involve attachments (CSV/Key, ARP) cannot be executed within actions--they require IntegrationHub to do a multipart upload.
//So, we queue them up and execute them at the flow level.
//Param template: queueAttachmentREST({id: , type: , payload: })
//Params:
//    id - execution ID, if we have one to write to the API log.
//    type - either 'CSV' or 'ARP'
//    payload - whatever is being uploaded
function queueAttachmentREST(p)
{
  //Create the attachment
  var gr = new GlideRecord("sys_attachment");
  var gsa = new GlideSysAttachment();
  var attachmentId = gsa.write(gr, p.id + ".csv", 'text/plain', p.payload);
  
  var q = new GlideRecord('x_fmcna_armis_inte_armis_attachment_upload')
  q.initialize()
  q.attachment = attachmentId
  q.execution_id = p.id
  q.status = 'PENDING'
  q.type = p.type
  q.insert()
}

// ***************************************
// *** GETD_GetBulkArmisData FUNCTIONS ***
// ***************************************




// *************************************************************
// *** SANDBOX -- DO NOT COPY BELOW THIS LINE WHEN MINIFYING ***
// *************************************************************

(function execute(inputs, outputs) {
  
  debug = []
 
 /*j = '{"accessSwitch":null,"category":"Unknown","firstSeen":"2020-07-23T17:25:20","id":843846,"ipAddress":"10.55.24.104","lastSeen":"2020-07-23T17:25:20","macAddress":"d4:d2:52:4c:0a:09","manufacturer":"Intel","model":"Intel device","name":null,"operatingSystem":null,"operatingSystemVersion":null,"riskLevel":1,"sensor":{"name":"FL4-Back Right","type":"Access Point"},"site":{"location":"350 Merrimack St, Lawrence, MA 01843","name":"NxStage Lawrence MA"},"tags":[],"type":"Unknown","user":"","visibility":"Full"}'
 jo = JSON.parse(j)*/

  //debug.push(JSON.stringify(queueProperty({armis_id: 1, name: "Test Property", value: "Test Value"})))
  //debug.push(JSON.stringify(queueKeyAttribute({armis_id: 1, mac: "TEST_MAC", attribute: "IP", value: "TEST_IP"})))
  //debug.push(JSON.stringify(queueARP({mac: "Test_MAC", ip: "Test_IP"})))
  //debug.push(JSON.stringify(queueApplication({armis_id: 1, name: "Test Software"})))
  
  //var esys_id = getPendingRecordsEndSysID(1900,'x_fmcna_armis_inte_armis_op_arp_table',{})
  
  //var payload = '[{"upsert":{"description":"SNOW Location","deviceId":795567,"type":"SNOW Location","value":"Earth"}}]'
  
  //debug.push(JSON.stringify(executeREST({id: generateID(), endpoint: 'POST Properties', payload: payload, async: false, query_params: []})))
  
  var payload = 'ip,mac\n10.100.134.43,20:99:29:31:92:14\n10.100.134.5,3F:8C:91:58:14:41\n10.100.134.12,2D:91:AF:D6:94:35\n10.100.134.33,C8:72:03:F8:E2:89'
  queueAttachmentREST({id: generateID(), type: 'CSV', payload: payload})
  
  outputs.debug = debug.join("\n")
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=ed0e35bf1b0ed8104ca7edf9bc4bcb13^sys_idNOT INa50e35bf1b0ed8104ca7edf9bc4bcb17"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=3dd8b4c7-0a82-4a9d-9b1d-faa37e6b9813</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="LIBRARY">ed0e35bf1b0ed8104ca7edf9bc4bcb13</model>
        <model_id>ed0e35bf1b0ed8104ca7edf9bc4bcb13</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_ed0e35bf1b0ed8104ca7edf9bc4bcb13</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a50e35bf1b0ed8104ca7edf9bc4bcb17</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:00</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="FUNCTION_LIBRARY (v2.1)">a50e35bf1b0ed8104ca7edf9bc4bcb12</action>
        <cid>a73465c8-4eec-4248-8884-9f03a895f380</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>UPDATE ARMIS DEVICE</label>
        <order>2</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-30 14:48:56</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f2b459c21b9e18104be764e8bc4bcbf8</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=f2b459c21b9e18104be764e8bc4bcbf8"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f2b459c21b9e18104be764e8bc4bcbf8</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-30 14:48:56</sys_created_on>
        <sys_id>0fb459c21b9e18104be764e8bc4bcbfd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken, can also be 'no_update_needed' if the digest matched and no update was pushed.
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  var input_digest = digest(JSON.stringify(j))
  return_vals.digest = input_digest
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }
  return_vals.is_insert = is_insert
  
  //For updates, only need to actually perform the update if the digest doesn't match.
  //If the digest does match, then the device has not been modified since the last time we refreshed this object,
  //and no update needs to take place.
  var perform_update_or_insert = true
  if(!is_insert &amp;&amp; device.getValue('digest') == input_digest) { perform_update_or_insert = false }
  return_vals.perform = perform_update_or_insert
  return_vals.digest_existing = device.getValue('digest')
  
  if (perform_update_or_insert)
  {
    //Set all values
    device.access_switch = j.accessSwitch
    device.armis_device_id = j.id
    device.armis_risk_level = j.riskLevel
    device.category = j.category
    device.first_seen = new GlideDateTime(j.firstSeen)
    device.ip_address = j.ipAddress
    device.last_seen = new GlideDateTime(j.lastSeen)
    device.mac_address = j.macAddress
    device.manufacturer = j.manufacturer
    device.model = j.model
    device.name = j.name
    device.os = j.operatingSystem
    device.os_version = j.operatingSystemVersion
    device.sensor_name = j.sensor.name
    device.sensor_type = j.sensor.type
    device.site = j.site.name
    device.site_location = j.site.location
    device.armis_tags = JSON.stringify(j.tags)
    device.visibility = j.visibility
    device.digest = input_digest

    //Either insert or update.
    var device_record;
    if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
    return_vals.record = device_record
  
    //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
    if (tags_to_table)
    {
      if (j.tags == null) { j.tags = [] }
      var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tags.addQuery('armis_device',device_record)
      q_tags.query()

      //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
      var already_have_these_tags = []
      while (q_tags.next()) {
        var tag = q_tags.getValue('armis_tag')
        if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
      }

      //Insert new tags.
      for(var i=0;i&lt;j.tags.length;i++)
      {
        //Skip if we already have this tag.
        if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
        var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
        q_tag.initialize()
        q_tag.armis_device = device_record
        q_tag.armis_tag = j.tags[i]
        q_tag.insert()
      }
    }
  }
  else
  {
    //The input digest was identical to the existing digest. This means no update needed to take place.
    return_vals.action = 'no_update_needed'
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}

// MINIFIED

function updateArmisDevice(e,i){var a=(new GlideDateTime).getNumericValue(),s={},t=new GlideRecord("x_fmcna_armis_inte_armis_device_table"),r=digest(JSON.stringify(e));s.digest=r,t.addQuery("armis_device_id",e.id),t.query();var n=0==t.getRowCount();n?t.initialize():t.next(),s.is_insert=n;var d,_=!0;if(n||t.getValue("digest")!=r||(_=!1),s.perform=_,s.digest_existing=t.getValue("digest"),_){if(t.access_switch=e.accessSwitch,t.armis_device_id=e.id,t.armis_risk_level=e.riskLevel,t.category=e.category,t.first_seen=new GlideDateTime(e.firstSeen),t.ip_address=e.ipAddress,t.last_seen=new GlideDateTime(e.lastSeen),t.mac_address=e.macAddress,t.manufacturer=e.manufacturer,t.model=e.model,t.name=e.name,t.os=e.operatingSystem,t.os_version=e.operatingSystemVersion,t.sensor_name=e.sensor.name,t.sensor_type=e.sensor.type,t.site=e.site.name,t.site_location=e.site.location,t.armis_tags=JSON.stringify(e.tags),t.visibility=e.visibility,t.digest=r,n?(d=t.insert(),s.action="insert"):(d=t.update(),s.action="update"),s.record=d,i){null==e.tags&amp;&amp;(e.tags=[]);var m=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");m.addQuery("armis_device",d),m.query();for(var c=[];m.next();){var l=m.getValue("armis_tag");includes(c,m.getValue("armis_tag"))?c.push(l):m.deleteRecord()}for(var g=0;g&lt;e.tags.length;g++)if(!includes(c,e.tags[g])){var o=new GlideRecord("x_fmcna_armis_inte_armis_device_tags");o.initialize(),o.armis_device=d,o.armis_tag=e.tags[g],o.insert()}}}else s.action="no_update_needed";return s.time_delta=(new GlideDateTime).getNumericValue()-a,s}



(function execute(inputs, outputs) {
// ... code ...
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>f2b459c21b9e18104be764e8bc4bcbf8</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-30 14:48:56</sys_created_on>
        <sys_id>4bb459c21b9e18104be764e8bc4bcbfd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-30 14:48:56</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_output_a50e35bf1b0ed8104ca7edf9bc4bcb12^sys_idNOT INb10e35bf1b0ed8104ca7edf9bc4bcb57"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>debug</element>
        <help/>
        <hint/>
        <label>debug</label>
        <language>en</language>
        <name>var__m_sys_hub_action_output_a50e35bf1b0ed8104ca7edf9bc4bcb12</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-23 18:03:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b10e35bf1b0ed8104ca7edf9bc4bcb57</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-23 18:03:01</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
</record_update>
