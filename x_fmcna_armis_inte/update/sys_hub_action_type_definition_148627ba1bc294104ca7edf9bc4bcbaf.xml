<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_hub_action_type_definition">
    <sys_hub_action_type_definition action="INSERT_OR_UPDATE">
        <access>public</access>
        <acls/>
        <action_template/>
        <active>true</active>
        <annotation/>
        <callable_by_client_api>false</callable_by_client_api>
        <category/>
        <copied_from/>
        <copied_from_name/>
        <description/>
        <ih_action>false</ih_action>
        <internal_name>debug_sandbox</internal_name>
        <label_cache>[{"name":"{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].variable}}","label":"step➛LIBRARY/SANDBOX➛variable","type":"step","ref":""},{"name":"{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].debug}}","label":"step➛LIBRARY/SANDBOX➛debug","type":"step","ref":""}]</label_cache>
        <latest_snapshot/>
        <master_snapshot/>
        <name>(v2.1) DEBUG_SandboxAndLibrary</name>
        <natlang/>
        <outputs/>
        <outputs/>
        <state>draft</state>
        <sys_class_name>sys_hub_action_type_definition</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:05:34</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>148627ba1bc294104ca7edf9bc4bcbaf</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>(v2.1) DEBUG_SandboxAndLibrary</sys_name>
        <sys_overrides/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name>sys_hub_action_type_definition_148627ba1bc294104ca7edf9bc4bcbaf</sys_update_name>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 15:56:17</sys_updated_on>
        <system_level>false</system_level>
        <type/>
    </sys_hub_action_type_definition>
    <sys_variable_value action="delete_multiple" query="document_key=148627ba1bc294104ca7edf9bc4bcbaf"/>
    <sys_element_mapping action="delete_multiple" query="id=148627ba1bc294104ca7edf9bc4bcbaf"/>
    <sys_element_mapping action="INSERT_OR_UPDATE">
        <field>debug</field>
        <id>148627ba1bc294104ca7edf9bc4bcbaf</id>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>f307233e1bc294104ca7edf9bc4bcbdb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <table>var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf</table>
        <value>{{step[0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2].debug}}</value>
    </sys_element_mapping>
    <sys_hub_step_instance action="delete_multiple" query="action=148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT IN73076f361bc294104ca7edf9bc4bcb6a"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="(v2.1) DEBUG_SandboxAndLibrary">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIBRARY/SANDBOX</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>73076f361bc294104ca7edf9bc4bcb6a</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 15:56:17</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=73076f361bc294104ca7edf9bc4bcb6a"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7707233e1bc294104ca7edf9bc4bcbd0</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 15:56:17</sys_updated_on>
        <value>// *******************************
// **** FUNCTION LIBRARY v0.2 ****
// *******************************

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify this execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyz'
  for (var i = 16; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

//WRITE TO API LOG
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  var api_log_query = new GlideRecord('x_fmcna_armis_inte_armis_rest_api_log')
  api_log_query.setValue('execution_id',p.id)
  api_log_query.setValue('api_endpoint',p.endpoint)
  if (p.payload != null) { api_log_query.setValue('payload',p.payload.substring(0,1999)) }
  api_log_query.setValue('response_code',p.response_code)
  if (p.response_body != null) { api_log_query.setValue('response_body',p.response_body.substring(0,1999)) }
  api_log_query.setValue('query_submitted_at',p.start_time)
  api_log_query.setValue('query_response_time_ms',p.time_delta_ms)
  api_log_query.insert()
}

//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var alog = new GlideRecord('x_fmcna_armis_inte_armis_action_log')
  alog.setValue('execution_id',p.id)
  alog.query()
  var insert = alog.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (insert) { alog.initialize(); alog.execution_id = p.id } else { alog.next() } 
  alog.setValue('action_type',p.action_type)
  alog.setValue('api_time',p.api_time)
  alog.setValue('heavy_processing_time',p.heavy_processing_time)
  alog.setValue('total_time',p.total_time)
  alog.setValue('report',p.report.substring(0,199))
  alog.setValue('debug_string',p.debug_string.substring(0,1999))
  if (insert) { return alog.insert() } else { return alog.update()}
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string')
    case 'int': return cache_query.getValue('value_int')
    case 'datetime': return cache_query.getValue('value_datetime')
    default: return null
  }
}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  var insert = cache_query.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (insert) { cache_query.initialize(); cache_query.key = key } else { cache_query.next() }
  switch (type) {
    case 'str': cache_query.value_string = value
    case 'int': cache_query.value_int = value
    case 'datetime': cache_query.value_datetime = value
  }
  if (insert) { cache_query.insert() } else { cache_query.update()}
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}

//MISC. FUNCTIONS

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 
// alias to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}
//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }


// ***************************************
// *** GETD_GetBulkArmisData FUNCTIONS ***
// ***************************************

//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }

  //Set all values
  device.access_switch = j.accessSwitch
  device.armis_device_id = j.id
  device.armis_risk_level = j.riskLevel
  device.category = j.category
  device.first_seen = new GlideDateTime(j.firstSeen)
  device.ip_address = j.ipAddress
  device.last_seen = new GlideDateTime(j.lastSeen)
  device.mac_address = j.macAddress
  device.manufacturer = j.manufacturer
  device.model = j.model
  device.name = j.name
  device.os = j.operatingSystem
  device.os_version = j.operatingSystemVersion
  device.sensor_name = j.sensor.name
  device.sensor_type = j.sensor.type
  device.site = j.site.name
  device.site_location = j.site.location
  device.armis_tags = JSON.stringify(j.tags)

  //Either insert or update.
  var device_record;
  if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
  return_vals.record = device_record
  
  //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
  if (tags_to_table)
  {
    if (j.tags == null) { j.tags = [] }
    var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
    q_tags.addQuery('armis_device',device_record)
    q_tags.query()

    //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
    var already_have_these_tags = []
    while (q_tags.next()) {
      var tag = q_tags.getValue('armis_tag')
      if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
    }

    //Insert new tags.
    for(var i=0;i&lt;j.tags.length;i++)
    {
      //Skip if we already have this tag.
      if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
      var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tag.initialize()
      q_tag.armis_device = device_record
      q_tag.armis_tag = j.tags[i]
      q_tag.insert()
    }
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}

// **********************
// *** IMPLEMENTATION ***
// **********************

(function execute(inputs, outputs) {
  
  
 //j = JSON.parse('{"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":1001880,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA2","ServiceNow Import Prod2","FKC Region Northeast2","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}')

  
  
  
  
  inputs.mode = 'refresh'
  //Set up query
  var armis_query = getConfigValue('armis_' + inputs.mode + '_query')
  //If this is a "refresh" run, we want to query yesterday's data. We have manually placed a placeholder in the string.
  if (inputs.mode == 'refresh')
  {
    //var today = new GlideDateTime()
    //armis_query = armis_query.replace("###YYYY-MM-DD###")
  }
 
  //var today = new GlideDateTime()
  outputs.debug = new GlideDateTime().getTime()
  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7f07233e1bc294104ca7edf9bc4bcbcf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=73076f361bc294104ca7edf9bc4bcb6a^sys_idNOT IN7307233e1bc294104ca7edf9bc4bcbc6"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=3dd8b4c7-0a82-4a9d-9b1d-faa37e6b9813</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="LIBRARY/SANDBOX">73076f361bc294104ca7edf9bc4bcb6a</model>
        <model_id>73076f361bc294104ca7edf9bc4bcb6a</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_73076f361bc294104ca7edf9bc4bcb6a</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7307233e1bc294104ca7edf9bc4bcbc6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_hub_action_output action="delete_multiple" query="model=148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT INbf07233e1bc294104ca7edf9bc4bcbd2"/>
    <sys_hub_action_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,pwd2droppable=true,uiType=string,uiTypeLabel=String,uiUniqueId=8f49d6ee-1463-42d9-a53f-6980e4241c94</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_prototype/>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_link/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>false</mandatory>
        <max_length>8000</max_length>
        <model display_value="(v2.1) DEBUG_SandboxAndLibrary">148627ba1bc294104ca7edf9bc4bcbaf</model>
        <model_id>148627ba1bc294104ca7edf9bc4bcbaf</model_id>
        <model_table>sys_hub_action_type_definition</model_table>
        <name>var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_action_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>bf07233e1bc294104ca7edf9bc4bcbd2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_action_output>
    <sys_hub_step_instance action="delete_multiple" query="action=148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT IN73076f361bc294104ca7edf9bc4bcb6a"/>
    <sys_hub_step_instance action="INSERT_OR_UPDATE">
        <action display_value="(v2.1) DEBUG_SandboxAndLibrary">148627ba1bc294104ca7edf9bc4bcbaf</action>
        <cid>0020aeb9-2a56-4ba1-8e8c-c7ed0d0a30f2</cid>
        <extended_inputs/>
        <extended_outputs/>
        <icon/>
        <inputs/>
        <label>LIBRARY/SANDBOX</label>
        <order>1</order>
        <outputs/>
        <section/>
        <step_type display_value="Script">106afb6647032200b4fad7527c9a71e7</step_type>
        <sys_class_name>sys_hub_step_instance</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>73076f361bc294104ca7edf9bc4bcb6a</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 15:56:17</sys_updated_on>
    </sys_hub_step_instance>
    <sys_variable_value action="delete_multiple" query="document_key=73076f361bc294104ca7edf9bc4bcb6a"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>600</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7707233e1bc294104ca7edf9bc4bcbd0</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-22 15:56:17</sys_updated_on>
        <value>// *******************************
// **** FUNCTION LIBRARY v0.2 ****
// *******************************

//GENERATE A RANDOM ID
//There is no accessible ID for a particular action from within a script step, so this value is used
//to cross reference between the debug log, the API log, operation log, etc. to uniquely identify this execution.
function generateID()
{ 
  var ans = '';
  arr = '0123456789abcdefghijklmnopqrstuvwxyz'
  for (var i = 16; i &gt; 0; i--) { ans += arr[Math.floor(Math.random() * arr.length)] } 
  return ans; 
} 

//WRITE TO API LOG
//Logs the data we're sending to Armis via the API, as well as the response from Armis.
//Param template: writeToAPILog({id: , endpoint: , payload: , response_code: , response_body: , start_time: , time_delta_ms: })
//EXAMPLE: writeToAPILog({id: generateID(), endpoint: "test", payload: "Sample Payload", response_code: 200, response_body: "Sample Response", start_time: new GlideDateTime(), time_delta_ms: 1000})

//Params:
//[str] id - action ID set by generateID() above.
//[choice] endpoint - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=cd79b5a01b8e9c904ca7edf9bc4bcb04
//[str(2000)] payload - contains the text of the CSV or parameter being sent to Armis
//[int] response_code - integer (e.g. 200 or 207 for success) representing the result of the API call
//[str(2000)] response_body - text returned from Armis
//[GlideDateTime] start_time - set before the call
//[int] time_delta_ms - ending now() - starting now()
function writeToAPILog(p)
{
  var api_log_query = new GlideRecord('x_fmcna_armis_inte_armis_rest_api_log')
  api_log_query.setValue('execution_id',p.id)
  api_log_query.setValue('api_endpoint',p.endpoint)
  if (p.payload != null) { api_log_query.setValue('payload',p.payload.substring(0,1999)) }
  api_log_query.setValue('response_code',p.response_code)
  if (p.response_body != null) { api_log_query.setValue('response_body',p.response_body.substring(0,1999)) }
  api_log_query.setValue('query_submitted_at',p.start_time)
  api_log_query.setValue('query_response_time_ms',p.time_delta_ms)
  api_log_query.insert()
}

//WRITE TO ACTION LOG
//Writes to the table "Armis Action Log", which is intended to be a mechanism to monitor the performance of this integration's actions.
//Param template: writeToActionLog({id: , action_type: , total_time: , api_time: , heavy_processing_time: , report: , debug_string: })
//EXAMPLE: writeToActionLog({id: generateID(), action_type: "TEST", total_time: 100000, api_time: 50000, heavy_processing_time: 30000, report: "Test report string", debug_string: "Test debug string"})

//Params:
//[str] id - action ID set by generateID() above
//[choice] action_type - must be found on the choice table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=3f7a1b761b8e10104be764e8bc4bcb9f
//[int] total_time - the total time in milliseconds ( ending now() - starting now() )
//[int] api_time - time spent waiting for the API (measure immediately before and after a REST)
//[int] heavy_processing_time - time spent doing something CPU/SQL intensive, such as breaking down a JSON and storing X records (measure immediately before and after)
//[str(200)] report - human readable summary of what the action did
//[str(2000)] debug_string - store the debug string for later diagnosis
function writeToActionLog(p)
{
  var alog = new GlideRecord('x_fmcna_armis_inte_armis_action_log')
  alog.setValue('execution_id',p.id)
  alog.query()
  var insert = alog.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (insert) { alog.initialize(); alog.execution_id = p.id } else { alog.next() } 
  alog.setValue('action_type',p.action_type)
  alog.setValue('api_time',p.api_time)
  alog.setValue('heavy_processing_time',p.heavy_processing_time)
  alog.setValue('total_time',p.total_time)
  alog.setValue('report',p.report.substring(0,199))
  alog.setValue('debug_string',p.debug_string.substring(0,1999))
  if (insert) { return alog.insert() } else { return alog.update()}
}

//CONFIGURATION MANIPULATION
//Grabs a set value from the Armis Integration Configuration table. The config table hould be treated as read-only except in specific cases.
//NOTE: ALL CONFIG VALUES ARE STRINGS. If there is no such value, returns "".
//Keys must be from this table: https://fmcnadev.service-now.com/sys_dictionary.do?sys_id=458563461bed90104be764e8bc4bcbf0
function getConfigValue(key)
{
  var q = new GlideRecord('x_fmcna_armis_inte_armis_integration_configuration')
  q.addQuery('key',key); q.query()
  if (q.getRowCount() == 0) { return "" }
  q.next(); return q.getValue('value')
}

//CACHE MANIPULATION
//getCacheValue, setCacheValue, and deleteCacheValue manipulate the "Armis Integration Cache".
//This table is used to store ("global") variables used between actions.
//The table discretely separates string values, int values, and datetime values, so for the "type" of value, you need to specify via one of the following strings: ['str','int','datetime']

function getCacheValue(/*str*/ key, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  if (cache_query.getRowCount() == 0) { return null }
  cache_query.next()
  switch (type) {
    case 'str': return cache_query.getValue('value_string')
    case 'int': return cache_query.getValue('value_int')
    case 'datetime': return cache_query.getValue('value_datetime')
    default: return null
  }
}

function setCacheValue(/*str*/ key, value, /* ['str','int','datetime'] */ type)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  var insert = cache_query.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (insert) { cache_query.initialize(); cache_query.key = key } else { cache_query.next() }
  switch (type) {
    case 'str': cache_query.value_string = value
    case 'int': cache_query.value_int = value
    case 'datetime': cache_query.value_datetime = value
  }
  if (insert) { cache_query.insert() } else { cache_query.update()}
}

function deleteCacheValue(/*str*/ key)
{
  var cache_query = new GlideRecord('x_fmcna_armis_inte_armis_integration_cache')
  cache_query.addQuery('key',key)
  cache_query.query()
  cache_query.deleteMultiple()
}

//MISC. FUNCTIONS

// returns milliseconds since epoch
function now() { return new GlideDateTime().getNumericValue() } 
// alias to use inline for token retrieval
function getCurrentToken() { return getCacheValue('token','str')}
//Apparently .includes() is not present in this version of javascript. I'll make my own .includes().
function includes(test_arr,test_var) { for (var i=0;i&lt;test_arr.length;i++) { if (test_arr[i] == test_var) { return true } }; return false }


// ***************************************
// *** GETD_GetBulkArmisData FUNCTIONS ***
// ***************************************

//UPDATE ARMIS DEVICE (v0.2)
// Interprets the JSON block and stores its values into the Armis Device Table. Also stores tags in the Armis Tags table.
// Parameter j is a JSON hash that represents a single device as returned from Armis.
// Example starting JSON format: {"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":100188,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA","ServiceNow Import Prod","FKC Region Northeast","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}
// Parameter tags_to_table should be true if the tags on the import should be pushed to the "Armis Tags" table. This may substantially increase the time it takes to process.

//Returns a hash with the following keys:
// action - 'insert' or 'update' depending on which action was taken
// time_delta - value in milliseconds for how long this operation took
// record - sys_id of the record that was inserted or updated
function updateArmisDevice(/*obj from json*/ j,/*bool*/ tags_to_table)
{
  var start_time = new GlideDateTime().getNumericValue()
  var return_vals = {}
  var device = new GlideRecord('x_fmcna_armis_inte_armis_device_table')
  //Does this already exist?
  device.addQuery('armis_device_id',j.id)
  device.query()

  //Flag as an insert if it exists, otherwise it's an update.
  var is_insert = device.getRowCount() == 0 //If we have no records, it's an insert, otherwise it's an update.
  if (is_insert) { device.initialize() } else { device.next() }

  //Set all values
  device.access_switch = j.accessSwitch
  device.armis_device_id = j.id
  device.armis_risk_level = j.riskLevel
  device.category = j.category
  device.first_seen = new GlideDateTime(j.firstSeen)
  device.ip_address = j.ipAddress
  device.last_seen = new GlideDateTime(j.lastSeen)
  device.mac_address = j.macAddress
  device.manufacturer = j.manufacturer
  device.model = j.model
  device.name = j.name
  device.os = j.operatingSystem
  device.os_version = j.operatingSystemVersion
  device.sensor_name = j.sensor.name
  device.sensor_type = j.sensor.type
  device.site = j.site.name
  device.site_location = j.site.location
  device.armis_tags = JSON.stringify(j.tags)

  //Either insert or update.
  var device_record;
  if (is_insert) { device_record = device.insert(); return_vals.action = 'insert' } else { device_record = device.update(); return_vals.action = 'update' }
  return_vals.record = device_record
  
  //Process tags (if the flag is set to do so). Delete old tags, insert new tags.
  if (tags_to_table)
  {
    if (j.tags == null) { j.tags = [] }
    var q_tags = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
    q_tags.addQuery('armis_device',device_record)
    q_tags.query()

    //Only delete tags that aren't in the current tag list. Document the ones that are to use when inserting.
    var already_have_these_tags = []
    while (q_tags.next()) {
      var tag = q_tags.getValue('armis_tag')
      if (includes(already_have_these_tags,q_tags.getValue('armis_tag'))) { already_have_these_tags.push(tag) } else { q_tags.deleteRecord() }
    }

    //Insert new tags.
    for(var i=0;i&lt;j.tags.length;i++)
    {
      //Skip if we already have this tag.
      if ( includes(already_have_these_tags,j.tags[i]) ) { continue }
      var q_tag = new GlideRecord('x_fmcna_armis_inte_armis_device_tags')
      q_tag.initialize()
      q_tag.armis_device = device_record
      q_tag.armis_tag = j.tags[i]
      q_tag.insert()
    }
  }
  return_vals.time_delta = new GlideDateTime().getNumericValue() - start_time
  return return_vals
}

// **********************
// *** IMPLEMENTATION ***
// **********************

(function execute(inputs, outputs) {
  
  
 //j = JSON.parse('{"accessSwitch":null,"category":"Medical Therapeutic","firstSeen":"2020-05-12T04:34:00","id":1001880,"ipAddress":"10.25.170.184","lastSeen":"2020-06-27T10:54:37.220709","macAddress":"00:0e:8e:5b:18:e6","manufacturer":"Fresenius Medical Care","model":"2008T G2 Pri","name":"FMC_74FE480AA906","operatingSystem":"Linux","operatingSystemVersion":null,"riskLevel":2,"sensor":{"name":"SPAN 9153 eth7 (ITG Datacenter Waltham 1 )","type":"SPAN"},"site":{"location":"Waltham, MA","name":"ITG Waltham Datacenter"},"tags":["FDA2","ServiceNow Import Prod2","FKC Region Northeast2","FKC Pennsylvania","FKC","ServiceNow"],"type":"Cart","user":"","visibility":"Full"}')

  
  
  
  
  inputs.mode = 'refresh'
  //Set up query
  var armis_query = getConfigValue('armis_' + inputs.mode + '_query')
  //If this is a "refresh" run, we want to query yesterday's data. We have manually placed a placeholder in the string.
  if (inputs.mode == 'refresh')
  {
    //var today = new GlideDateTime()
    //armis_query = armis_query.replace("###YYYY-MM-DD###")
  }
 
  //var today = new GlideDateTime()
  outputs.debug = new GlideDateTime().getTime()
  
})(inputs, outputs);
</value>
        <variable display_value="">71aa7f6647032200b4fad7527c9a719b</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_hub_step_instance</document>
        <document_key>73076f361bc294104ca7edf9bc4bcb6a</document_key>
        <order>400</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_id>7f07233e1bc294104ca7edf9bc4bcbcf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <value>35aa573fd7802200bdbaee5b5e610375</value>
        <variable display_value="">f5e56d79b3101300176b051a16a8dce4</variable>
    </sys_variable_value>
    <sys_hub_step_ext_output action="delete_multiple" query="model=73076f361bc294104ca7edf9bc4bcb6a^sys_idNOT IN7307233e1bc294104ca7edf9bc4bcbc6"/>
    <sys_hub_step_ext_output action="INSERT_OR_UPDATE">
        <active>true</active>
        <array>false</array>
        <array_denormalized>false</array_denormalized>
        <attributes>element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType=string,uiTypeLabel=String,uiUniqueId=3dd8b4c7-0a82-4a9d-9b1d-faa37e6b9813</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]></calculation>
        <choice/>
        <choice_field/>
        <choice_table/>
        <column_label/>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>debug</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <function_definition/>
        <function_field>false</function_field>
        <help/>
        <hint/>
        <internal_type display_value="String">string</internal_type>
        <label>debug</label>
        <mandatory>true</mandatory>
        <max_length>8000</max_length>
        <model display_value="LIBRARY/SANDBOX">73076f361bc294104ca7edf9bc4bcb6a</model>
        <model_id>73076f361bc294104ca7edf9bc4bcb6a</model_id>
        <model_table>sys_hub_step_instance</model_table>
        <name>var__m_sys_hub_step_ext_output_73076f361bc294104ca7edf9bc4bcb6a</name>
        <next_element/>
        <order>1</order>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <sizeclass/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_hub_step_ext_output</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7307233e1bc294104ca7edf9bc4bcbc6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>false</virtual>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_hub_step_ext_output>
    <sys_documentation action="delete_multiple" query="name=var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf^sys_idNOT INb307233e1bc294104ca7edf9bc4bcbd8"/>
    <sys_documentation action="INSERT_OR_UPDATE">
        <element>debug</element>
        <help/>
        <hint/>
        <label>debug</label>
        <language>en</language>
        <name>var__m_sys_hub_action_output_148627ba1bc294104ca7edf9bc4bcbaf</name>
        <plural/>
        <sys_class_name>sys_documentation</sys_class_name>
        <sys_created_by>3244578</sys_created_by>
        <sys_created_on>2020-07-20 23:07:59</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b307233e1bc294104ca7edf9bc4bcbd8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name/>
        <sys_package display_value="Armis Integration" source="x_fmcna_armis_inte">7574b5e3dbf4d050cb24431e13961986</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Armis Integration">7574b5e3dbf4d050cb24431e13961986</sys_scope>
        <sys_update_name/>
        <sys_updated_by>3244578</sys_updated_by>
        <sys_updated_on>2020-07-20 23:07:59</sys_updated_on>
        <url/>
        <url_target/>
    </sys_documentation>
</record_update>
